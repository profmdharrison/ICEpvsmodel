("ICEinfusionpumps" infusion_pumps_th execute_ip_TCC1 0 (execute_ip_TCC1-1 nil 3803381084 ("" (cond-disjoint-tcc) nil nil) nil nil (execute_ip disjointness "COND infusion_pumps_th.a = coord_t_and_c_th.powr -> infusion_pumps_th.fun_power(infusion_pumps_th.ds), infusion_pumps_th.a = coord_t_and_c_th.incr -> IF infusion_pumps_th.per_incr(infusion_pumps_th.ds) THEN infusion_pumps_th.fun_incr(infusion_pumps_th.ds) ELSE infusion_pumps_th.ds WITH [ip_error := booleans.TRUE] ENDIF, infusion_pumps_th.a = coord_t_and_c_th.decr -> IF infusion_pumps_th.per_decr(infusion_pumps_th.ds) THEN infusion_pumps_th.fun_decr(infusion_pumps_th.ds) ELSE infusion_pumps_th.ds WITH [ip_error := booleans.TRUE] ENDIF, infusion_pumps_th.a = coord_t_and_c_th.bolus -> IF infusion_pumps_th.per_bolus(infusion_pumps_th.ds) THEN infusion_pumps_th.fun_bolus(infusion_pumps_th.ds) ELSE infusion_pumps_th.ds WITH [ip_error := booleans.TRUE] ENDIF, infusion_pumps_th.a = coord_t_and_c_th.confirm -> IF infusion_pumps_th.per_confirm(infusion_pumps_th.ds) THEN infusion_pumps_th.fun_confirm(infusion_pumps_th.ds) ELSE infusion_pumps_th.ds WITH [ip_error := booleans.TRUE] ENDIF, infusion_pumps_th.a = coord_t_and_c_th.choosetime -> IF infusion_pumps_th.per_choosetime(infusion_pumps_th.ds) THEN infusion_pumps_th.fun_choosetime(infusion_pumps_th.ds) ELSE infusion_pumps_th.ds WITH [ip_error := booleans.TRUE] ENDIF, infusion_pumps_th.a = coord_t_and_c_th.choosevtbi -> IF infusion_pumps_th.per_choosevtbi(infusion_pumps_th.ds) THEN infusion_pumps_th.fun_choosevtbi(infusion_pumps_th.ds) ELSE infusion_pumps_th.ds WITH [ip_error := booleans.TRUE] ENDIF, infusion_pumps_th.a = coord_t_and_c_th.chooserate -> IF infusion_pumps_th.per_chooserate(infusion_pumps_th.ds) THEN infusion_pumps_th.fun_chooserate(infusion_pumps_th.ds) ELSE infusion_pumps_th.ds WITH [ip_error := booleans.TRUE] ENDIF, infusion_pumps_th.a = coord_t_and_c_th.start -> IF infusion_pumps_th.per_infuse(infusion_pumps_th.ds) THEN infusion_pumps_th.fun_infuse(infusion_pumps_th.ds) ELSE infusion_pumps_th.ds WITH [ip_error := booleans.TRUE] ENDIF, infusion_pumps_th.a = coord_t_and_c_th.hold -> IF infusion_pumps_th.per_pause(infusion_pumps_th.ds) THEN infusion_pumps_th.fun_pause(infusion_pumps_th.ds) ELSE infusion_pumps_th.ds WITH [ip_error := booleans.TRUE] ENDIF, ELSE -> infusion_pumps_th.ds WITH [ip_error := booleans.TRUE] ENDCOND" "nil")))("ICEpatients" patient_th null_nc_TCC1 0 (null_nc_TCC1-1 nil 3821444858 ("" (subtype-tcc) nil nil) ((num_par const-decl "boolean" coord_t_and_c_th nil)) nil (null_nc subtype "coord_t_and_c_th.num_er" "(coord_t_and_c_th.num_par)")))("ICEpatients" patient_th null_ec_TCC1 0 (null_ec_TCC1-1 nil 3821444858 ("" (subtype-tcc) nil nil) ((enum_par const-decl "boolean" coord_t_and_c_th nil)) nil (null_ec subtype "coord_t_and_c_th.enum_er" "(coord_t_and_c_th.enum_par)")))("ICEcoordinator" coordinator_th update_enum_pars_TCC1 0 (update_enum_pars_TCC1-1 nil 3821446710 ("" (subtype-tcc) (("" (postpone) nil nil)) nil) nil nil (update_enum_pars subtype "coordinator_th.pr" "(coord_t_and_c_th.enum_par)")))("ICEcoordinator" coordinator_th update_num_pars_TCC1 0 (update_num_pars_TCC1-1 nil 3821446710 ("" (subtype-tcc) (("" (postpone) nil nil)) nil) nil nil (update_num_pars subtype "coordinator_th.pr" "(coord_t_and_c_th.num_par)")))("ICEcoordinator" coordinator_th update_num_pars_TCC2 0 (update_num_pars_TCC2-1 nil 3821446710 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nlimit const-decl "nat" coord_t_and_c_th nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (maxrate formal-const-decl "posnat" coordinator_th nil) (maxinfuse formal-const-decl "posnat" coordinator_th nil) (maxtime formal-const-decl "{maxtime: posnat | maxinfuse <= maxtime}" coordinator_th nil) (device type-eq-decl nil devices_th nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (par type-decl nil coord_t_and_c_th nil) (num_par const-decl "boolean" coord_t_and_c_th nil) (mindex const-decl "nat" coord_t_and_c_th nil) (null_value const-decl "posnat" coord_t_and_c_th nil)) nil (update_num_pars subtype "restrict[coord_t_and_c_th.par, (coord_t_and_c_th.num_par), real].restrict(LAMBDA (pr: coord_t_and_c_th.par): IF coordinator_th.pa2(pr) /= coord_t_and_c_th.null_value THEN coordinator_th.pan`num_disp(pr) ELSE coord_t_and_c_th.null_value ENDIF)" "num_parameter")))("ICE_templates" ICE_templates_th lemma_reflect_device_consistent_c_d 0 (lemma_reflect_device_consistent_c_d-1 nil 3860131707 ("" (skosimp*) (("" (beta) (("" (flatten) (("" (split -8) (("1" (lemma "lemma1span" ("p" "p!1" "d" "d!1" "st" "st!1")) (("1" (beta -1) (("1" (split -1) (("1" (flatten -1) (("1" (lemma "panlemma1np" ("p" "p!1" "d" "d!1" "st" "st!1")) (("1" (beta -1) (("1" (split -1) (("1" (flatten -1) (("1" (lemma "lemma3ippan" ("p" "p!1" "d" "d!1" "st" "st!1")) (("1" (beta -1) (("1" (split -1) (("1" (flatten -1) (("1" (lemma "lemma_reflect_device_c_ds" ("p" "p!1" "d" "d!1" "st" "st!1")) (("1" (beta -1) (("1" (split -1) (("1" (flatten -1) (("1" (expand "consistent_coordinator_d" 11) (("1" (replace -1 11) (("1" (replace -2 11) (("1" (replace -3 11) (("1" (expand "reflect_device_to_coordinator" 11) (("1" (expand "tick_pan_coordinator" 11) (("1" (replace -4 11) (("1" (beta 11) (("1" (assert) (("1" (replace -27 11) (("1" (replace -26 11) (("1" (replace -55 11) (("1" (flatten -49) (("1" (replace -29 12) (("1" (replace -28 12) (("1" (replace -49 -57) (("1" (replace -57 12) (("1" (beta 12) (("1" (replace -13 12) (("1" (replace -12 12) (("1" (replace -49 12) (("1" (expand "update_p_panel" 12) (("1" (replace -25 12) (("1" (replace -24 12) (("1" (replace -50 12) (("1" (assert 12) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil) ("3" (propax) nil nil) ("4" (flatten -46) (("4" (replace -46 -51) (("4" (assert) nil nil)) nil)) nil) ("5" (flatten -46) (("5" (replace -46 -51) (("5" (propax) nil nil)) nil)) nil) ("6" (flatten -46) (("6" (replace -46 3) (("6" (assert) nil nil)) nil)) nil) ("7" (assert) nil nil) ("8" (flatten -46) (("8" (replace -46 5) (("8" (assert) nil nil)) nil)) nil) ("9" (assert) nil nil) ("10" (propax) nil nil) ("11" (assert) nil nil) ("12" (propax) nil nil) ("13" (flatten -46) (("13" (replace -46 -54) (("13" (propax) nil nil)) nil)) nil) ("14" (flatten -46) nil nil) ("15" (flatten -46) nil nil) ("16" (propax) nil nil) ("17" (assert) nil nil) ("18" (propax) nil nil) ("19" (assert) nil nil) ("20" (propax) nil nil) ("21" (assert) nil nil) ("22" (propax) nil nil) ("23" (assert) nil nil) ("24" (propax) nil nil) ("25" (propax) nil nil) ("26" (assert) nil nil) ("27" (propax) nil nil) ("28" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil) ("3" (propax) nil nil) ("4" (flatten -41) (("4" (replace -41 -45) (("4" (propax) nil nil)) nil)) nil) ("5" (flatten -41) (("5" (replace -41 -46) (("5" (propax) nil nil)) nil)) nil) ("6" (flatten -41) (("6" (replace -41 3) (("6" (assert) nil nil)) nil)) nil) ("7" (flatten -41) (("7" (replace -41 5) (("7" (assert) nil nil)) nil)) nil) ("8" (flatten -41) (("8" (replace -41 5) (("8" (assert) nil nil)) nil)) nil) ("9" (assert) nil nil) ("10" (propax) nil nil) ("11" (assert) nil nil) ("12" (propax) nil nil) ("13" (flatten -41) (("13" (replace -41 -49) (("13" (propax) nil nil)) nil)) nil) ("14" (flatten -41) nil nil) ("15" (flatten -41) nil nil) ("16" (flatten -41) (("16" (assert) nil nil)) nil) ("17" (propax) nil nil) ("18" (propax) nil nil) ("19" (propax) nil nil) ("20" (assert) nil nil) ("21" (propax) nil nil) ("22" (propax) nil nil) ("23" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil) ("3" (propax) nil nil) ("4" (propax) nil nil) ("5" (propax) nil nil) ("6" (flatten -26) (("6" (replace -26 1) (("6" (replace -26 3) (("6" (assert) nil nil)) nil)) nil)) nil) ("7" (flatten -26) (("7" (replace -26 5) (("7" (assert) nil nil)) nil)) nil) ("8" (flatten -26) (("8" (replace -26 1) (("8" (replace -26 5) (("8" (assert) nil nil)) nil)) nil)) nil) ("9" (assert) nil nil) ("10" (propax) nil nil) ("11" (assert) nil nil) ("12" (propax) nil nil) ("13" (propax) nil nil) ("14" (flatten -26) (("14" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil) ("3" (propax) nil nil) ("4" (propax) nil nil) ("5" (propax) nil nil) ("6" (flatten -1) (("6" (replace -1 1) (("6" (replace -1 3) (("6" (assert) nil nil)) nil)) nil)) nil) ("7" (flatten -1) (("7" (replace -1 5) (("7" (assert) nil nil)) nil)) nil) ("8" (flatten -1) (("8" (replace -1 5) (("8" (assert) nil nil)) nil)) nil) ("9" (assert) nil nil) ("10" (propax) nil nil) ("11" (assert) nil nil) ("12" (propax) nil nil) ("13" (propax) nil nil) ("14" (flatten -1) (("14" (assert) nil nil)) nil) ("15" (flatten -1) (("15" (assert) nil nil)) nil) ("16" (flatten -1) (("16" (replace -1 1) (("16" (assert) nil nil)) nil)) nil) ("17" (flatten -1) (("17" (replace -1 1) (("17" (propax) nil nil)) nil)) nil) ("18" (propax) nil nil)) nil)) nil)) nil) ("2" (lemma "lemma1span" ("p" "p!1" "d" "d!1" "st" "st!1")) (("2" (beta -1) (("2" (split -1) (("1" (flatten -1) (("1" (lemma "panlemma1np" ("p" "p!1" "d" "d!1" "st" "st!1")) (("1" (beta -1) (("1" (split -1) (("1" (flatten -1) (("1" (lemma "lemma3ippan" ("p" "p!1" "d" "d!1" "st" "st!1")) (("1" (beta -1) (("1" (split -1) (("1" (flatten -1) (("1" (lemma "lemma_reflect_device_c_ds" ("p" "p!1" "d" "d!1" "st" "st!1")) (("1" (beta -1) (("1" (split -1) (("1" (flatten -1) (("1" (expand "consistent_coordinator_d" 11) (("1" (replace -1 11) (("1" (replace -2 11) (("1" (replace -3 11) (("1" (expand "reflect_device_to_coordinator" 11) (("1" (expand "tick_pan_coordinator" 11) (("1" (replace -4 11) (("1" (beta 11) (("1" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil) ("4" (postpone) nil nil) ("5" (postpone) nil nil) ("6" (postpone) nil nil) ("7" (postpone) nil nil) ("8" (postpone) nil nil) ("9" (postpone) nil nil) ("10" (postpone) nil nil) ("11" (postpone) nil nil) ("12" (postpone) nil nil) ("13" (postpone) nil nil) ("14" (postpone) nil nil) ("15" (postpone) nil nil) ("16" (postpone) nil nil) ("17" (postpone) nil nil) ("18" (postpone) nil nil) ("19" (postpone) nil nil) ("20" (postpone) nil nil) ("21" (postpone) nil nil) ("22" (postpone) nil nil) ("23" (postpone) nil nil) ("24" (postpone) nil nil) ("25" (postpone) nil nil) ("26" (postpone) nil nil) ("27" (postpone) nil nil) ("28" (postpone) nil nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil) ("4" (postpone) nil nil) ("5" (postpone) nil nil) ("6" (postpone) nil nil) ("7" (postpone) nil nil) ("8" (postpone) nil nil) ("9" (postpone) nil nil) ("10" (postpone) nil nil) ("11" (postpone) nil nil) ("12" (postpone) nil nil) ("13" (postpone) nil nil) ("14" (postpone) nil nil) ("15" (postpone) nil nil) ("16" (postpone) nil nil) ("17" (postpone) nil nil) ("18" (postpone) nil nil) ("19" (postpone) nil nil) ("20" (postpone) nil nil) ("21" (postpone) nil nil) ("22" (postpone) nil nil) ("23" (postpone) nil nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil) ("4" (postpone) nil nil) ("5" (postpone) nil nil) ("6" (postpone) nil nil) ("7" (postpone) nil nil) ("8" (postpone) nil nil) ("9" (postpone) nil nil) ("10" (postpone) nil nil) ("11" (postpone) nil nil) ("12" (postpone) nil nil) ("13" (postpone) nil nil) ("14" (postpone) nil nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil) ("4" (postpone) nil nil) ("5" (postpone) nil nil) ("6" (postpone) nil nil) ("7" (postpone) nil nil) ("8" (postpone) nil nil) ("9" (postpone) nil nil) ("10" (postpone) nil nil) ("11" (postpone) nil nil) ("12" (postpone) nil nil) ("13" (postpone) nil nil) ("14" (postpone) nil nil) ("15" (postpone) nil nil) ("16" (postpone) nil nil) ("17" (postpone) nil nil) ("18" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((maxtime formal-const-decl "{maxtime: posnat | maxinfuse <= maxtime}" ICE_templates_th nil) (<= const-decl "bool" reals nil) (maxinfuse formal-const-decl "posnat" ICE_templates_th nil) (maxrate formal-const-decl "posnat" ICE_templates_th nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (state type-eq-decl nil system_th nil) (node_to_patient type-eq-decl nil system_th nil) (patients_type type-eq-decl nil patient_th nil) (patient_db_type type-eq-decl nil system_th nil) (patient_mn_type type-eq-decl nil system_th nil) (n_state type-eq-decl nil node_th nil) (node_to_pd type-eq-decl nil system_th nil) (i_state type-eq-decl nil coordinator_th nil) (coord_menu.menu_type type-eq-decl nil system_th nil) (device type-eq-decl nil devices_th nil) (patient type-eq-decl nil patient_th nil) (nlimit const-decl "nat" coord_t_and_c_th nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (lemma1span formula-decl nil ICE_templates_rsce_th nil) (lemma3ippan formula-decl nil ICE_templates_rsce_th nil) (lemma_reflect_device_c_ds formula-decl nil ICE_templates_rsce_th nil) (reflect_device_to_coordinator const-decl "state" ICE_templates_rsce_th nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (update_p_panel const-decl "i_state" coordinator_th nil) (tick_pan_coordinator const-decl "state" system_th nil)) shostak))("ICE_templates_resource" ICE_templates_rsce_th lemma1span 0 (lemma1span-1 nil 3860213874 ("" (postpone) nil nil) nil shostak))("ICE_templates_resource" ICE_templates_rsce_th lemma2vspannpd 0 (lemma2vspannpd-1 nil 3858398072 ("" (skosimp*) (("" (beta) (("" (flatten) (("" (split) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil)) nil)) nil)) nil)) nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil_device const-decl "device" devices_th nil) (dlimit const-decl "nat" coord_t_and_c_th nil) (p_null const-decl "patient" patient_th nil) (plimit const-decl "nat" coord_t_and_c_th nil) (coord_node const-decl "node" node_th nil) (next_pan_pm const-decl "n_state" node_th nil) (sub_pan_buff const-decl "pan_q_type" node_th nil) (empty_pan_msg const-decl "pan_message_type" node_th nil) (empty_panel const-decl "panel" coord_t_and_c_th nil) (no_node const-decl "node" node_th nil) (nlimit const-decl "nat" coord_t_and_c_th nil) (tick_pan_device const-decl "state" system_th nil) (available_act const-decl "panel" vital_signs_th nil) (tick_vs const-decl "v_state" vital_signs_th nil) (upd_pan const-decl "panel" vital_signs_th nil) (per_tick_vs const-decl "boolean" vital_signs_th nil) (pan_send const-decl "n_state" node_th nil) (add_pan_buff const-decl "pan_q_type" node_th nil) (available_act const-decl "panel" infusion_pumps_th nil) (per_pause const-decl "boolean" infusion_pumps_th nil) (per_infuse const-decl "boolean" infusion_pumps_th nil) (per_chooserate const-decl "boolean" infusion_pumps_th nil) (per_choosevtbi const-decl "boolean" infusion_pumps_th nil) (per_choosetime const-decl "boolean" infusion_pumps_th nil) (per_confirm const-decl "boolean" infusion_pumps_th nil) (per_bolus const-decl "boolean" infusion_pumps_th nil) (per_decr const-decl "boolean" infusion_pumps_th nil) (per_incr const-decl "boolean" infusion_pumps_th nil) (tick const-decl "d_state" infusion_pumps_th nil) (update_panel const-decl "d_state" infusion_pumps_th nil) (upd_pan const-decl "panel" infusion_pumps_th nil) (enum_par const-decl "boolean" coord_t_and_c_th nil) (no_num const-decl "nonneg_real" coord_t_and_c_th nil) (null_value const-decl "posnat" coord_t_and_c_th nil) (mindex const-decl "nat" coord_t_and_c_th nil) (num_par const-decl "boolean" coord_t_and_c_th nil) (bolus_rate const-decl "irates" infusion_pumps_th nil) (timeout const-decl "itimes" infusion_pumps_th nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (maxrate formal-const-decl "posnat" ICE_templates_rsce_th nil) (maxinfuse formal-const-decl "posnat" ICE_templates_rsce_th nil) (<= const-decl "bool" reals nil) (maxtime formal-const-decl "{maxtime: posnat | maxinfuse <= maxtime}" ICE_templates_rsce_th nil) (/= const-decl "boolean" notequal nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) shostak))("ICE_templates_resource" ICE_templates_rsce_th lemma3ippan 0 (lemma3ippan-1 nil 3858398449 ("" (skosimp*) (("" (beta) (("" (flatten) (("" (split) (("1" (assert) (("1" (split) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil)) nil)) nil) ("2" (assert) (("2" (split) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((finite_emptyset name-judgement "finite_set" finite_sets nil) (nil_device const-decl "device" devices_th nil) (dlimit const-decl "nat" coord_t_and_c_th nil) (p_null const-decl "patient" patient_th nil) (plimit const-decl "nat" coord_t_and_c_th nil) (next_cm const-decl "n_state" node_th nil) (tick_pan_patient const-decl "state" system_th nil) (update_t_panel const-decl "patient_db_type" system_th nil) (filter_panel const-decl "panel" coord_t_and_c_th nil) (emptyset const-decl "set" sets nil) (empty_num_parameter const-decl "num_parameter" coord_t_and_c_th nil) (empty_enum_parameter const-decl "enum_parameter" coord_t_and_c_th nil) (coord_node const-decl "node" node_th nil) (next_pan_pm const-decl "n_state" node_th nil) (sub_pan_buff const-decl "pan_q_type" node_th nil) (empty_pan_msg const-decl "pan_message_type" node_th nil) (empty_panel const-decl "panel" coord_t_and_c_th nil) (no_node const-decl "node" node_th nil) (nlimit const-decl "nat" coord_t_and_c_th nil) (tick_pan_device const-decl "state" system_th nil) (pan_send const-decl "n_state" node_th nil) (add_pan_buff const-decl "pan_q_type" node_th nil) (available_act const-decl "panel" infusion_pumps_th nil) (per_pause const-decl "boolean" infusion_pumps_th nil) (per_infuse const-decl "boolean" infusion_pumps_th nil) (per_chooserate const-decl "boolean" infusion_pumps_th nil) (per_choosevtbi const-decl "boolean" infusion_pumps_th nil) (per_choosetime const-decl "boolean" infusion_pumps_th nil) (per_confirm const-decl "boolean" infusion_pumps_th nil) (per_bolus const-decl "boolean" infusion_pumps_th nil) (per_decr const-decl "boolean" infusion_pumps_th nil) (per_incr const-decl "boolean" infusion_pumps_th nil) (tick const-decl "d_state" infusion_pumps_th nil) (update_panel const-decl "d_state" infusion_pumps_th nil) (upd_pan const-decl "panel" infusion_pumps_th nil) (enum_par const-decl "boolean" coord_t_and_c_th nil) (no_num const-decl "nonneg_real" coord_t_and_c_th nil) (null_value const-decl "posnat" coord_t_and_c_th nil) (mindex const-decl "nat" coord_t_and_c_th nil) (num_par const-decl "boolean" coord_t_and_c_th nil) (bolus_rate const-decl "irates" infusion_pumps_th nil) (timeout const-decl "itimes" infusion_pumps_th nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (maxrate formal-const-decl "posnat" ICE_templates_rsce_th nil) (maxinfuse formal-const-decl "posnat" ICE_templates_rsce_th nil) (<= const-decl "bool" reals nil) (maxtime formal-const-decl "{maxtime: posnat | maxinfuse <= maxtime}" ICE_templates_rsce_th nil) (/= const-decl "boolean" notequal nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (available_act const-decl "panel" vital_signs_th nil) (tick_vs const-decl "v_state" vital_signs_th nil) (upd_pan const-decl "panel" vital_signs_th nil) (per_tick_vs const-decl "boolean" vital_signs_th nil)) shostak))("ICE_templates_resource" ICE_templates_rsce_th lemma3vspan 0 (lemma3vspan-1 nil 3858400521 ("" (skosimp) (("" (beta) (("" (flatten) (("" (split) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil)) nil)) nil)) nil)) nil) ((finite_emptyset name-judgement "finite_set" finite_sets nil) (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil_device const-decl "device" devices_th nil) (dlimit const-decl "nat" coord_t_and_c_th nil) (p_null const-decl "patient" patient_th nil) (plimit const-decl "nat" coord_t_and_c_th nil) (next_cm const-decl "n_state" node_th nil) (tick_pan_patient const-decl "state" system_th nil) (update_t_panel const-decl "patient_db_type" system_th nil) (filter_panel const-decl "panel" coord_t_and_c_th nil) (emptyset const-decl "set" sets nil) (empty_num_parameter const-decl "num_parameter" coord_t_and_c_th nil) (empty_enum_parameter const-decl "enum_parameter" coord_t_and_c_th nil) (coord_node const-decl "node" node_th nil) (next_pan_pm const-decl "n_state" node_th nil) (sub_pan_buff const-decl "pan_q_type" node_th nil) (empty_pan_msg const-decl "pan_message_type" node_th nil) (empty_panel const-decl "panel" coord_t_and_c_th nil) (no_node const-decl "node" node_th nil) (nlimit const-decl "nat" coord_t_and_c_th nil) (tick_pan_device const-decl "state" system_th nil) (available_act const-decl "panel" vital_signs_th nil) (tick_vs const-decl "v_state" vital_signs_th nil) (upd_pan const-decl "panel" vital_signs_th nil) (per_tick_vs const-decl "boolean" vital_signs_th nil) (pan_send const-decl "n_state" node_th nil) (add_pan_buff const-decl "pan_q_type" node_th nil) (available_act const-decl "panel" infusion_pumps_th nil) (per_pause const-decl "boolean" infusion_pumps_th nil) (per_infuse const-decl "boolean" infusion_pumps_th nil) (per_chooserate const-decl "boolean" infusion_pumps_th nil) (per_choosevtbi const-decl "boolean" infusion_pumps_th nil) (per_choosetime const-decl "boolean" infusion_pumps_th nil) (per_confirm const-decl "boolean" infusion_pumps_th nil) (per_bolus const-decl "boolean" infusion_pumps_th nil) (per_decr const-decl "boolean" infusion_pumps_th nil) (per_incr const-decl "boolean" infusion_pumps_th nil) (tick const-decl "d_state" infusion_pumps_th nil) (update_panel const-decl "d_state" infusion_pumps_th nil) (upd_pan const-decl "panel" infusion_pumps_th nil) (enum_par const-decl "boolean" coord_t_and_c_th nil) (no_num const-decl "nonneg_real" coord_t_and_c_th nil) (null_value const-decl "posnat" coord_t_and_c_th nil) (mindex const-decl "nat" coord_t_and_c_th nil) (num_par const-decl "boolean" coord_t_and_c_th nil) (bolus_rate const-decl "irates" infusion_pumps_th nil) (timeout const-decl "itimes" infusion_pumps_th nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (maxrate formal-const-decl "posnat" ICE_templates_rsce_th nil) (maxinfuse formal-const-decl "posnat" ICE_templates_rsce_th nil) (<= const-decl "bool" reals nil) (maxtime formal-const-decl "{maxtime: posnat | maxinfuse <= maxtime}" ICE_templates_rsce_th nil) (/= const-decl "boolean" notequal nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) shostak))("ICE_templates_resource" ICE_templates_rsce_th lemma_reflect_device_c 0 (lemma_reflect_device_c-1 nil 3860147119 ("" (skosimp*) (("" (beta) (("" (flatten) (("" (split -8) (("1" (lemma "panlemma1np" ("p" "p!1" "d" "d!1" "st" "st!1")) (("1" (beta -1) (("1" (split -1) (("1" (flatten -1) (("1" (lemma "panlemma1npx" ("p" "p!1" "d" "d!1" "st" "st!1")) (("1" (beta -1) (("1" (split -1) (("1" (flatten -1) (("1" (lemma "panlemma1ip" ("p" "p!1" "d" "d!1" "st" "st!1")) (("1" (beta -1) (("1" (split -1) (("1" (flatten -1) (("1" (lemma "panlemma1ipx" ("p" "p!1" "d" "d!1" "st" "st!1")) (("1" (beta -1) (("1" (split -1) (("1" (flatten -1) (("1" (lemma "panlemma1ipy" ("p" "p!1" "d" "d!1" "st" "st!1")) (("1" (beta -1) (("1" (split -1) (("1" (flatten -1) (("1" (lemma "lemma2ippan" ("p" "p!1" "d" "d!1" "st" "st!1")) (("1" (beta -1) (("1" (split -1) (("1" (flatten -1) (("1" (split 13) (("1" (expand "reflect_device_to_coordinator" 1) (("1" (replace -64 1) (("1" (replace -63 1) (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (expand "reflect_device_to_coordinator" 1) (("2" (replace -61 1) (("2" (replace -60 1) (("2" (propax) nil nil)) nil)) nil)) nil) ("3" (expand "reflect_device_to_coordinator" 1) (("3" (replace -58 1) (("3" (replace -57 1) (("3" (propax) nil nil)) nil)) nil)) nil) ("4" (expand "reflect_device_to_coordinator" 1) (("4" (replace -52 1) (("4" (replace -51 1) (("4" (propax) nil nil)) nil)) nil)) nil) ("5" (expand "reflect_device_to_coordinator" 1) (("5" (replace -38 1) (("5" (replace -37 1) (("5" (propax) nil nil)) nil)) nil)) nil) ("6" (expand "reflect_device_to_coordinator" 1) (("6" (replace -41 1) (("6" (replace -40 1) (("6" (propax) nil nil)) nil)) nil)) nil) ("7" (expand "reflect_device_to_coordinator" 1) (("7" (replace -44 1) (("7" (replace -43 1) (("7" (propax) nil nil)) nil)) nil)) nil) ("8" (expand "reflect_device_to_coordinator" 1) (("8" (replace -47 1) (("8" (replace -46 1) (("8" (propax) nil nil)) nil)) nil)) nil) ("9" (expand "reflect_device_to_coordinator" 1) (("9" (replace -20 1) (("9" (replace -19 1) (("9" (propax) nil nil)) nil)) nil)) nil) ("10" (flatten -65) (("10" (replace -66 1) (("10" (expand "reflect_device_to_coordinator" 1) (("10" (replace -66 -23) (("10" (replace -66 -22) (("10" (replace -23 1) (("10" (replace -22 1) (("10" (replace -66 -21) (("10" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("11" (flatten -65) (("11" (replace -66 1) (("11" (assert) nil nil)) nil)) nil) ("12" (expand "reflect_device_to_coordinator" 1) (("12" (replace -55 1) (("12" (replace -54 1) (("12" (propax) nil nil)) nil)) nil)) nil) ("13" (flatten -65) (("13" (replace -66 1) (("13" (expand "reflect_device_to_coordinator" 1) (("13" (replace -66 -32) (("13" (replace -32 1) (("13" (replace -66 -31) (("13" (replace -31 1) (("13" (replace -66 -30) (("13" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("14" (flatten -65) (("14" (replace -66 1) (("14" (assert) nil nil)) nil)) nil) ("15" (expand "reflect_device_to_coordinator" 1) (("15" (replace -17 1) (("15" (replace -16 1) (("15" (propax) nil nil)) nil)) nil)) nil) ("16" (expand "reflect_device_to_coordinator" 1) (("16" (replace -29 1) (("16" (replace -28 1) (("16" (propax) nil nil)) nil)) nil)) nil) ("17" (expand "reflect_device_to_coordinator" 1) (("17" (expand "tick_pan_coordinator" 1) (("17" (flatten -65) (("17" (replace -66 -12) (("17" (replace -12 1) (("17" (beta 1) (("17" (assert 1) (("17" (replace -60 1) (("17" (replace -59 1) (("17" (replace -72 1) (("17" (replace -57 1) (("17" (replace -56 1) (("17" (replace -66 -73) (("17" (replace -73 1) (("17" (beta 1) (("17" (replace -49 1) (("17" (replace -48 1) (("17" (expand "update_p_panel" 1) (("17" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("18" (expand "reflect_device_to_coordinator" 1) (("18" (expand "tick_pan_coordinator" 1) (("18" (flatten -65) (("18" (replace -66 -12) (("18" (replace -12 1) (("18" (beta 1) (("18" (assert 1) (("18" (replace -60 1) (("18" (replace -59 1) (("18" (replace -72 1) (("18" (replace -57 1) (("18" (replace -56 1) (("18" (replace -66 -73) (("18" (replace -73 1) (("18" (beta 1) (("18" (expand "update_p_panel" 1) (("18" (replace -49 1) (("18" (replace -48 1) (("18" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("19" (expand "reflect_device_to_coordinator" 1) (("19" (expand "tick_pan_coordinator" 1) (("19" (lift-if 1) (("19" (flatten -65) (("19" (replace -66 -12) (("19" (replace -12 1) (("19" (beta 1) (("19" (assert 1) (("19" (replace -60 1) (("19" (replace -59 1) (("19" (replace -57 1) (("19" (replace -56 1) (("19" (replace -66 -73) (("19" (replace -72 1) (("19" (replace -73 1) (("19" (beta 1) (("19" (replace -49 1) (("19" (replace -48 1) (("19" (expand "update_p_panel" 1) (("19" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil) ("3" (propax) nil nil) ("4" (propax) nil nil) ("5" (propax) nil nil) ("6" (flatten -51) (("6" (assert) nil nil)) nil) ("7" (assert) nil nil) ("8" (flatten -51) (("8" (assert) nil nil)) nil) ("9" (assert) nil nil) ("10" (propax) nil nil) ("11" (assert) nil nil) ("12" (propax) nil nil) ("13" (propax) nil nil) ("14" (flatten -51) (("14" (assert) nil nil)) nil) ("15" (propax) nil nil) ("16" (assert) nil nil) ("17" (propax) nil nil) ("18" (assert) nil nil) ("19" (propax) nil nil) ("20" (propax) nil nil) ("21" (assert) nil nil) ("22" (propax) nil nil) ("23" (assert) nil nil) ("24" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil) ("3" (propax) nil nil) ("4" (propax) nil nil) ("5" (propax) nil nil) ("6" (flatten -48) (("6" (assert) nil nil)) nil) ("7" (assert) nil nil) ("8" (flatten -48) (("8" (assert) nil nil)) nil) ("9" (assert) nil nil) ("10" (assert) nil nil) ("11" (assert) nil nil) ("12" (propax) nil nil) ("13" (assert) nil nil) ("14" (propax) nil nil) ("15" (propax) nil nil) ("16" (flatten -48) (("16" (assert) nil nil)) nil) ("17" (propax) nil nil) ("18" (assert) nil nil) ("19" (propax) nil nil) ("20" (assert) nil nil) ("21" (propax) nil nil) ("22" (assert) nil nil) ("23" (propax) nil nil) ("24" (propax) nil nil) ("25" (propax) nil nil) ("26" (assert) nil nil) ("27" (propax) nil nil) ("28" (assert) nil nil) ("29" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil) ("3" (propax) nil nil) ("4" (propax) nil nil) ("5" (propax) nil nil) ("6" (flatten -36) (("6" (assert) nil nil)) nil) ("7" (assert) nil nil) ("8" (flatten -36) (("8" (assert) nil nil)) nil) ("9" (assert) nil nil) ("10" (propax) nil nil) ("11" (assert) nil nil) ("12" (propax) nil nil) ("13" (propax) nil nil) ("14" (flatten -36) (("14" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil) ("3" (propax) nil nil) ("4" (propax) nil nil) ("5" (propax) nil nil) ("6" (flatten -18) (("6" (assert) nil nil)) nil) ("7" (assert) nil nil) ("8" (flatten -18) (("8" (assert) nil nil)) nil) ("9" (assert) nil nil) ("10" (propax) nil nil) ("11" (assert) nil nil) ("12" (propax) nil nil) ("13" (propax) nil nil) ("14" (flatten -18) (("14" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil) ("3" (propax) nil nil) ("4" (propax) nil nil) ("5" (propax) nil nil) ("6" (flatten -16) (("6" (assert) nil nil)) nil) ("7" (assert) nil nil) ("8" (flatten -16) (("8" (assert) nil nil)) nil) ("9" (assert) nil nil) ("10" (propax) nil nil) ("11" (assert) nil nil) ("12" (propax) nil nil) ("13" (propax) nil nil) ("14" (flatten -16) (("14" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil) ("3" (propax) nil nil) ("4" (propax) nil nil) ("5" (propax) nil nil) ("6" (flatten -1) (("6" (assert) nil nil)) nil) ("7" (assert) nil nil) ("8" (flatten -1) (("8" (assert) nil nil)) nil) ("9" (assert) nil nil) ("10" (propax) nil nil) ("11" (assert) nil nil) ("12" (propax) nil nil) ("13" (propax) nil nil) ("14" (flatten -1) (("14" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (lemma "panlemma1np" ("p" "p!1" "d" "d!1" "st" "st!1")) (("2" (beta -1) (("2" (split -1) (("1" (flatten -1) (("1" (lemma "panlemma1npx" ("p" "p!1" "d" "d!1" "st" "st!1")) (("1" (beta -1) (("1" (split -1) (("1" (flatten -1) (("1" (lemma "panlemma1ip" ("p" "p!1" "d" "d!1" "st" "st!1")) (("1" (beta -1) (("1" (split -1) (("1" (flatten -1) (("1" (lemma "panlemma1ipx" ("p" "p!1" "d" "d!1" "st" "st!1")) (("1" (beta -1) (("1" (split -1) (("1" (flatten -1) (("1" (lemma "panlemma1ipy" ("p" "p!1" "d" "d!1" "st" "st!1")) (("1" (beta -1) (("1" (split -1) (("1" (flatten -1) (("1" (lemma "lemma2ippan" ("p" "p!1" "d" "d!1" "st" "st!1")) (("1" (beta -1) (("1" (split -1) (("1" (flatten -1) (("1" (split 13) (("1" (expand "reflect_device_to_coordinator" 1) (("1" (replace -64 1) (("1" (replace -63 1) (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (expand "reflect_device_to_coordinator" 1) (("2" (replace -61 1) (("2" (replace -60 1) (("2" (propax) nil nil)) nil)) nil)) nil) ("3" (expand "reflect_device_to_coordinator" 1) (("3" (replace -58 1) (("3" (replace -57 1) (("3" (propax) nil nil)) nil)) nil)) nil) ("4" (expand "reflect_device_to_coordinator" 1) (("4" (replace -52 1) (("4" (replace -51 1) (("4" (propax) nil nil)) nil)) nil)) nil) ("5" (expand "reflect_device_to_coordinator" 1) (("5" (replace -38 1) (("5" (replace -37 1) (("5" (propax) nil nil)) nil)) nil)) nil) ("6" (expand "reflect_device_to_coordinator" 1) (("6" (replace -41 1) (("6" (replace -40 1) (("6" (propax) nil nil)) nil)) nil)) nil) ("7" (expand "reflect_device_to_coordinator" 1) (("7" (replace -44 1) (("7" (replace -43 1) (("7" (propax) nil nil)) nil)) nil)) nil) ("8" (expand "reflect_device_to_coordinator" 1) (("8" (replace -47 1) (("8" (replace -46 1) (("8" (propax) nil nil)) nil)) nil)) nil) ("9" (expand "reflect_device_to_coordinator" 1) (("9" (replace -20 1) (("9" (replace -19 1) (("9" (propax) nil nil)) nil)) nil)) nil) ("10" (flatten -65) (("10" (assert) nil nil)) nil) ("11" (expand "reflect_device_to_coordinator" 1) (("11" (flatten -65) (("11" (assert) nil nil)) nil)) nil) ("12" (expand "reflect_device_to_coordinator" 1) (("12" (assert) nil nil)) nil) ("13" (flatten -65) (("13" (assert) nil nil)) nil) ("14" (expand "reflect_device_to_coordinator" 1) (("14" (flatten -65) (("14" (assert) nil nil)) nil)) nil) ("15" (expand "reflect_device_to_coordinator" 1) (("15" (expand "tick_pan_coordinator" 1) (("15" (flatten -65) (("15" (replace -66 -12) (("15" (assert -12) (("15" (replace -12 1) (("15" (beta 1) (("15" (assert 1) (("15" (replace -60 1) (("15" (replace -59 1) (("15" (replace -57 1) (("15" (replace -56 1) (("15" (replace -73 1) (("15" (replace -66 -74) (("15" (assert -74) (("15" (replace -74 1) (("15" (beta 1) (("15" (replace -49 1) (("15" (replace -48 1) (("15" (expand "update_p_panel" 1) (("15" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("16" (expand "reflect_device_to_coordinator" 1) (("16" (expand "tick_pan_coordinator" 1) (("16" (flatten -65) (("16" (lift-if 1) (("16" (replace -66 -12) (("16" (assert -12) (("16" (replace -12 1) (("16" (beta 1) (("16" (assert 1) (("16" (replace -60 1) (("16" (replace -59 1) (("16" (replace -57 1) (("16" (replace -56 1) (("16" (replace -73 1) (("16" (replace -66 -74) (("16" (assert -74) (("16" (replace -74 1) (("16" (beta 1) (("16" (replace -49 1) (("16" (replace -48 1) (("16" (expand "update_p_panel" 1) (("16" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("17" (expand "reflect_device_to_coordinator" 1) (("17" (expand "tick_pan_coordinator" 1) (("17" (flatten -65) (("17" (lift-if 1) (("17" (replace -66 -12) (("17" (assert -12) (("17" (replace -12 1) (("17" (beta 1) (("17" (assert 1) (("17" (replace -60 1) (("17" (replace -59 1) (("17" (replace -57 1) (("17" (replace -56 1) (("17" (replace -73 1) (("17" (replace -66 -74) (("17" (assert -74) (("17" (replace -74 1) (("17" (beta 1) (("17" (replace -49 1) (("17" (replace -48 1) (("17" (expand "update_p_panel" 1) (("17" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("18" (expand "reflect_device_to_coordinator" 1) (("18" (expand "tick_pan_coordinator" 1) (("18" (flatten -65) (("18" (lift-if 1) (("18" (replace -66 -12) (("18" (assert -12) (("18" (replace -12 1) (("18" (beta 1) (("18" (assert 1) (("18" (replace -60 1) (("18" (replace -59 1) (("18" (replace -57 1) (("18" (replace -56 1) (("18" (replace -49 1) (("18" (replace -48 1) (("18" (expand "update_p_panel" 1) (("18" (replace -73 1) (("18" (replace -66 -74) (("18" (assert -74) (("18" (replace -74 1) (("18" (beta 1) (("18" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("19" (expand "reflect_device_to_coordinator" 1) (("19" (expand "tick_pan_coordinator" 1) (("19" (flatten -65) (("19" (replace -66 -12) (("19" (lift-if 1) (("19" (assert -12) (("19" (replace -12 1) (("19" (beta 1) (("19" (assert 1) (("19" (replace -60 1) (("19" (replace -59 1) (("19" (replace -57 1) (("19" (replace -56 1) (("19" (replace -73 1) (("19" (replace -66 -74) (("19" (assert -74) (("19" (replace -74 1) (("19" (beta 1) (("19" (replace -49 1) (("19" (replace -48 1) (("19" (expand "update_p_panel" 1) (("19" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil) ("3" (propax) nil nil) ("4" (propax) nil nil) ("5" (propax) nil nil) ("6" (flatten -51) (("6" (assert) nil nil)) nil) ("7" (assert) nil nil) ("8" (flatten -51) (("8" (assert) nil nil)) nil) ("9" (assert) nil nil) ("10" (propax) nil nil) ("11" (assert) nil nil) ("12" (propax) nil nil) ("13" (propax) nil nil) ("14" (flatten -51) (("14" (assert) nil nil)) nil) ("15" (propax) nil nil) ("16" (assert) nil nil) ("17" (propax) nil nil) ("18" (assert) nil nil) ("19" (propax) nil nil) ("20" (propax) nil nil) ("21" (assert) nil nil) ("22" (propax) nil nil) ("23" (assert) nil nil) ("24" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil) ("3" (propax) nil nil) ("4" (propax) nil nil) ("5" (propax) nil nil) ("6" (flatten -48) (("6" (assert) nil nil)) nil) ("7" (assert) nil nil) ("8" (flatten -48) (("8" (assert) nil nil)) nil) ("9" (assert) nil nil) ("10" (assert) nil nil) ("11" (assert) nil nil) ("12" (propax) nil nil) ("13" (assert) nil nil) ("14" (propax) nil nil) ("15" (propax) nil nil) ("16" (flatten -48) (("16" (assert) nil nil)) nil) ("17" (propax) nil nil) ("18" (assert) nil nil) ("19" (propax) nil nil) ("20" (assert) nil nil) ("21" (propax) nil nil) ("22" (assert) nil nil) ("23" (propax) nil nil) ("24" (propax) nil nil) ("25" (propax) nil nil) ("26" (assert) nil nil) ("27" (propax) nil nil) ("28" (assert) nil nil) ("29" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil) ("3" (propax) nil nil) ("4" (propax) nil nil) ("5" (propax) nil nil) ("6" (flatten -36) (("6" (assert) nil nil)) nil) ("7" (assert) nil nil) ("8" (flatten -36) (("8" (assert) nil nil)) nil) ("9" (assert) nil nil) ("10" (propax) nil nil) ("11" (assert) nil nil) ("12" (propax) nil nil) ("13" (propax) nil nil) ("14" (flatten -36) (("14" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil) ("3" (propax) nil nil) ("4" (propax) nil nil) ("5" (propax) nil nil) ("6" (flatten -18) (("6" (assert) nil nil)) nil) ("7" (assert) nil nil) ("8" (flatten -18) (("8" (assert) nil nil)) nil) ("9" (assert) nil nil) ("10" (propax) nil nil) ("11" (assert) nil nil) ("12" (propax) nil nil) ("13" (propax) nil nil) ("14" (flatten -18) (("14" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil) ("3" (propax) nil nil) ("4" (propax) nil nil) ("5" (propax) nil nil) ("6" (flatten -16) (("6" (assert) nil nil)) nil) ("7" (assert) nil nil) ("8" (flatten -16) (("8" (assert) nil nil)) nil) ("9" (assert) nil nil) ("10" (propax) nil nil) ("11" (assert) nil nil) ("12" (propax) nil nil) ("13" (propax) nil nil) ("14" (flatten -16) (("14" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil) ("3" (propax) nil nil) ("4" (propax) nil nil) ("5" (propax) nil nil) ("6" (flatten -1) (("6" (assert) nil nil)) nil) ("7" (assert) nil nil) ("8" (flatten -1) (("8" (assert) nil nil)) nil) ("9" (assert) nil nil) ("10" (propax) nil nil) ("11" (assert) nil nil) ("12" (propax) nil nil) ("13" (propax) nil nil) ("14" (flatten -1) (("14" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((update_p_panel const-decl "i_state" coordinator_th nil) (tick_pan_coordinator const-decl "state" system_th nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (reflect_device_to_coordinator const-decl "state" ICE_templates_rsce_th nil) (lemma2ippan formula-decl nil ICE_templates_rsce_th nil) (panlemma1ipy formula-decl nil ICE_templates_rsce_th nil) (panlemma1ipx formula-decl nil ICE_templates_rsce_th nil) (panlemma1ip formula-decl nil ICE_templates_rsce_th nil) (panlemma1npx formula-decl nil ICE_templates_rsce_th nil) (panlemma1np formula-decl nil ICE_templates_rsce_th nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (nlimit const-decl "nat" coord_t_and_c_th nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (maxrate formal-const-decl "posnat" ICE_templates_rsce_th nil) (maxinfuse formal-const-decl "posnat" ICE_templates_rsce_th nil) (maxtime formal-const-decl "{maxtime: posnat | maxinfuse <= maxtime}" ICE_templates_rsce_th nil) (device type-eq-decl nil devices_th nil) (patient type-eq-decl nil patient_th nil) (coord_menu.menu_type type-eq-decl nil system_th nil) (i_state type-eq-decl nil coordinator_th nil) (node_to_pd type-eq-decl nil system_th nil) (n_state type-eq-decl nil node_th nil) (patient_mn_type type-eq-decl nil system_th nil) (patient_db_type type-eq-decl nil system_th nil) (patients_type type-eq-decl nil patient_th nil) (node_to_patient type-eq-decl nil system_th nil) (state type-eq-decl nil system_th nil)) shostak))("ICE_templates_resource" ICE_templates_rsce_th c_consistent_actionnxdevicedisplay 0 (c_consistent_actionnxdevicedisplay-1 nil 3870341068 ("" (skosimp*) (("" (beta) (("" (flatten) (("" (lemma "lemma_cd_fun_act_xx" ("a" "a!1" "d" "d!1" "p" "p!1" "st" "st!1")) (("" (beta -1) (("" (split -1) (("1" (flatten -1) (("1" (split -46) (("1" (flatten -1) (("1" (assert) (("1" (postpone) nil nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil) ("4" (postpone) nil nil) ("5" (postpone) nil nil) ("6" (postpone) nil nil) ("7" (postpone) nil nil) ("8" (postpone) nil nil) ("9" (postpone) nil nil) ("10" (postpone) nil nil) ("11" (postpone) nil nil) ("12" (postpone) nil nil) ("13" (postpone) nil nil) ("14" (postpone) nil nil) ("15" (postpone) nil nil) ("16" (postpone) nil nil) ("17" (postpone) nil nil) ("18" (postpone) nil nil) ("19" (postpone) nil nil) ("20" (postpone) nil nil) ("21" (postpone) nil nil) ("22" (postpone) nil nil) ("23" (postpone) nil nil) ("24" (postpone) nil nil) ("25" (postpone) nil nil) ("26" (postpone) nil nil) ("27" (postpone) nil nil) ("28" (postpone) nil nil) ("29" (postpone) nil nil) ("30" (postpone) nil nil) ("31" (postpone) nil nil) ("32" (postpone) nil nil) ("33" (postpone) nil nil) ("34" (postpone) nil nil) ("35" (postpone) nil nil) ("36" (postpone) nil nil) ("37" (postpone) nil nil) ("38" (postpone) nil nil) ("39" (postpone) nil nil) ("40" (postpone) nil nil) ("41" (postpone) nil nil) ("42" (postpone) nil nil) ("43" (postpone) nil nil) ("44" (postpone) nil nil) ("45" (postpone) nil nil) ("46" (postpone) nil nil) ("47" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) nil shostak))("ICE_templates_resource" ICE_templates_rsce_th c_fun_consistent 0 (c_fun_consistent-1 nil 3864707105 ("" (skosimp*) (("" (beta) (("" (flatten) (("" (lemma "cdfa_lemma" ("a" "a!1" "st" "st!1")) (("" (lemma "p_to_act_ip_coord" ("a" "a!1" "d" "d!1" "p" "p!1" "st" "st!1")) (("" (beta -1) (("" (split -1) (("1" (lemma "lemma_fun_act_cp" ("a" "a!1" "p" "p!1" "d" "d!1" "st" "st!1")) (("1" (beta -1) (("1" (split -1) (("1" (flatten -2) (("1" (flatten -1) (("1" (lemma "lemma_reflect_device_consistent_c_d" ("p" "p!1" "d" "d!1" "st" "c_fun_act(a!1, d!1, p!1, st!1)")) (("1" (beta -1) (("1" (split -1) (("1" (split -50) (("1" (flatten -1) (("1" (assert) (("1" (replace -24 20) (("1" (expand "c_d_fun_actionx" 20) (("1" (replace -49 20) (("1" (replace -50 20) (("1" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten -1) (("2" (assert) (("2" (replace -25 19) (("2" (expand "c_d_fun_actionx" 19) (("2" (replace -50 19) (("2" (replace -51 19) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (replace -7 1) (("2" (replace -3 1) (("2" (propax) nil nil)) nil)) nil) ("3" (replace -7 1) (("3" (replace -3 1) (("3" (propax) nil nil)) nil)) nil) ("4" (replace -7 1) (("4" (replace -3 1) (("4" (split -49) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("5" (replace -3 1) (("5" (replace -7 1) (("5" (split -49) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("6" (replace -3 1) (("6" (split -49) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil)) nil) ("7" (replace -3 1) (("7" (assert) nil nil)) nil) ("8" (split -49) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("9" (assert) nil nil) ("10" (replace -8 1) (("10" (propax) nil nil)) nil) ("11" (assert) nil nil) ("12" (replace -3 1) (("12" (replace -1 1) (("12" (propax) nil nil)) nil)) nil) ("13" (replace -2 1) (("13" (split -49) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil)) nil) ("14" (expand "c_fun_act" 1) (("14" (propax) nil nil)) nil) ("15" (expand "c_fun_act" 1) (("15" (propax) nil nil)) nil) ("16" (expand "c_fun_act" 1) (("16" (propax) nil nil)) nil) ("17" (expand "c_fun_act" 1) (("17" (propax) nil nil)) nil) ("18" (replace -3 1) (("18" (expand "c_fun_act" 1) (("18" (propax) nil nil)) nil)) nil) ("19" (replace -3 1) (("19" (expand "c_fun_act" 1) (("19" (propax) nil nil)) nil)) nil) ("20" (expand "c_fun_act" 1) (("20" (propax) nil nil)) nil) ("21" (expand "c_fun_act" 1) (("21" (propax) nil nil)) nil) ("22" (expand "c_fun_act" 1) (("22" (assert) nil nil)) nil) ("23" (replace -3 1) (("23" (expand "c_fun_act" 1) (("23" (assert) nil nil)) nil)) nil) ("24" (replace -3 1) (("24" (expand "c_fun_act" 1) (("24" (propax) nil nil)) nil)) nil) ("25" (replace -3 1) (("25" (expand "c_fun_act" 1) (("25" (propax) nil nil)) nil)) nil) ("26" (split -49) (("1" (flatten -1) (("1" (assert) (("1" (replace -21 2) (("1" (expand "execute_ip" 2) (("1" (expand "update_panel" 2) (("1" (expand "fun_ip" -3) (("1" (lift-if -3) (("1" (split -3) (("1" (expand "fun_incr" -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (split -1) (("1" (expand "fun_decr" -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (split -1) (("1" (expand "fun_bolus" -1) (("1" (propax) nil nil)) nil) ("2" (flatten -1) (("2" (split -1) (("1" (expand "fun_confirm" -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (split -1) (("1" (expand "fun_choosetime" -1) (("1" (propax) nil nil)) nil) ("2" (flatten -1) (("2" (split -1) (("1" (expand "fun_choosevtbi" -1) (("1" (propax) nil nil)) nil) ("2" (flatten -1) (("2" (split -1) (("1" (expand "fun_chooserate" -1) (("1" (propax) nil nil)) nil) ("2" (flatten -1) (("2" (split -1) (("1" (expand "fun_infuse" -1) (("1" (propax) nil nil)) nil) ("2" (flatten -1) (("2" (split -1) (("1" (expand "fun_pause" -1) (("1" (propax) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten -1) (("2" (assert) (("2" (replace -23 1) (("2" (expand "execute_vs" 1) (("2" (expand "alarm_vs" 1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("27" (replace -13 1) (("27" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil) ("3" (propax) nil nil) ("4" (propax) nil nil) ("5" (propax) nil nil) ("6" (split -30) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("7" (assert) nil nil) ("8" (split -30) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("9" (assert) nil nil) ("10" (propax) nil nil) ("11" (assert) nil nil) ("12" (propax) nil nil) ("13" (propax) nil nil) ("14" (split -30) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("15" (propax) nil nil) ("16" (propax) nil nil) ("17" (split -30) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("18" (propax) nil nil) ("19" (propax) nil nil) ("20" (split -30) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("21" (assert) nil nil) ("22" (propax) nil nil) ("23" (assert) nil nil) ("24" (assert) nil nil) ("25" (assert) nil nil) ("26" (propax) nil nil) ("27" (propax) nil nil) ("28" (propax) nil nil) ("29" (propax) nil nil) ("30" (split -30) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("31" (propax) nil nil) ("32" (propax) nil nil) ("33" (propax) nil nil)) nil)) nil)) nil) ("2" (propax) nil nil) ("3" (propax) nil nil) ("4" (propax) nil nil) ("5" (propax) nil nil) ("6" (split -29) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("7" (assert) nil nil) ("8" (split -29) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("9" (assert) nil nil) ("10" (propax) nil nil) ("11" (assert) nil nil) ("12" (propax) nil nil) ("13" (propax) nil nil) ("14" (split -29) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("15" (propax) nil nil) ("16" (propax) nil nil) ("17" (split -29) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("18" (propax) nil nil) ("19" (propax) nil nil) ("20" (split -29) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("21" (assert) nil nil) ("22" (propax) nil nil) ("23" (assert) nil nil) ("24" (assert) nil nil) ("25" (propax) nil nil) ("26" (propax) nil nil) ("27" (propax) nil nil) ("28" (propax) nil nil) ("29" (propax) nil nil) ("30" (propax) nil nil) ("31" (propax) nil nil) ("32" (split -29) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((state type-eq-decl nil system_th nil) (node_to_patient type-eq-decl nil system_th nil) (patients_type type-eq-decl nil patient_th nil) (patient_db_type type-eq-decl nil system_th nil) (patient_mn_type type-eq-decl nil system_th nil) (n_state type-eq-decl nil node_th nil) (node_to_pd type-eq-decl nil system_th nil) (i_state type-eq-decl nil coordinator_th nil) (coord_menu.menu_type type-eq-decl nil system_th nil) (maxtime formal-const-decl "{maxtime: posnat | maxinfuse <= maxtime}" ICE_templates_rsce_th nil) (<= const-decl "bool" reals nil) (maxinfuse formal-const-decl "posnat" ICE_templates_rsce_th nil) (maxrate formal-const-decl "posnat" ICE_templates_rsce_th nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (action_id type-decl nil coord_t_and_c_th nil) (cdfa_lemma formula-decl nil ICE_templates_rsce_th nil) (lemma_fun_act_cp formula-decl nil ICE_templates_rsce_th nil) (execute_ip const-decl "d_state" infusion_pumps_th nil) (fun_ip const-decl "d_state" infusion_pumps_th nil) (fun_incr const-decl "d_state" infusion_pumps_th nil) (fun_decr const-decl "d_state" infusion_pumps_th nil) (fun_bolus const-decl "d_state" infusion_pumps_th nil) (fun_confirm const-decl "d_state" infusion_pumps_th nil) (fun_choosetime const-decl "d_state" infusion_pumps_th nil) (fun_choosevtbi const-decl "d_state" infusion_pumps_th nil) (fun_chooserate const-decl "d_state" infusion_pumps_th nil) (fun_infuse const-decl "d_state" infusion_pumps_th nil) (fun_pause const-decl "d_state" infusion_pumps_th nil) (update_panel const-decl "d_state" infusion_pumps_th nil) (execute_vs const-decl "v_state" vital_signs_th nil) (alarm_vs const-decl "v_state" vital_signs_th nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (c_d_fun_actionx const-decl "state" ICE_templates_rsce_th nil) (c_fun_act const-decl "state" ICE_templates_rsce_th nil) (lemma_reflect_device_consistent_c_d formula-decl nil ICE_templates_rsce_th nil) (p_to_act_ip_coord formula-decl nil ICE_templates_rsce_th nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nlimit const-decl "nat" coord_t_and_c_th nil) (device type-eq-decl nil devices_th nil) (patient type-eq-decl nil patient_th nil)) shostak))("ICE_templates_resource" ICE_templates_rsce_th setup_coordinator_shortcut_devdisp 0 (setup_coordinator_shortcut_devdisp-1 nil 3861787542 ("" (skosimp*) (("" (beta) (("" (flatten) (("" (lemma "panlemma1np" ("p" "p!1" "d" "d!1" "st" "st!1")) (("" (beta -1) (("" (split -1) (("1" (flatten -1) (("1" (lemma "panlemma1npx" ("p" "p!1" "d" "d!1" "st" "st!1")) (("1" (beta -1) (("1" (split -1) (("1" (flatten -1) (("1" (lemma "lemma2ippan" ("p" "p!1" "d" "d!1" "st" "st!1")) (("1" (beta -1) (("1" (split -1) (("1" (flatten -1) (("1" (split -39) (("1" (flatten -1) (("1" (expand "reflect_device_to_coordinator" 11) (("1" (expand "tick_pan_coordinator" 11) (("1" (assert) (("1" (replace -14 11) (("1" (beta 11) (("1" (replace -29 11) (("1" (replace -28 11) (("1" (replace -39 11) (("1" (replace -26 11) (("1" (replace -25 11) (("1" (replace -40 11) (("1" (beta 11) (("1" (replace -18 11) (("1" (replace -17 11) (("1" (expand "update_p_panel" 11) (("1" (expand "filter_panel" 11) (("1" (expand "available_act" 11) (("1" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten -1) (("2" (assert) (("2" (expand "reflect_device_to_coordinator" 10) (("2" (expand "tick_pan_coordinator" 10) (("2" (replace -15 10) (("2" (beta 10) (("2" (replace -30 10) (("2" (replace -29 10) (("2" (replace -27 10) (("2" (replace -26 10) (("2" (replace -40 10) (("2" (replace -41 10) (("2" (beta 10) (("2" (replace -19 10) (("2" (replace -18 10) (("2" (expand "update_p_panel" 10) (("2" (expand "filter_panel" 10) (("2" (expand "available_act" 10) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil) ("3" (propax) nil nil) ("4" (propax) nil nil) ("5" (propax) nil nil) ("6" (split -25) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("7" (assert) nil nil) ("8" (split -25) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("9" (assert) nil nil) ("10" (propax) nil nil) ("11" (assert) nil nil) ("12" (propax) nil nil) ("13" (propax) nil nil) ("14" (split -25) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("15" (propax) nil nil) ("16" (assert) nil nil) ("17" (propax) nil nil) ("18" (assert) nil nil) ("19" (propax) nil nil) ("20" (propax) nil nil) ("21" (assert) nil nil) ("22" (propax) nil nil) ("23" (assert) nil nil) ("24" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil) ("3" (propax) nil nil) ("4" (propax) nil nil) ("5" (propax) nil nil) ("6" (split -23) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("7" (assert) nil nil) ("8" (split -23) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("9" (assert) nil nil) ("10" (propax) nil nil) ("11" (assert) nil nil) ("12" (propax) nil nil) ("13" (propax) nil nil) ("14" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil) ("3" (propax) nil nil) ("4" (propax) nil nil) ("5" (propax) nil nil) ("6" (split -8) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("7" (assert) nil nil) ("8" (split -8) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("9" (assert) nil nil) ("10" (propax) nil nil) ("11" (assert) nil nil) ("12" (propax) nil nil) ("13" (propax) nil nil) ("14" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((state type-eq-decl nil system_th nil) (node_to_patient type-eq-decl nil system_th nil) (patients_type type-eq-decl nil patient_th nil) (patient_db_type type-eq-decl nil system_th nil) (patient_mn_type type-eq-decl nil system_th nil) (n_state type-eq-decl nil node_th nil) (node_to_pd type-eq-decl nil system_th nil) (i_state type-eq-decl nil coordinator_th nil) (coord_menu.menu_type type-eq-decl nil system_th nil) (patient type-eq-decl nil patient_th nil) (device type-eq-decl nil devices_th nil) (maxtime formal-const-decl "{maxtime: posnat | maxinfuse <= maxtime}" ICE_templates_rsce_th nil) (maxinfuse formal-const-decl "posnat" ICE_templates_rsce_th nil) (maxrate formal-const-decl "posnat" ICE_templates_rsce_th nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nlimit const-decl "nat" coord_t_and_c_th nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (panlemma1np formula-decl nil ICE_templates_rsce_th nil) (panlemma1npx formula-decl nil ICE_templates_rsce_th nil) (lemma2ippan formula-decl nil ICE_templates_rsce_th nil) (reflect_device_to_coordinator const-decl "state" ICE_templates_rsce_th nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (update_p_panel const-decl "i_state" coordinator_th nil) (available_act const-decl "panel" infusion_pumps_th nil) (filter_panel const-decl "panel" coord_t_and_c_th nil) (tick_pan_coordinator const-decl "state" system_th nil) (available_act const-decl "panel" vital_signs_th nil)) shostak))("ICE_templates_resource" ICE_templates_rsce_th c_confirmnxdevdispxalarm 0 (c_confirmnxdevdispxalarm-1 nil 3862029238 ("" (skosimp*) (("" (beta) (("" (flatten) (("" (lemma "c_consistent_actionnxdevdisp" ("a" "confirm" "d" "d!1" "p" "p!1" "st" "st!1")) (("" (beta -1) (("" (split -1) (("1" (flatten -1) (("1" (assert) (("1" (replace -1 18) (("1" (expand "filter_panel" 18) (("1" (expand "enum_par" 18) (("1" (expand "execute_ip" 18) (("1" (expand "fun_ip" 18) (("1" (expand "c_d_per_action" -39) (("1" (flatten -39) (("1" (replace -33 -40) (("1" (replace -34 -40) (("1" (expand "consistent_coordinator_d" -38) (("1" (replace -38 -40) (("1" (expand "filter_panel" -40) (("1" (flatten -40) (("1" (expand "available_act" -41) (("1" (assert) (("1" (expand "fun_confirm" 18) (("1" (expand "update_panel" 18) (("1" (expand "upd_pan" 18) (("1" (expand "tick" 18) (("1" (expand "update_panel" 18) (("1" (expand "upd_pan" 18) (("1" (expand "timeout" 18) (("1" (expand "enum_par" 18) (("1" (expand "per_confirm" -41) (("1" (flatten -41) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil) ("3" (propax) nil nil) ("4" (assert) nil nil) ("5" (assert) nil nil) ("6" (assert) nil nil) ("7" (assert) nil nil) ("8" (assert) nil nil) ("9" (assert) nil nil) ("10" (propax) nil nil) ("11" (assert) nil nil) ("12" (propax) nil nil) ("13" (propax) nil nil) ("14" (assert) nil nil) ("15" (assert) nil nil) ("16" (assert) nil nil) ("17" (assert) nil nil) ("18" (assert) nil nil) ("19" (assert) nil nil) ("20" (assert) nil nil) ("21" (assert) nil nil) ("22" (propax) nil nil) ("23" (assert) nil nil) ("24" (propax) nil nil) ("25" (propax) nil nil) ("26" (propax) nil nil) ("27" (propax) nil nil) ("28" (assert) nil nil) ("29" (propax) nil nil) ("30" (assert) nil nil) ("31" (propax) nil nil) ("32" (propax) nil nil) ("33" (assert) nil nil) ("34" (assert) nil nil) ("35" (propax) nil nil) ("36" (assert) nil nil) ("37" (assert) nil nil) ("38" (assert) nil nil) ("39" (propax) nil nil) ("40" (assert) nil nil) ("41" (assert) nil nil) ("42" (propax) nil nil) ("43" (propax) nil nil) ("44" (propax) nil nil) ("45" (propax) nil nil) ("46" (propax) nil nil) ("47" (propax) nil nil) ("48" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((state type-eq-decl nil system_th nil) (node_to_patient type-eq-decl nil system_th nil) (patients_type type-eq-decl nil patient_th nil) (patient_db_type type-eq-decl nil system_th nil) (patient_mn_type type-eq-decl nil system_th nil) (n_state type-eq-decl nil node_th nil) (node_to_pd type-eq-decl nil system_th nil) (i_state type-eq-decl nil coordinator_th nil) (coord_menu.menu_type type-eq-decl nil system_th nil) (patient type-eq-decl nil patient_th nil) (device type-eq-decl nil devices_th nil) (maxtime formal-const-decl "{maxtime: posnat | maxinfuse <= maxtime}" ICE_templates_rsce_th nil) (maxinfuse formal-const-decl "posnat" ICE_templates_rsce_th nil) (maxrate formal-const-decl "posnat" ICE_templates_rsce_th nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nlimit const-decl "nat" coord_t_and_c_th nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (confirm adt-constructor-decl "(confirm?)" coord_t_and_c_th nil) (confirm? adt-recognizer-decl "[action_id -> boolean]" coord_t_and_c_th nil) (boolean nonempty-type-decl nil booleans nil) (action_id type-decl nil coord_t_and_c_th nil) (c_consistent_actionnxdevdisp formula-decl nil ICE_templates_rsce_th nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (filter_panel const-decl "panel" coord_t_and_c_th nil) (execute_ip const-decl "d_state" infusion_pumps_th nil) (c_d_per_action const-decl "boolean" ICE_templates_rsce_th nil) (consistent_coordinator_d const-decl "boolean" ICE_templates_rsce_th nil) (available_act const-decl "panel" infusion_pumps_th nil) (fun_confirm const-decl "d_state" infusion_pumps_th nil) (upd_pan const-decl "panel" infusion_pumps_th nil) (timeout const-decl "itimes" infusion_pumps_th nil) (per_confirm const-decl "boolean" infusion_pumps_th nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (tick const-decl "d_state" infusion_pumps_th nil) (update_panel const-decl "d_state" infusion_pumps_th nil) (fun_ip const-decl "d_state" infusion_pumps_th nil) (enum_par const-decl "boolean" coord_t_and_c_th nil)) shostak))("ICE_templates_resource" ICE_templates_rsce_th c_holdnxdevdispxalarm 0 (c_holdnxdevdispxalarm-1 nil 3862030590 ("" (skosimp*) (("" (beta) (("" (flatten) (("" (lemma "c_consistent_actionnxdevdisp" ("a" "hold" "d" "d!1" "p" "p!1" "st" "st!1")) (("" (beta -1) (("" (split -1) (("1" (flatten -1) (("1" (assert) (("1" (replace -1 18) (("1" (expand "filter_panel" 18) (("1" (expand "enum_par" 18) (("1" (expand "c_d_per_action" -39) (("1" (flatten -39) (("1" (replace -33 -40) (("1" (replace -34 -40) (("1" (expand "consistent_coordinator_d" -38) (("1" (replace -38 -40) (("1" (expand "filter_panel" -40) (("1" (flatten -40) (("1" (expand "available_act" -41) (("1" (expand "execute_ip" 18) (("1" (expand "fun_ip" 18) (("1" (assert) (("1" (expand "fun_pause" 18) (("1" (expand "update_panel" 18) (("1" (expand "upd_pan" 18) (("1" (expand "tick" 18) (("1" (expand "update_panel" 18) (("1" (expand "upd_pan" 18) (("1" (expand "timeout" 18) (("1" (expand "enum_par" 18) (("1" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil) ("3" (propax) nil nil) ("4" (assert) nil nil) ("5" (assert) nil nil) ("6" (assert) nil nil) ("7" (assert) nil nil) ("8" (assert) nil nil) ("9" (assert) nil nil) ("10" (propax) nil nil) ("11" (assert) nil nil) ("12" (propax) nil nil) ("13" (propax) nil nil) ("14" (assert) nil nil) ("15" (assert) nil nil) ("16" (assert) nil nil) ("17" (assert) nil nil) ("18" (assert) nil nil) ("19" (assert) nil nil) ("20" (assert) nil nil) ("21" (assert) nil nil) ("22" (propax) nil nil) ("23" (assert) nil nil) ("24" (propax) nil nil) ("25" (propax) nil nil) ("26" (propax) nil nil) ("27" (propax) nil nil) ("28" (assert) nil nil) ("29" (propax) nil nil) ("30" (assert) nil nil) ("31" (propax) nil nil) ("32" (propax) nil nil) ("33" (assert) nil nil) ("34" (assert) nil nil) ("35" (propax) nil nil) ("36" (assert) nil nil) ("37" (assert) nil nil) ("38" (assert) nil nil) ("39" (propax) nil nil) ("40" (assert) nil nil) ("41" (assert) nil nil) ("42" (propax) nil nil) ("43" (propax) nil nil) ("44" (propax) nil nil) ("45" (propax) nil nil) ("46" (propax) nil nil) ("47" (propax) nil nil) ("48" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((state type-eq-decl nil system_th nil) (node_to_patient type-eq-decl nil system_th nil) (patients_type type-eq-decl nil patient_th nil) (patient_db_type type-eq-decl nil system_th nil) (patient_mn_type type-eq-decl nil system_th nil) (n_state type-eq-decl nil node_th nil) (node_to_pd type-eq-decl nil system_th nil) (i_state type-eq-decl nil coordinator_th nil) (coord_menu.menu_type type-eq-decl nil system_th nil) (patient type-eq-decl nil patient_th nil) (device type-eq-decl nil devices_th nil) (maxtime formal-const-decl "{maxtime: posnat | maxinfuse <= maxtime}" ICE_templates_rsce_th nil) (maxinfuse formal-const-decl "posnat" ICE_templates_rsce_th nil) (maxrate formal-const-decl "posnat" ICE_templates_rsce_th nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nlimit const-decl "nat" coord_t_and_c_th nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (hold adt-constructor-decl "(hold?)" coord_t_and_c_th nil) (hold? adt-recognizer-decl "[action_id -> boolean]" coord_t_and_c_th nil) (boolean nonempty-type-decl nil booleans nil) (action_id type-decl nil coord_t_and_c_th nil) (c_consistent_actionnxdevdisp formula-decl nil ICE_templates_rsce_th nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (filter_panel const-decl "panel" coord_t_and_c_th nil) (c_d_per_action const-decl "boolean" ICE_templates_rsce_th nil) (consistent_coordinator_d const-decl "boolean" ICE_templates_rsce_th nil) (available_act const-decl "panel" infusion_pumps_th nil) (fun_ip const-decl "d_state" infusion_pumps_th nil) (fun_pause const-decl "d_state" infusion_pumps_th nil) (upd_pan const-decl "panel" infusion_pumps_th nil) (timeout const-decl "itimes" infusion_pumps_th nil) (tick const-decl "d_state" infusion_pumps_th nil) (update_panel const-decl "d_state" infusion_pumps_th nil) (execute_ip const-decl "d_state" infusion_pumps_th nil) (enum_par const-decl "boolean" coord_t_and_c_th nil)) shostak))("ICE_templates_resource" ICE_templates_rsce_th c_holdxxdevdispxalarm 0 (c_holdxxdevdispxalarm-1 nil 3864873569 ("" (postpone) nil nil) nil shostak))("ICE_templates_resource" ICE_templates_rsce_th c_d_fun_action_lemma_ex 0 (c_d_fun_action_lemma_ex-1 nil 3861941404 ("" (skosimp*) (("" (beta) (("" (flatten) (("" (lemma "p_to_act_ip_coord" ("a" "a!1" "d" "d!1" "p" "p!1" "st" "st!1")) (("" (beta -1) (("" (split -1) (("1" (flatten -1) (("1" (lemma "lemma_fun_act_cp" ("a" "a!1" "p" "p!1" "d" "d!1" "st" "st!1")) (("1" (beta -1) (("1" (split -1) (("1" (flatten -1) (("1" (lemma "cdfa_lemma" ("a" "a!1" "st" "st!1")) (("1" (lemma "lemma_reflect_device_c_ds" ("p" "p!1" "d" "d!1" "st" "c_fun_act(a!1, d!1, p!1, st!1)")) (("1" (beta -1) (("1" (split -1) (("1" (flatten -1) (("1" (split -50) (("1" (flatten -1) (("1" (assert) (("1" (replace -7 19) (("1" (expand "c_d_fun_actionx" 19) (("1" (replace -52 19) (("1" (replace -53 19) (("1" (replace -3 19) (("1" (replace -26 19) (("1" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten -1) (("2" (assert) (("2" (replace -8 18) (("2" (expand "c_d_fun_actionx" 18) (("2" (replace -53 18) (("2" (replace -54 18) (("2" (replace -5 18) (("2" (replace -28 18) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (replace -8 1) (("2" (replace -4 1) (("2" (propax) nil nil)) nil)) nil) ("3" (replace -8 1) (("3" (replace -4 1) (("3" (propax) nil nil)) nil)) nil) ("4" (replace -8 1) (("4" (replace -4 1) (("4" (split -46) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("5" (replace -8 1) (("5" (replace -4 1) (("5" (split -46) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("6" (replace -4 1) (("6" (split -46) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil)) nil) ("7" (replace -4 1) (("7" (assert) nil nil)) nil) ("8" (split -46) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("9" (assert) nil nil) ("10" (replace -9 1) (("10" (propax) nil nil)) nil) ("11" (assert) nil nil) ("12" (replace -4 1) (("12" (replace -2 1) (("12" (propax) nil nil)) nil)) nil) ("13" (replace -3 1) (("13" (split -46) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil)) nil) ("14" (split -46) (("1" (flatten -1) (("1" (assert) (("1" (replace -22 2) (("1" (expand "execute_ip" 2) (("1" (expand "update_panel" 2) (("1" (expand "fun_ip" -3) (("1" (lift-if -3) (("1" (split -3) (("1" (expand "fun_incr" -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (split -1) (("1" (expand "fun_decr" -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (split -1) (("1" (expand "fun_bolus" -1) (("1" (propax) nil nil)) nil) ("2" (flatten -1) (("2" (split -1) (("1" (expand "fun_confirm" -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (split -1) (("1" (expand "fun_choosetime" -1) (("1" (propax) nil nil)) nil) ("2" (flatten -1) (("2" (split -1) (("1" (expand "fun_choosevtbi" -1) (("1" (propax) nil nil)) nil) ("2" (flatten -1) (("2" (split -1) (("1" (expand "fun_chooserate" -1) (("1" (propax) nil nil)) nil) ("2" (flatten -1) (("2" (split -1) (("1" (expand "fun_infuse" -1) (("1" (propax) nil nil)) nil) ("2" (flatten -1) (("2" (split -1) (("1" (expand "fun_pause" -1) (("1" (propax) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten -1) (("2" (assert) (("2" (replace -24 1) (("2" (expand "execute_vs" 1) (("2" (expand "alarm_vs" 1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("15" (expand "c_fun_act" 1) (("15" (propax) nil nil)) nil) ("16" (expand "c_fun_act" 1) (("16" (propax) nil nil)) nil) ("17" (expand "c_fun_act" 1) (("17" (propax) nil nil)) nil) ("18" (expand "c_fun_act" 1) (("18" (propax) nil nil)) nil) ("19" (replace -4 1) (("19" (expand "c_fun_act" 1) (("19" (propax) nil nil)) nil)) nil) ("20" (replace -4 1) (("20" (expand "c_fun_act" 1) (("20" (propax) nil nil)) nil)) nil) ("21" (expand "c_fun_act" 1) (("21" (propax) nil nil)) nil) ("22" (expand "c_fun_act" 1) (("22" (propax) nil nil)) nil) ("23" (expand "c_fun_act" 1) (("23" (assert) nil nil)) nil) ("24" (replace -4 1) (("24" (expand "c_fun_act" 1) (("24" (assert) nil nil)) nil)) nil) ("25" (replace -4 1) (("25" (expand "c_fun_act" 1) (("25" (propax) nil nil)) nil)) nil) ("26" (replace -4 1) (("26" (expand "c_fun_act" 1) (("26" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil) ("3" (propax) nil nil) ("4" (propax) nil nil) ("5" (propax) nil nil) ("6" (split -27) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("7" (assert) nil nil) ("8" (split -27) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("9" (assert) nil nil) ("10" (propax) nil nil) ("11" (assert) nil nil) ("12" (propax) nil nil) ("13" (propax) nil nil) ("14" (split -27) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("15" (propax) nil nil) ("16" (propax) nil nil) ("17" (split -27) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("18" (propax) nil nil) ("19" (propax) nil nil) ("20" (split -27) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("21" (assert) nil nil) ("22" (propax) nil nil) ("23" (assert) nil nil) ("24" (assert) nil nil) ("25" (assert) nil nil) ("26" (propax) nil nil) ("27" (propax) nil nil) ("28" (propax) nil nil) ("29" (propax) nil nil) ("30" (split -27) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("31" (propax) nil nil) ("32" (propax) nil nil) ("33" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil) ("3" (propax) nil nil) ("4" (propax) nil nil) ("5" (propax) nil nil) ("6" (split -25) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("7" (assert) nil nil) ("8" (split -25) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("9" (assert) nil nil) ("10" (propax) nil nil) ("11" (assert) nil nil) ("12" (propax) nil nil) ("13" (propax) nil nil) ("14" (split -25) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("15" (propax) nil nil) ("16" (propax) nil nil) ("17" (split -25) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("18" (propax) nil nil) ("19" (propax) nil nil) ("20" (split -25) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("21" (assert) nil nil) ("22" (propax) nil nil) ("23" (assert) nil nil) ("24" (assert) nil nil) ("25" (propax) nil nil) ("26" (propax) nil nil) ("27" (propax) nil nil) ("28" (propax) nil nil) ("29" (propax) nil nil) ("30" (propax) nil nil) ("31" (propax) nil nil) ("32" (split -25) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((state type-eq-decl nil system_th nil) (node_to_patient type-eq-decl nil system_th nil) (patients_type type-eq-decl nil patient_th nil) (patient_db_type type-eq-decl nil system_th nil) (patient_mn_type type-eq-decl nil system_th nil) (n_state type-eq-decl nil node_th nil) (node_to_pd type-eq-decl nil system_th nil) (i_state type-eq-decl nil coordinator_th nil) (coord_menu.menu_type type-eq-decl nil system_th nil) (patient type-eq-decl nil patient_th nil) (device type-eq-decl nil devices_th nil) (maxtime formal-const-decl "{maxtime: posnat | maxinfuse <= maxtime}" ICE_templates_rsce_th nil) (maxinfuse formal-const-decl "posnat" ICE_templates_rsce_th nil) (maxrate formal-const-decl "posnat" ICE_templates_rsce_th nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nlimit const-decl "nat" coord_t_and_c_th nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (action_id type-decl nil coord_t_and_c_th nil) (p_to_act_ip_coord formula-decl nil ICE_templates_rsce_th nil) (lemma_fun_act_cp formula-decl nil ICE_templates_rsce_th nil) (cdfa_lemma formula-decl nil ICE_templates_rsce_th nil) (execute_ip const-decl "d_state" infusion_pumps_th nil) (fun_ip const-decl "d_state" infusion_pumps_th nil) (fun_incr const-decl "d_state" infusion_pumps_th nil) (fun_decr const-decl "d_state" infusion_pumps_th nil) (fun_bolus const-decl "d_state" infusion_pumps_th nil) (fun_confirm const-decl "d_state" infusion_pumps_th nil) (fun_choosetime const-decl "d_state" infusion_pumps_th nil) (fun_choosevtbi const-decl "d_state" infusion_pumps_th nil) (fun_chooserate const-decl "d_state" infusion_pumps_th nil) (fun_infuse const-decl "d_state" infusion_pumps_th nil) (fun_pause const-decl "d_state" infusion_pumps_th nil) (update_panel const-decl "d_state" infusion_pumps_th nil) (execute_vs const-decl "v_state" vital_signs_th nil) (alarm_vs const-decl "v_state" vital_signs_th nil) (c_d_fun_actionx const-decl "state" ICE_templates_rsce_th nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (c_fun_act const-decl "state" ICE_templates_rsce_th nil) (lemma_reflect_device_c_ds formula-decl nil ICE_templates_rsce_th nil)) shostak))("ICE_templates_resource" ICE_templates_rsce_th c_d_fun_action_lemma_onal 0 (c_d_fun_action_lemma_onal-1 nil 3861954898 ("" (skosimp*) (("" (beta) (("" (flatten) (("" (lemma "c_d_fun_action_lemma_ex" ("a" "a!1" "d" "d!1" "p" "p!1" "st" "st!1")) (("" (beta -1) (("" (split -1) (("1" (flatten -1) (("1" (split -27) (("1" (flatten -1) (("1" (assert) (("1" (split 19) (("1" (replace -3 1) (("1" (expand "execute_ip" 1) (("1" (expand "update_panel" 1) (("1" (expand "upd_pan" 1) (("1" (expand "tick" 1) (("1" (expand "update_panel" -1) (("1" (expand "c_d_per_action" -33) (("1" (replace -30 -33) (("1" (replace -31 -33) (("1" (flatten -33) (("1" (expand "consistent_coordinator_d" -32) (("1" (replace -32 -34) (("1" (expand "filter_panel" -34) (("1" (flatten -34) (("1" (expand "available_act" -35) (("1" (split -35) (("1" (flatten -1) (("1" (replace -1 -3) (("1" (expand "fun_ip" -3) (("1" (lift-if -3) (("1" (assert) (("1" (expand "fun_incr" -3) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten -1) (("2" (replace -1 -3) (("2" (expand "fun_ip" -3) (("2" (lift-if -3) (("2" (assert) (("2" (expand "fun_decr" -3) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (flatten -1) (("3" (replace -1 -3) (("3" (expand "fun_ip" -3) (("3" (lift-if -3) (("3" (assert) (("3" (expand "fun_bolus" -3) (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (flatten -1) (("4" (replace -1 -3) (("4" (expand "fun_ip" -3) (("4" (lift-if -3) (("4" (assert) (("4" (expand "fun_confirm" -3) (("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("5" (flatten -1) (("5" (replace -1 -3) (("5" (expand "fun_ip" -3) (("5" (lift-if -3) (("5" (assert) (("5" (expand "fun_choosetime" -3) (("5" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("6" (flatten -1) (("6" (replace -1 -3) (("6" (expand "fun_ip" -3) (("6" (lift-if -3) (("6" (assert) (("6" (expand "fun_choosevtbi" -3) (("6" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("7" (flatten -1) (("7" (replace -1 -3) (("7" (expand "fun_ip" -3) (("7" (lift-if -3) (("7" (assert) (("7" (expand "fun_chooserate" -3) (("7" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("8" (flatten -1) (("8" (replace -1 -3) (("8" (expand "fun_ip" -3) (("8" (lift-if -3) (("8" (assert) (("8" (expand "fun_infuse" -3) (("8" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("9" (flatten -1) (("9" (replace -1 -3) (("9" (expand "fun_ip" -3) (("9" (lift-if -3) (("9" (assert) (("9" (expand "fun_pause" -3) (("9" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten 1) (("2" (replace -11 -8) (("2" (expand "c_d_per_action" -40) (("2" (flatten -40) (("2" (expand "consistent_coordinator_d" -39) (("2" (replace -37 -41) (("2" (replace -38 -41) (("2" (replace -39 -41) (("2" (expand "filter_panel" -41) (("2" (flatten -41) (("2" (expand "available_act" -42) (("2" (expand "execute_ip" -8) (("2" (expand "update_panel" -8) (("2" (expand "upd_pan" -8) (("2" (expand "tick" -8) (("2" (expand "update_panel" -8) (("2" (lift-if -8) (("2" (split -42) (("1" (flatten -1) (("1" (replace -1 -10) (("1" (expand "fun_ip" -10) (("1" (assert) (("1" (expand "fun_incr" -10) (("1" (assert) (("1" (expand "per_incr" -2) (("1" (expand "timeout" -10) (("1" (flatten -2) (("1" (split -3) (("1" (assert) nil nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten -1) (("2" (replace -1 -10) (("2" (expand "timeout" -10) (("2" (expand "fun_ip" -10) (("2" (assert) (("2" (expand "fun_decr" -10) (("2" (expand "per_decr" -2) (("2" (flatten -2) (("2" (assert) (("2" (split -3) (("1" (assert) nil nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (flatten -1) (("3" (replace -1 -10) (("3" (expand "timeout" -10) (("3" (expand "fun_ip" -10) (("3" (assert) (("3" (expand "fun_bolus" -10) (("3" (expand "per_bolus" -2) (("3" (flatten -2) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (flatten -1) (("4" (replace -1 -10) (("4" (expand "timeout" -10) (("4" (expand "fun_ip" -10) (("4" (assert) (("4" (expand "fun_confirm" -10) (("4" (expand "per_confirm" -2) (("4" (flatten -2) (("4" (assert) (("4" (split -3) (("1" (assert) nil nil) ("2" (assert) nil nil) ("3" (assert) nil nil) ("4" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("5" (flatten -1) (("5" (replace -1 10) (("5" (expand "timeout" -10) (("5" (expand "fun_ip" -10) (("5" (assert) (("5" (expand "fun_choosetime" -10) (("5" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("6" (flatten -1) (("6" (replace -1 10) (("6" (expand "timeout" -10) (("6" (expand "fun_ip" -10) (("6" (assert) (("6" (expand "fun_choosevtbi" -10) (("6" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("7" (flatten -1) (("7" (replace -1 10) (("7" (expand "timeout" -10) (("7" (expand "fun_ip" -10) (("7" (assert) (("7" (expand "fun_chooserate" -10) (("7" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("8" (flatten -1) (("8" (replace -1 10) (("8" (expand "timeout" -10) (("8" (expand "fun_ip" -10) (("8" (assert) (("8" (expand "fun_infuse" -10) (("8" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("9" (flatten -1) (("9" (replace -1 10) (("9" (expand "timeout" -10) (("9" (expand "fun_ip" -10) (("9" (assert) (("9" (expand "fun_pause" -10) (("9" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten -1) (("2" (assert) (("2" (replace -5 18) (("2" (expand "tick_vs" 18) (("2" (expand "c_d_per_action" -33) (("2" (replace -30 -33) (("2" (replace -31 -33) (("2" (flatten -33) (("2" (expand "consistent_coordinator_d" -32) (("2" (replace -32 -34) (("2" (expand "filter_panel" -34) (("2" (flatten -34) (("2" (expand "available_act" -35) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil) ("3" (propax) nil nil) ("4" (propax) nil nil) ("5" (propax) nil nil) ("6" (split -25) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("7" (assert) nil nil) ("8" (split -25) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("9" (assert) nil nil) ("10" (propax) nil nil) ("11" (assert) nil nil) ("12" (propax) nil nil) ("13" (propax) nil nil) ("14" (split -25) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("15" (propax) nil nil) ("16" (propax) nil nil) ("17" (split -25) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("18" (propax) nil nil) ("19" (propax) nil nil) ("20" (split -25) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("21" (assert) nil nil) ("22" (propax) nil nil) ("23" (assert) nil nil) ("24" (propax) nil nil) ("25" (propax) nil nil) ("26" (propax) nil nil) ("27" (assert) nil nil) ("28" (propax) nil nil) ("29" (assert) nil nil) ("30" (propax) nil nil) ("31" (propax) nil nil) ("32" (assert) nil nil) ("33" (assert) nil nil) ("34" (propax) nil nil) ("35" (assert) nil nil) ("36" (assert) nil nil) ("37" (assert) nil nil) ("38" (propax) nil nil) ("39" (propax) nil nil) ("40" (propax) nil nil) ("41" (propax) nil nil) ("42" (propax) nil nil) ("43" (propax) nil nil) ("44" (propax) nil nil) ("45" (propax) nil nil) ("46" (propax) nil nil) ("47" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((state type-eq-decl nil system_th nil) (node_to_patient type-eq-decl nil system_th nil) (patients_type type-eq-decl nil patient_th nil) (patient_db_type type-eq-decl nil system_th nil) (patient_mn_type type-eq-decl nil system_th nil) (n_state type-eq-decl nil node_th nil) (node_to_pd type-eq-decl nil system_th nil) (i_state type-eq-decl nil coordinator_th nil) (coord_menu.menu_type type-eq-decl nil system_th nil) (patient type-eq-decl nil patient_th nil) (device type-eq-decl nil devices_th nil) (maxtime formal-const-decl "{maxtime: posnat | maxinfuse <= maxtime}" ICE_templates_rsce_th nil) (maxinfuse formal-const-decl "posnat" ICE_templates_rsce_th nil) (maxrate formal-const-decl "posnat" ICE_templates_rsce_th nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nlimit const-decl "nat" coord_t_and_c_th nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (action_id type-decl nil coord_t_and_c_th nil) (c_d_fun_action_lemma_ex formula-decl nil ICE_templates_rsce_th nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (per_confirm const-decl "boolean" infusion_pumps_th nil) (per_bolus const-decl "boolean" infusion_pumps_th nil) (per_decr const-decl "boolean" infusion_pumps_th nil) (per_incr const-decl "boolean" infusion_pumps_th nil) (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types nil) (posreal_plus_nnreal_is_posreal application-judgement "posreal" real_types nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (timeout const-decl "itimes" infusion_pumps_th nil) (update_panel const-decl "d_state" infusion_pumps_th nil) (tick const-decl "d_state" infusion_pumps_th nil) (c_d_per_action const-decl "boolean" ICE_templates_rsce_th nil) (consistent_coordinator_d const-decl "boolean" ICE_templates_rsce_th nil) (filter_panel const-decl "panel" coord_t_and_c_th nil) (available_act const-decl "panel" infusion_pumps_th nil) (fun_pause const-decl "d_state" infusion_pumps_th nil) (fun_infuse const-decl "d_state" infusion_pumps_th nil) (fun_chooserate const-decl "d_state" infusion_pumps_th nil) (fun_choosevtbi const-decl "d_state" infusion_pumps_th nil) (fun_choosetime const-decl "d_state" infusion_pumps_th nil) (fun_confirm const-decl "d_state" infusion_pumps_th nil) (fun_bolus const-decl "d_state" infusion_pumps_th nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (fun_decr const-decl "d_state" infusion_pumps_th nil) (fun_ip const-decl "d_state" infusion_pumps_th nil) (fun_incr const-decl "d_state" infusion_pumps_th nil) (upd_pan const-decl "panel" infusion_pumps_th nil) (execute_ip const-decl "d_state" infusion_pumps_th nil) (tick_vs const-decl "v_state" vital_signs_th nil) (available_act const-decl "panel" vital_signs_th nil)) shostak))("ICE_templates" ICE_templates_th c_comp_c_d_per_action_hold 0 (c_comp_c_d_per_action_hold-1 nil 3862391262 ("" (skosimp*) (("" (beta) (("" (flatten) (("" (lemma "lemma_cd_fun_act_ip" ("a" "a!1" "p" "p!1" "d" "d!1" "st" "st!1")) (("" (beta -1) (("" (split -1) (("1" (flatten -1) (("1" (lemma "lemma_cd_fun_act_ip_coord" ("a" "a!1" "p" "p!1" "d" "d!1" "st" "st!1")) (("1" (beta -1) (("1" (split -1) (("1" (flatten -1) (("1" (lemma "c_consistent_actionnxdevdisp" ("a" "a!1" "d" "d!1" "p" "p!1" "st" "st!1")) (("1" (beta -1) (("1" (split -1) (("1" (flatten -1) (("1" (assert) (("1" (expand "c_d_per_action" 31) (("1" (replace -23 31) (("1" (replace -24 31) (("1" (replace -77 31) (("1" (replace -78 31) (("1" (replace -8 31) (("1" (beta 31) (("1" (replace -3 31) (("1" (expand "filter_panel" 31) (("1" (expand "available_act" 31) (("1" (assert) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil) ("3" (propax) nil nil) ("4" (assert) nil nil) ("5" (assert) nil nil) ("6" (assert) nil nil) ("7" (assert) nil nil) ("8" (assert) nil nil) ("9" (assert) nil nil) ("10" (propax) nil nil) ("11" (assert) nil nil) ("12" (propax) nil nil) ("13" (propax) nil nil) ("14" (assert) nil nil) ("15" (assert) nil nil) ("16" (assert) nil nil) ("17" (assert) nil nil) ("18" (assert) nil nil) ("19" (assert) nil nil) ("20" (assert) nil nil) ("21" (assert) nil nil) ("22" (propax) nil nil) ("23" (assert) nil nil) ("24" (propax) nil nil) ("25" (propax) nil nil) ("26" (propax) nil nil) ("27" (propax) nil nil) ("28" (assert) nil nil) ("29" (propax) nil nil) ("30" (assert) nil nil) ("31" (propax) nil nil) ("32" (propax) nil nil) ("33" (assert) nil nil) ("34" (assert) nil nil) ("35" (propax) nil nil) ("36" (assert) nil nil) ("37" (assert) nil nil) ("38" (assert) nil nil) ("39" (propax) nil nil) ("40" (assert) nil nil) ("41" (assert) nil nil) ("42" (propax) nil nil) ("43" (propax) nil nil) ("44" (propax) nil nil) ("45" (propax) nil nil) ("46" (propax) nil nil) ("47" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil) ("3" (propax) nil nil) ("4" (assert) nil nil) ("5" (assert) nil nil) ("6" (assert) nil nil) ("7" (assert) nil nil) ("8" (assert) nil nil) ("9" (assert) nil nil) ("10" (propax) nil nil) ("11" (assert) nil nil) ("12" (propax) nil nil) ("13" (propax) nil nil) ("14" (assert) nil nil) ("15" (assert) nil nil) ("16" (assert) nil nil) ("17" (assert) nil nil) ("18" (assert) nil nil) ("19" (assert) nil nil) ("20" (assert) nil nil) ("21" (assert) nil nil) ("22" (propax) nil nil) ("23" (assert) nil nil) ("24" (propax) nil nil) ("25" (propax) nil nil) ("26" (propax) nil nil) ("27" (propax) nil nil) ("28" (assert) nil nil) ("29" (propax) nil nil) ("30" (assert) nil nil) ("31" (propax) nil nil) ("32" (propax) nil nil) ("33" (assert) nil nil) ("34" (assert) nil nil) ("35" (propax) nil nil) ("36" (assert) nil nil) ("37" (assert) nil nil) ("38" (assert) nil nil) ("39" (propax) nil nil) ("40" (assert) nil nil) ("41" (propax) nil nil) ("42" (propax) nil nil) ("43" (propax) nil nil) ("44" (assert) nil nil) ("45" (propax) nil nil) ("46" (propax) nil nil) ("47" (assert) (("47" (expand "c_d_per_action" -64) (("47" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil) ("3" (propax) nil nil) ("4" (assert) nil nil) ("5" (assert) nil nil) ("6" (assert) nil nil) ("7" (assert) nil nil) ("8" (assert) nil nil) ("9" (assert) nil nil) ("10" (propax) nil nil) ("11" (assert) nil nil) ("12" (propax) nil nil) ("13" (propax) nil nil) ("14" (assert) nil nil) ("15" (assert) nil nil) ("16" (assert) nil nil) ("17" (assert) nil nil) ("18" (assert) nil nil) ("19" (assert) nil nil) ("20" (assert) nil nil) ("21" (assert) nil nil) ("22" (propax) nil nil) ("23" (assert) nil nil) ("24" (propax) nil nil) ("25" (propax) nil nil) ("26" (propax) nil nil) ("27" (propax) nil nil) ("28" (assert) nil nil) ("29" (propax) nil nil) ("30" (assert) nil nil) ("31" (propax) nil nil) ("32" (propax) nil nil) ("33" (assert) nil nil) ("34" (assert) nil nil) ("35" (propax) nil nil) ("36" (assert) nil nil) ("37" (assert) nil nil) ("38" (assert) nil nil) ("39" (propax) nil nil) ("40" (assert) nil nil) ("41" (propax) nil nil) ("42" (propax) nil nil) ("43" (propax) nil nil) ("44" (assert) nil nil) ("45" (propax) nil nil) ("46" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((maxtime formal-const-decl "{maxtime: posnat | maxinfuse <= maxtime}" ICE_templates_th nil) (<= const-decl "bool" reals nil) (maxinfuse formal-const-decl "posnat" ICE_templates_th nil) (maxrate formal-const-decl "posnat" ICE_templates_th nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (state type-eq-decl nil system_th nil) (node_to_patient type-eq-decl nil system_th nil) (patients_type type-eq-decl nil patient_th nil) (patient_db_type type-eq-decl nil system_th nil) (patient_mn_type type-eq-decl nil system_th nil) (n_state type-eq-decl nil node_th nil) (node_to_pd type-eq-decl nil system_th nil) (i_state type-eq-decl nil coordinator_th nil) (coord_menu.menu_type type-eq-decl nil system_th nil) (patient type-eq-decl nil patient_th nil) (device type-eq-decl nil devices_th nil) (nlimit const-decl "nat" coord_t_and_c_th nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (action_id type-decl nil coord_t_and_c_th nil) (lemma_cd_fun_act_ip formula-decl nil ICE_templates_rsce_th nil) (lemma_cd_fun_act_ip_coord formula-decl nil ICE_templates_rsce_th nil) (c_consistent_actionnxdevdisp formula-decl nil ICE_templates_rsce_th nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (available_act const-decl "panel" infusion_pumps_th nil) (filter_panel const-decl "panel" coord_t_and_c_th nil) (c_d_per_action const-decl "boolean" ICE_templates_rsce_th nil)) shostak))("ICE_templates" ICE_templates_th c_comp_c_d_per_action_confirm 0 (c_comp_c_d_per_action_confirm-1 nil 3862389420 ("" (skosimp*) (("" (beta) (("" (flatten) (("" (lemma "lemma_cd_fun_act_xx" ("a" "a!1" "p" "p!1" "d" "d!1" "st" "st!1")) (("" (beta -1) (("" (split -1) (("1" (flatten -1) (("1" (lemma "c_consistent_actionnxdevdisp" ("a" "a!1" "d" "d!1" "p" "p!1" "st" "st!1")) (("1" (beta -1) (("1" (split -1) (("1" (flatten -1) (("1" (assert) (("1" (expand "c_d_per_action" 40) (("1" (replace -20 40) (("1" (replace -21 40) (("1" (replace -94 40) (("1" (replace -95 40) (("1" (replace -3 40) (("1" (replace -28 40) (("1" (expand "filter_panel" 40) (("1" (expand "available_act" 40) (("1" (assert) (("1" (split 40) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil) ("3" (propax) nil nil) ("4" (assert) nil nil) ("5" (assert) nil nil) ("6" (assert) nil nil) ("7" (assert) nil nil) ("8" (assert) nil nil) ("9" (assert) nil nil) ("10" (propax) nil nil) ("11" (assert) nil nil) ("12" (propax) nil nil) ("13" (propax) nil nil) ("14" (assert) nil nil) ("15" (assert) nil nil) ("16" (assert) nil nil) ("17" (assert) nil nil) ("18" (assert) nil nil) ("19" (assert) nil nil) ("20" (assert) nil nil) ("21" (assert) nil nil) ("22" (propax) nil nil) ("23" (assert) nil nil) ("24" (propax) nil nil) ("25" (propax) nil nil) ("26" (propax) nil nil) ("27" (propax) nil nil) ("28" (assert) nil nil) ("29" (propax) nil nil) ("30" (assert) nil nil) ("31" (propax) nil nil) ("32" (propax) nil nil) ("33" (assert) nil nil) ("34" (assert) nil nil) ("35" (propax) nil nil) ("36" (assert) nil nil) ("37" (assert) nil nil) ("38" (assert) nil nil) ("39" (propax) nil nil) ("40" (assert) nil nil) ("41" (assert) nil nil) ("42" (propax) nil nil) ("43" (propax) nil nil) ("44" (propax) nil nil) ("45" (propax) nil nil) ("46" (propax) nil nil) ("47" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil) ("3" (propax) nil nil) ("4" (assert) nil nil) ("5" (assert) nil nil) ("6" (assert) nil nil) ("7" (assert) nil nil) ("8" (assert) nil nil) ("9" (assert) nil nil) ("10" (propax) nil nil) ("11" (assert) nil nil) ("12" (propax) nil nil) ("13" (propax) nil nil) ("14" (assert) nil nil) ("15" (assert) nil nil) ("16" (assert) nil nil) ("17" (assert) nil nil) ("18" (assert) nil nil) ("19" (assert) nil nil) ("20" (assert) nil nil) ("21" (assert) nil nil) ("22" (propax) nil nil) ("23" (assert) nil nil) ("24" (propax) nil nil) ("25" (propax) nil nil) ("26" (propax) nil nil) ("27" (propax) nil nil) ("28" (assert) nil nil) ("29" (propax) nil nil) ("30" (assert) nil nil) ("31" (propax) nil nil) ("32" (propax) nil nil) ("33" (assert) nil nil) ("34" (assert) nil nil) ("35" (propax) nil nil) ("36" (assert) nil nil) ("37" (assert) nil nil) ("38" (assert) nil nil) ("39" (propax) nil nil) ("40" (assert) nil nil) ("41" (propax) nil nil) ("42" (propax) nil nil) ("43" (propax) nil nil) ("44" (assert) nil nil) ("45" (propax) nil nil) ("46" (propax) nil nil) ("47" (expand "c_d_per_action" -61) (("47" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((maxtime formal-const-decl "{maxtime: posnat | maxinfuse <= maxtime}" ICE_templates_th nil) (<= const-decl "bool" reals nil) (maxinfuse formal-const-decl "posnat" ICE_templates_th nil) (maxrate formal-const-decl "posnat" ICE_templates_th nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (state type-eq-decl nil system_th nil) (node_to_patient type-eq-decl nil system_th nil) (patients_type type-eq-decl nil patient_th nil) (patient_db_type type-eq-decl nil system_th nil) (patient_mn_type type-eq-decl nil system_th nil) (n_state type-eq-decl nil node_th nil) (node_to_pd type-eq-decl nil system_th nil) (i_state type-eq-decl nil coordinator_th nil) (coord_menu.menu_type type-eq-decl nil system_th nil) (patient type-eq-decl nil patient_th nil) (device type-eq-decl nil devices_th nil) (nlimit const-decl "nat" coord_t_and_c_th nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (action_id type-decl nil coord_t_and_c_th nil) (lemma_cd_fun_act_xx formula-decl nil ICE_templates_rsce_th nil) (c_consistent_actionnxdevdisp formula-decl nil ICE_templates_rsce_th nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (filter_panel const-decl "panel" coord_t_and_c_th nil) (available_act const-decl "panel" infusion_pumps_th nil) (c_d_per_action const-decl "boolean" ICE_templates_rsce_th nil)) shostak))("ICE_patient_int" p_interface_th p_base_case 0 (p_base_case-1 nil 3877412241 ("" (skosimp*) (("" (beta) (("" (flatten) (("" (lemma "p_enter_sel_men_pump_st" ("p" "p!1" "d" "d!1")) (("" (beta -1) (("" (split -1) (("1" (split 3) (("1" (expand "connect_pump_device_patient" 1) (("1" (lift-if 1) (("1" (split 1) (("1" (flatten 1) (("1" (assert) (("1" (expand "enter_pump_new_device" -1) (("1" (replace -1 3) (("1" (expand "init_state" 3) (("1" (expand "connect_patient_coord" 3) (("1" (expand "init_p_state" 3) (("1" (expand "connect_new_element" 3) (("1" (expand "connect_to_coordinator" 3) (("1" (expand "p_ent_new_device" 3) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (expand "connect_pump_device_patient" 1) (("2" (lift-if 1) (("2" (split 1) (("1" (flatten 1) (("1" (expand "enter_pump_new_device" -1) (("1" (replace -1 3) (("1" (expand "init_state" 3) (("1" (expand "connect_patient_coord" 3) (("1" (expand "init_p_state" 3) (("1" (assert) (("1" (expand "connect_new_element" 3) (("1" (expand "connect_to_coordinator" 3) (("1" (expand "p_ent_new_device" 3) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("3" (expand "connect_pump_device_patient" 1) (("3" (lift-if 1) (("3" (split 1) (("1" (flatten 1) (("1" (expand "enter_pump_new_device" -1) (("1" (replace -1 3) (("1" (expand "init_state" 3) (("1" (expand "connect_patient_coord" 3) (("1" (expand "init_p_state" 3) (("1" (assert) (("1" (expand "connect_new_element" 3) (("1" (expand "connect_to_coordinator" 3) (("1" (expand "p_ent_new_device" 3) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil) ("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((device type-eq-decl nil devices_th nil) (patient type-eq-decl nil patient_th nil) (maxtime formal-const-decl "{maxtime: posnat | maxinfuse <= maxtime}" p_interface_th nil) (maxinfuse formal-const-decl "posnat" p_interface_th nil) (maxrate formal-const-decl "posnat" p_interface_th nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nlimit const-decl "nat" coord_t_and_c_th nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (p_enter_sel_men_pump_st formula-decl nil p_interface_th nil) (connect_pump_device_patient const-decl "state" p_interface_th nil) (connect_patient_coord const-decl "state" p_interface_th nil) (connect_new_element const-decl "state" system_th nil) (p_ent_new_device const-decl "p_state" patient_th nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (finite_emptyset name-judgement "finite_set" finite_sets nil) (nonempty_add_finite application-judgement "non_empty_finite_set" finite_sets nil) (connect_device_to_patient const-decl "state" system_th nil) (update_patient_device_alarm_disp const-decl "i_state" coordinator_th nil) (add_nde_patient_device const-decl "p_state" patient_th nil) (c_d_t_patient const-decl "i_state" coordinator_th nil) (member const-decl "bool" sets nil) (p_complete_device_p const-decl "p_state" patient_th nil) (p_complete_device const-decl "p_state" patient_th nil) (p_device const-decl "p_state" patient_th nil) (p_device_entry const-decl "p_state" patient_th nil) (patient_menu_act const-decl "state" system_th nil) (patient_menu.act_menu const-decl "p_state[maxrate, maxinfuse, maxtime]" system_th nil) (p_enter const-decl "p_state" patient_th nil) (init_patient_menu const-decl "patient_mn_type" system_th nil) (edit_none_menu const-decl "menu_set" patient_th nil) (patient_enter_device_name const-decl "state" system_th nil) (p_enter_name const-decl "p_state" patient_th nil) (change_ps_menu const-decl "p_state" patient_th nil) (update_patient_alarm_disp const-decl "i_state" coordinator_th nil) (include_patient const-decl "i_state" coordinator_th nil) (emptyset const-decl "set" sets nil) (update_n_graph const-decl "n_state" node_th nil) (increment_node const-decl "node" node_th nil) (init_i_state const-decl "i_state" coordinator_th nil) (empty_config const-decl "patient_config" coordinator_th nil) (empty_device_display const-decl "disp_device_type" coordinator_th nil) (empty_patient_display const-decl "disp_patient_type" coordinator_th nil) (empty_alarm_disp const-decl "disp_alarm_type" coordinator_th nil) (empty_top_display const-decl "coord_disp_top_type" coordinator_th nil) (empty_entry_window const-decl "coord_entry_window_type" coordinator_th nil) (coord_node const-decl "node" node_th nil) (init_d_state const-decl "d_state" infusion_pumps_th nil) (init_ip_panel const-decl "panel" infusion_pumps_th nil) (init_vs const-decl "v_state" vital_signs_th nil) (init_vs_panel const-decl "panel" vital_signs_th nil) (enum_par const-decl "boolean" coord_t_and_c_th nil) (no_num const-decl "nonneg_real" coord_t_and_c_th nil) (num_par const-decl "boolean" coord_t_and_c_th nil) (empty_constraint_setup const-decl "constraint_setup_type" patient_th nil) (init_constraint const-decl "constraint_type" patient_th nil) (null_ec const-decl "enum_constraint_type" patient_th nil) (null_nc const-decl "num_constraint_type" patient_th nil) (d_bot const-decl "device" devices_th nil) (init_rule_setup const-decl "rule_setup_type" patient_th nil) (init_panel_display const-decl "coord_panel_setup_type" patient_th nil) (init_disp_main const-decl "p_disp_main_type" patient_th nil) (init_disp_top const-decl "p_disp_top_type" patient_th nil) (empty_entry_window const-decl "p_entry_window_type" patient_th nil) (null_value const-decl "posnat" coord_t_and_c_th nil) (mindex const-decl "nat" coord_t_and_c_th nil) (undef_device const-decl "devs_type" devices_th nil) (nil_pd const-decl "patient_to_device" system_th nil) (init_n_state const-decl "n_state" node_th nil) (empty_act_q const-decl "act_q_type" node_th nil) (empty_pan_q const-decl "pan_q_type" node_th nil) (empty_act_msg const-decl "act_message_type" node_th nil) (empty_pan_msg const-decl "pan_message_type" node_th nil) (empty_panel const-decl "panel" coord_t_and_c_th nil) (no_node const-decl "node" node_th nil) (root_node const-decl "node" node_th nil) (nil_device const-decl "device" devices_th nil) (dlimit const-decl "nat" coord_t_and_c_th nil) (p_null const-decl "patient" patient_th nil) (plimit const-decl "nat" coord_t_and_c_th nil) (connect_to_coordinator const-decl "state" system_th nil) (init_p_state const-decl "p_state" patient_th nil) (init_state const-decl "state" system_th nil) (enter_pump_new_device const-decl "state" p_interface_th nil)) shostak))("ICE_patient_int" p_interface_th p_enter_sel_men_pump 0 (p_enter_sel_men_pump-1 nil 3877157497 ("" (skosimp*) (("" (beta) (("" (flatten) (("" (assert) (("" (expand "init_state" 3) (("" (expand "init_p_state" 3) (("" (expand "p_ent_new_device") (("" (assert) (("" (expand "init_disp_top") (("" (expand "enter_pump_new_device") (("" (expand "patient_enter_device_name") (("" (expand "patient_menu_act") (("" (expand "p_enter_name") (("" (expand "act_menu") (("" (lift-if) (("" (split) (("1" (flatten) (("1" (lift-if) (("1" (split) (("1" (flatten) (("1" (lift-if) (("1" (split) (("1" (flatten) (("1" (expand "init_patient_menu") (("1" (expand "p_enter") (("1" (expand "change_ps_menu" 1) (("1" (expand "p_device" 1) (("1" (expand "p_device_entry" 1) (("1" (expand "change_ps_menu" 1) (("1" (expand "p_complete_device_p" 1) (("1" (expand "p_complete_device" 1) (("1" (expand "change_ps_menu" 1) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "init_patient_menu" 1) (("2" (expand "p_enter" 1) (("2" (expand "change_ps_menu" 1) (("2" (expand "p_device" 1) (("2" (expand "p_device_entry" 1) (("2" (expand "change_ps_menu" 1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "init_patient_menu" 1) (("2" (expand "p_enter" 1) (("2" (expand "change_ps_menu" 1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((init_p_state const-decl "p_state" patient_th nil) (finite_emptyset name-judgement "finite_set" finite_sets nil) (enter_pump_new_device const-decl "state" p_interface_th nil) (patient_menu_act const-decl "state" system_th nil) (patient_menu.act_menu const-decl "p_state[maxrate, maxinfuse, maxtime]" system_th nil) (init_patient_menu const-decl "patient_mn_type" system_th nil) (change_ps_menu const-decl "p_state" patient_th nil) (p_device_entry const-decl "p_state" patient_th nil) (p_complete_device_p const-decl "p_state" patient_th nil) (maxtime formal-const-decl "{maxtime: posnat | maxinfuse <= maxtime}" p_interface_th nil) (<= const-decl "bool" reals nil) (maxinfuse formal-const-decl "posnat" p_interface_th nil) (maxrate formal-const-decl "posnat" p_interface_th nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (root_node const-decl "node" node_th nil) (nlimit const-decl "nat" coord_t_and_c_th nil) (no_node const-decl "node" node_th nil) (empty_panel const-decl "panel" coord_t_and_c_th nil) (empty_pan_msg const-decl "pan_message_type" node_th nil) (empty_act_msg const-decl "act_message_type" node_th nil) (empty_pan_q const-decl "pan_q_type" node_th nil) (empty_act_q const-decl "act_q_type" node_th nil) (init_n_state const-decl "n_state" node_th nil) (plimit const-decl "nat" coord_t_and_c_th nil) (p_null const-decl "patient" patient_th nil) (dlimit const-decl "nat" coord_t_and_c_th nil) (nil_device const-decl "device" devices_th nil) (nil_pd const-decl "patient_to_device" system_th nil) (undef_device const-decl "devs_type" devices_th nil) (mindex const-decl "nat" coord_t_and_c_th nil) (null_value const-decl "posnat" coord_t_and_c_th nil) (empty_entry_window const-decl "p_entry_window_type" patient_th nil) (init_disp_main const-decl "p_disp_main_type" patient_th nil) (init_panel_display const-decl "coord_panel_setup_type" patient_th nil) (init_rule_setup const-decl "rule_setup_type" patient_th nil) (d_bot const-decl "device" devices_th nil) (null_nc const-decl "num_constraint_type" patient_th nil) (null_ec const-decl "enum_constraint_type" patient_th nil) (init_constraint const-decl "constraint_type" patient_th nil) (empty_constraint_setup const-decl "constraint_setup_type" patient_th nil) (num_par const-decl "boolean" coord_t_and_c_th nil) (no_num const-decl "nonneg_real" coord_t_and_c_th nil) (enum_par const-decl "boolean" coord_t_and_c_th nil) (init_vs_panel const-decl "panel" vital_signs_th nil) (init_vs const-decl "v_state" vital_signs_th nil) (init_ip_panel const-decl "panel" infusion_pumps_th nil) (init_d_state const-decl "d_state" infusion_pumps_th nil) (coord_node const-decl "node" node_th nil) (empty_entry_window const-decl "coord_entry_window_type" coordinator_th nil) (empty_top_display const-decl "coord_disp_top_type" coordinator_th nil) (empty_alarm_disp const-decl "disp_alarm_type" coordinator_th nil) (empty_patient_display const-decl "disp_patient_type" coordinator_th nil) (empty_device_display const-decl "disp_device_type" coordinator_th nil) (empty_config const-decl "patient_config" coordinator_th nil) (init_i_state const-decl "i_state" coordinator_th nil) (increment_node const-decl "node" node_th nil) (update_n_graph const-decl "n_state" node_th nil) (emptyset const-decl "set" sets nil) (include_patient const-decl "i_state" coordinator_th nil) (update_patient_alarm_disp const-decl "i_state" coordinator_th nil) (connect_to_coordinator const-decl "state" system_th nil) (connect_new_element const-decl "state" system_th nil) (m_connect_patient_coord const-decl "state" p_interface_th nil) (p_escape const-decl "p_state" patient_th nil) (edit_none_menu const-decl "menu_set" patient_th nil) (per_d_select const-decl "boolean" patient_th nil) (p_select_d_mode const-decl "p_state" patient_th nil) (p_select_display_mode const-decl "p_state" patient_th nil) (per_p_edit const-decl "boolean" patient_th nil) (p_edit_device const-decl "p_state" patient_th nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (p_complete_device const-decl "p_state" patient_th nil) (p_device const-decl "p_state" patient_th nil) (p_enter const-decl "p_state" patient_th nil) (p_enter_name const-decl "p_state" patient_th nil) (patient_enter_device_name const-decl "state" system_th nil) (init_disp_top const-decl "p_disp_top_type" patient_th nil) (p_ent_new_device const-decl "p_state" patient_th nil) (init_state const-decl "state" system_th nil)) shostak))("ICE_patient_int" p_interface_th p_enter_sel_men_pump_filter 0 (p_enter_sel_men_pump_filter-1 nil 3878106731 ("" (skosimp*) (("" (beta) (("" (flatten) (("" (assert) (("" (expand "init_state" 3) (("" (expand "init_p_state" 3) (("" (expand "p_ent_new_device") (("" (assert) (("" (expand "init_disp_top") (("" (expand "enter_pump_new_device") (("" (expand "patient_enter_device_name") (("" (expand "patient_menu_act") (("" (expand "p_enter_name") (("" (expand "act_menu") (("" (lift-if) (("" (split) (("1" (flatten) (("1" (lift-if) (("1" (split) (("1" (flatten) (("1" (lift-if) (("1" (split) (("1" (flatten) (("1" (expand "init_patient_menu") (("1" (expand "p_enter") (("1" (expand "change_ps_menu" 1) (("1" (expand "p_device" 1) (("1" (expand "p_device_entry" 1) (("1" (expand "change_ps_menu" 1) (("1" (expand "p_complete_device_p" 1) (("1" (expand "p_complete_device" 1) (("1" (expand "change_ps_menu" 1) (("1" (expand "fsp_state") (("1" (expand "pdtp_state" 1) (("1" (split) (("1" (postpone) nil nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil) ("4" (postpone) nil nil) ("5" (postpone) nil nil) ("6" (postpone) nil nil) ("7" (postpone) nil nil) ("8" (postpone) nil nil) ("9" (postpone) nil nil) ("10" (postpone) nil nil) ("11" (postpone) nil nil) ("12" (postpone) nil nil) ("13" (postpone) nil nil) ("14" (postpone) nil nil) ("15" (postpone) nil nil) ("16" (postpone) nil nil) ("17" (postpone) nil nil) ("18" (postpone) nil nil) ("19" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) (nil (init_state const-decl "state" system_th nil) (connect_new_element const-decl "state" system_th nil) (p_ent_new_device const-decl "p_state" patient_th nil) (finite_emptyset name-judgement "finite_set" finite_sets nil) (enter_pump_new_device const-decl "state" p_interface_th nil) (patient_menu_act const-decl "state" system_th nil) (patient_menu.act_menu const-decl "p_state[maxrate, maxinfuse, maxtime]" system_th nil) (init_patient_menu const-decl "patient_mn_type" system_th nil) (p_device_entry const-decl "p_state" patient_th nil) (p_complete_device_p const-decl "p_state" patient_th nil) (pdtp_state const-decl "boolean" p_interface_th nil) (fsp_state const-decl "boolean" p_interface_th nil) (p_complete_device const-decl "p_state" patient_th nil) (p_device const-decl "p_state" patient_th nil) (p_enter const-decl "p_state" patient_th nil) (edit_none_menu const-decl "menu_set" patient_th nil) (p_enter_name const-decl "p_state" patient_th nil) (patient_enter_device_name const-decl "state" system_th nil) (init_disp_top const-decl "p_disp_top_type" patient_th nil) (change_ps_menu const-decl "p_state" patient_th nil) (connect_to_coordinator const-decl "state" system_th nil) (init_p_state const-decl "p_state" patient_th nil)) shostak))("ICE_patient_int" p_interface_th p_enter_sel_men_pump_st 0 (p_enter_sel_men_pump_st-1 nil 3877413883 ("" (skosimp*) (("" (beta) (("" (assert) (("" (flatten) (("" (expand "connect_patient_coord" 3) (("" (assert) (("" (expand "init_state" 3) (("" (expand "init_p_state" 3) (("" (expand "connect_new_element" 3) (("" (expand "connect_to_coordinator" 3) (("" (expand "p_ent_new_device") (("" (expand "change_ps_menu") (("" (assert) (("" (expand "init_disp_top") (("" (expand "enter_pump_new_device") (("" (expand "patient_enter_device_name") (("" (expand "patient_menu_act") (("" (expand "p_enter_name") (("" (expand "act_menu") (("" (apply-extensionality 3) (("" (lift-if) (("" (split) (("1" (flatten) (("1" (split) (("1" (flatten) (("1" (lift-if) (("1" (split) (("1" (flatten) (("1" (lift-if) (("1" (split) (("1" (flatten) (("1" (expand "init_patient_menu" 1) (("1" (expand "p_enter") (("1" (expand "change_ps_menu" 1) (("1" (expand "p_device" 1) (("1" (expand "p_device_entry" 1) (("1" (expand "change_ps_menu" 1) (("1" (expand "p_complete_device_p" 1) (("1" (expand "p_complete_device" 1) (("1" (expand "change_ps_menu" 1) (("1" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "init_patient_menu" 1) (("2" (expand "p_enter" 1) (("2" (expand "change_ps_menu" 1) (("2" (expand "p_device" 1) (("2" (expand "p_device_entry" 1) (("2" (expand "change_ps_menu" 1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "init_patient_menu" 1) (("2" (expand "p_enter" 1) (("2" (expand "change_ps_menu" 1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "edit_none_menu" 1) (("2" (propax) nil nil)) nil)) nil)) nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((init_p_state const-decl "p_state" patient_th nil) (connect_to_coordinator const-decl "state" system_th nil) (change_ps_menu const-decl "p_state" patient_th nil) (init_disp_top const-decl "p_disp_top_type" patient_th nil) (patient_enter_device_name const-decl "state" system_th nil) (p_enter_name const-decl "p_state" patient_th nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (nlimit const-decl "nat" coord_t_and_c_th nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (maxrate formal-const-decl "posnat" p_interface_th nil) (maxinfuse formal-const-decl "posnat" p_interface_th nil) (maxtime formal-const-decl "{maxtime: posnat | maxinfuse <= maxtime}" p_interface_th nil) (patient type-eq-decl nil patient_th nil) (disp_focus_type type-decl nil coord_t_and_c_th nil) (patient_edit_type type-decl nil coord_t_and_c_th nil) (dpanel_type type-eq-decl nil patient_th nil) (p_dstates type-eq-decl nil patient_th nil) (node type-eq-decl nil node_th nil) (patient_mode_type type-decl nil coord_t_and_c_th nil) (menu type-decl nil coord_t_and_c_th nil) (menu_set type-eq-decl nil coord_t_and_c_th nil) (constraint_setup_type type-eq-decl nil patient_th nil) (panel type-eq-decl nil coord_t_and_c_th nil) (p_disp_main_type type-eq-decl nil patient_th nil) (p_disp_top_type type-eq-decl nil patient_th nil) (p_entry_window_type type-eq-decl nil patient_th nil) (coord_panel_setup_type type-eq-decl nil patient_th nil) (rule_setup_type type-eq-decl nil patient_th nil) (patient_constraint_type type-eq-decl nil devices_th nil) (v_state type-eq-decl nil vital_signs_th nil) (p_state type-eq-decl nil patient_th nil) (infusion_pump adt-constructor-decl "(infusion_pump?)" devices_th nil) (infusion_pump? adt-recognizer-decl "[device_type -> boolean]" devices_th nil) (vs_device adt-constructor-decl "(vs_device?)" coord_t_and_c_th nil) (vs_device? adt-recognizer-decl "[menu -> boolean]" coord_t_and_c_th nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (error adt-constructor-decl "(error?)" coord_t_and_c_th nil) (error? adt-recognizer-decl "[patient_mode_type -> boolean]" coord_t_and_c_th nil) (no_node const-decl "node" node_th nil) (p_null const-decl "patient" patient_th nil) (pump adt-constructor-decl "(pump?)" coord_t_and_c_th nil) (pump? adt-recognizer-decl "[menu -> boolean]" coord_t_and_c_th nil) (device adt-constructor-decl "(device?)" coord_t_and_c_th nil) (device? adt-recognizer-decl "[menu -> boolean]" coord_t_and_c_th nil) (init_d_state const-decl "d_state" infusion_pumps_th nil) (d_state type-eq-decl nil infusion_pumps_th nil) (ivols type-eq-decl nil coord_t_and_c_th nil) (irates type-eq-decl nil coord_t_and_c_th nil) (priority_type type-decl nil coord_t_and_c_th nil) (mode type-decl nil coord_t_and_c_th nil) (dispmode type-decl nil coord_t_and_c_th nil) (clamp_state type-decl nil coord_t_and_c_th nil) (itimes type-eq-decl nil coord_t_and_c_th nil) (init_vs const-decl "v_state" vital_signs_th nil) (empty_constraint_setup const-decl "constraint_setup_type" patient_th nil) (init_rule_setup const-decl "rule_setup_type" patient_th nil) (init_panel_display const-decl "coord_panel_setup_type" patient_th nil) (empty_panel const-decl "panel" coord_t_and_c_th nil) (parset type-eq-decl nil coord_t_and_c_th nil) (action_ids type-eq-decl nil coord_t_and_c_th nil) (init_disp_main const-decl "p_disp_main_type" patient_th nil) (main_act type-eq-decl nil devices_th nil) (main_num_par type-eq-decl nil devices_th nil) (main_enum_par type-eq-decl nil devices_th nil) (empty_num_parameter const-decl "num_parameter" coord_t_and_c_th nil) (num_parameter type-eq-decl nil coord_t_and_c_th nil) (empty_enum_parameter const-decl "enum_parameter" coord_t_and_c_th nil) (enum_parameter type-eq-decl nil coord_t_and_c_th nil) (no_device adt-constructor-decl "(no_device?)" devices_th nil) (no_device? adt-recognizer-decl "[device_type -> boolean]" devices_th nil) (undef_device const-decl "devs_type" devices_th nil) (device_type type-decl nil devices_th nil) (device type-eq-decl nil devices_th nil) (empty_entry_window const-decl "p_entry_window_type" patient_th nil) (rel_op_type type-decl nil coord_t_and_c_th nil) (par type-decl nil coord_t_and_c_th nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (nindex type-eq-decl nil coord_t_and_c_th nil) (enum type-decl nil coord_t_and_c_th nil) (devs_type type-eq-decl nil devices_th nil) (action_id type-decl nil coord_t_and_c_th nil) (init_rule const-decl "patient_constraint_type" patient_th nil) (rule_type type-eq-decl nil devices_th nil) (production_type type-eq-decl nil devices_th nil) (dev_act_type type-eq-decl nil devices_th nil) (cindex type-eq-decl nil coord_t_and_c_th nil) (climit const-decl "nat" coord_t_and_c_th nil) (emptyset const-decl "set" sets nil) (set type-eq-decl nil sets nil) (no_action adt-constructor-decl "(no_action?)" coord_t_and_c_th nil) (no_action? adt-recognizer-decl "[menu -> boolean]" coord_t_and_c_th nil) (no_focus adt-constructor-decl "(no_focus?)" coord_t_and_c_th nil) (no_focus? adt-recognizer-decl "[disp_focus_type -> boolean]" coord_t_and_c_th nil) (edit_none adt-constructor-decl "(edit_none?)" coord_t_and_c_th nil) (edit_none? adt-recognizer-decl "[patient_edit_type -> boolean]" coord_t_and_c_th nil) (top adt-constructor-decl "(top?:: [patient_mode_type -> boolean])" coord_t_and_c_th nil) (top? adt-recognizer-decl "[patient_mode_type -> boolean]" coord_t_and_c_th nil) (init_n_state const-decl "n_state" node_th nil) (n_state type-eq-decl nil node_th nil) (pan_msg_waiting_type type-eq-decl nil node_th nil) (connected type-eq-decl nil node_th nil) (network_error_type type-eq-decl nil node_th nil) (pan_message_type type-eq-decl nil node_th nil) (act_message_type type-eq-decl nil node_th nil) (act_msg_waiting_type type-eq-decl nil node_th nil) (init_patient_menu const-decl "patient_mn_type" system_th nil) (patient_mn_type type-eq-decl nil system_th nil) (enter adt-constructor-decl "(enter?)" coord_t_and_c_th nil) (enter? adt-recognizer-decl "[menu -> boolean]" coord_t_and_c_th nil) (edit_none_menu const-decl "menu_set" patient_th nil) (= const-decl "[T, T -> boolean]" equalities nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (p_device_entry const-decl "p_state" patient_th nil) (p_complete_device_p const-decl "p_state" patient_th nil) (p_complete_device const-decl "p_state" patient_th nil) (p_device const-decl "p_state" patient_th nil) (p_enter const-decl "p_state" patient_th nil) (patient_menu.act_menu const-decl "p_state[maxrate, maxinfuse, maxtime]" system_th nil) (patient_menu_act const-decl "state" system_th nil) (enter_pump_new_device const-decl "state" p_interface_th nil) (finite_emptyset name-judgement "finite_set" finite_sets nil) (p_ent_new_device const-decl "p_state" patient_th nil) (connect_new_element const-decl "state" system_th nil) (init_state const-decl "state" system_th nil) nil) shostak))("ICE_patient_int" p_interface_th p_enter_sel_men_pump_st_filter 0 (p_enter_sel_men_pump_st_filter-1 nil 3878107899 ("" (skosimp*) (("" (beta) (("" (assert) (("" (flatten) (("" (expand "connect_patient_coord" 3) (("" (assert) (("" (expand "init_state" 3) (("" (expand "init_p_state" 3) (("" (expand "connect_new_element" 3) (("" (expand "connect_to_coordinator" 3) (("" (expand "p_ent_new_device") (("" (expand "change_ps_menu") (("" (assert) (("" (expand "init_disp_top") (("" (expand "enter_pump_new_device") (("" (expand "patient_enter_device_name") (("" (expand "patient_menu_act") (("" (expand "p_enter_name") (("" (expand "act_menu") (("" (expand "filter_state_patient_station") (("" (lift-if) (("" (split) (("1" (flatten) (("1" (lift-if) (("1" (split) (("1" (flatten) (("1" (lift-if) (("1" (split) (("1" (flatten) (("1" (expand "fsp_state") (("1" (expand "init_patient_menu" 1) (("1" (expand "p_enter") (("1" (expand "change_ps_menu" 1) (("1" (expand "p_device" 1) (("1" (expand "p_device_entry" 1) (("1" (expand "change_ps_menu" 1) (("1" (expand "p_complete_device_p" 1) (("1" (expand "p_complete_device" 1) (("1" (expand "change_ps_menu" 1) (("1" (expand "pdtp_state" 1) (("1" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "init_patient_menu" 1) (("2" (expand "p_enter" 1) (("2" (expand "change_ps_menu" 1) (("2" (expand "p_device" 1) (("2" (expand "p_device_entry" 1) (("2" (expand "change_ps_menu" 1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "init_patient_menu" 1) (("2" (expand "p_enter" 1) (("2" (expand "change_ps_menu" 1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "edit_none_menu" 1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((init_p_state const-decl "p_state" patient_th nil) (connect_to_coordinator const-decl "state" system_th nil) (change_ps_menu const-decl "p_state" patient_th nil) (init_disp_top const-decl "p_disp_top_type" patient_th nil) (patient_enter_device_name const-decl "state" system_th nil) (p_enter_name const-decl "p_state" patient_th nil) (filter_state_patient_station const-decl "boolean" p_interface_th nil) (fsp_state const-decl "boolean" p_interface_th nil) (p_enter const-decl "p_state" patient_th nil) (p_device const-decl "p_state" patient_th nil) (p_complete_device const-decl "p_state" patient_th nil) (pdtp_state const-decl "boolean" p_interface_th nil) (p_complete_device_p const-decl "p_state" patient_th nil) (p_device_entry const-decl "p_state" patient_th nil) (init_patient_menu const-decl "patient_mn_type" system_th nil) (edit_none_menu const-decl "menu_set" patient_th nil) (patient_menu.act_menu const-decl "p_state[maxrate, maxinfuse, maxtime]" system_th nil) (patient_menu_act const-decl "state" system_th nil) (enter_pump_new_device const-decl "state" p_interface_th nil) (finite_emptyset name-judgement "finite_set" finite_sets nil) (p_ent_new_device const-decl "p_state" patient_th nil) (connect_new_element const-decl "state" system_th nil) (init_state const-decl "state" system_th nil) nil) shostak))("ICE_patient_int" p_interface_th connect_pump_lemma 0 (connect_pump_lemma-1 nil 3877756194 ("" (skosimp*) (("" (beta) (("" (flatten) (("" (expand "connect_pump_device_patient" 3) (("" (assert) (("" (expand "patient_enter_device_name" 3) (("" (expand "p_enter_name" 3) (("" (expand "patient_menu_act" 3) (("" (replace -6 3) (("" (expand "edit_none_menu" 3) (("" (expand "act_menu" 3) (("" (replace -1 3) (("" (expand "init_patient_menu" 3) (("" (expand "p_enter" 3) (("" (expand "change_ps_menu" 3) (("" (expand "p_device" 3) (("" (expand "p_device_entry" 3) (("" (expand "change_ps_menu" 3) (("" (expand "p_complete_device_p" 3) (("" (expand "p_complete_device" 3) (("" (expand "change_ps_menu" 3) (("" (expand "connect_new_element" 3) (("" (expand "change_ps_menu" 3) (("" (expand "connect_device_to_patient" 3) (("" (apply-extensionality 3) (("" (apply-extensionality 1) (("" (lift-if 1) (("" (split 1) (("1" (flatten 1) (("1" (expand "change_ps_menu" 1) (("1" (lift-if 1) (("1" (split 1) (("1" (flatten 1) (("1" (expand "add_nde_patient_device" 1) (("1" (apply-extensionality 1) nil nil)) nil)) nil) ("2" (flatten 1) (("2" (expand "add_nde_patient_device" 2) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) (nil (patient_enter_device_name const-decl "state" system_th nil) (patient_menu_act const-decl "state" system_th nil) (edit_none_menu const-decl "menu_set" patient_th nil) (p_enter const-decl "p_state" patient_th nil) (p_device const-decl "p_state" patient_th nil) (p_complete_device const-decl "p_state" patient_th nil) (connect_new_element const-decl "state" system_th nil) (connect_device_to_patient const-decl "state" system_th nil) (d_state type-eq-decl nil infusion_pumps_th nil) (ivols type-eq-decl nil coord_t_and_c_th nil) (irates type-eq-decl nil coord_t_and_c_th nil) (priority_type type-decl nil coord_t_and_c_th nil) (mode type-decl nil coord_t_and_c_th nil) (dispmode type-decl nil coord_t_and_c_th nil) (clamp_state type-decl nil coord_t_and_c_th nil) (itimes type-eq-decl nil coord_t_and_c_th nil) (parset type-eq-decl nil coord_t_and_c_th nil) (num_parameter type-eq-decl nil coord_t_and_c_th nil) (enum_parameter type-eq-decl nil coord_t_and_c_th nil) (action_ids type-eq-decl nil coord_t_and_c_th nil) (update_patient_alarm_disp const-decl "i_state" coordinator_th nil) (empty_panel const-decl "panel" coord_t_and_c_th nil) (/= const-decl "boolean" notequal nil) (member const-decl "bool" sets nil) (increment_node const-decl "node" node_th nil) (no_node const-decl "node" node_th nil) (nil_device const-decl "device" devices_th nil) (dlimit const-decl "nat" coord_t_and_c_th nil) (p_null const-decl "patient" patient_th nil) (plimit const-decl "nat" coord_t_and_c_th nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nlimit const-decl "nat" coord_t_and_c_th nil) (node type-eq-decl nil node_th nil) (act_msg_waiting_type type-eq-decl nil node_th nil) (act_message_type type-eq-decl nil node_th nil) (pan_message_type type-eq-decl nil node_th nil) (network_error_type type-eq-decl nil node_th nil) (connected type-eq-decl nil node_th nil) (pan_msg_waiting_type type-eq-decl nil node_th nil) (update_n_graph const-decl "n_state" node_th nil) (patient type-eq-decl nil patient_th nil) (device type-eq-decl nil devices_th nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (= const-decl "[T, T -> boolean]" equalities nil) (nw_error_type type-decl nil node_th nil) (coord_db_type type-eq-decl nil coordinator_th nil) (disp_alarm_type type-eq-decl nil coordinator_th nil) (disp_device_type type-eq-decl nil coordinator_th nil) (disp_focus_type type-decl nil coord_t_and_c_th nil) (disp_patient_type type-eq-decl nil coordinator_th nil) (coord_disp_top_type type-eq-decl nil coordinator_th nil) (coord_entry_window_type type-eq-decl nil coordinator_th nil) (patient_mode_type type-decl nil coord_t_and_c_th nil) (menu type-decl nil coord_t_and_c_th nil) (menu_set type-eq-decl nil coord_t_and_c_th nil) (update_patient_device_alarm_disp const-decl "i_state" coordinator_th nil) (device_type type-decl nil devices_th nil) (c_d_t_patient const-decl "i_state" coordinator_th nil) (infusion_pump? adt-recognizer-decl "[device_type -> boolean]" devices_th nil) (infusion_pump adt-constructor-decl "(infusion_pump?)" devices_th nil) (patient_edit_type type-decl nil coord_t_and_c_th nil) (dpanel_type type-eq-decl nil patient_th nil) (p_dstates type-eq-decl nil patient_th nil) (constraint_setup_type type-eq-decl nil patient_th nil) (panel type-eq-decl nil coord_t_and_c_th nil) (p_disp_main_type type-eq-decl nil patient_th nil) (p_disp_top_type type-eq-decl nil patient_th nil) (p_entry_window_type type-eq-decl nil patient_th nil) (coord_panel_setup_type type-eq-decl nil patient_th nil) (rule_setup_type type-eq-decl nil patient_th nil) (patient_constraint_type type-eq-decl nil devices_th nil) (v_state type-eq-decl nil vital_signs_th nil) (p_state type-eq-decl nil patient_th nil) (add_nde_patient_device const-decl "p_state" patient_th nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (pump? adt-recognizer-decl "[menu -> boolean]" coord_t_and_c_th nil) (pump adt-constructor-decl "(pump?)" coord_t_and_c_th nil) (vs_device? adt-recognizer-decl "[menu -> boolean]" coord_t_and_c_th nil) (vs_device adt-constructor-decl "(vs_device?)" coord_t_and_c_th nil) (state type-eq-decl nil system_th nil) (node_to_patient type-eq-decl nil system_th nil) (patients_type type-eq-decl nil patient_th nil) (patient_db_type type-eq-decl nil system_th nil) (patient_mn_type type-eq-decl nil system_th nil) (n_state type-eq-decl nil node_th nil) (node_to_pd type-eq-decl nil system_th nil) (i_state type-eq-decl nil coordinator_th nil) (coord_menu.menu_type type-eq-decl nil system_th nil) (maxtime formal-const-decl "{maxtime: posnat | maxinfuse <= maxtime}" p_interface_th nil) (<= const-decl "bool" reals nil) (maxinfuse formal-const-decl "posnat" p_interface_th nil) (maxrate formal-const-decl "posnat" p_interface_th nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (p_complete_device_p const-decl "p_state" patient_th nil) (p_device_entry const-decl "p_state" patient_th nil) (change_ps_menu const-decl "p_state" patient_th nil) (init_patient_menu const-decl "patient_mn_type" system_th nil) (patient_menu.act_menu const-decl "p_state[maxrate, maxinfuse, maxtime]" system_th nil) (p_enter_name const-decl "p_state" patient_th nil)) shostak))("ICE_patient_int" p_interface_th connect_pump_lemma_filter 0 (connect_pump_lemma_filter-1 nil 3878108781 ("" (skosimp*) (("" (beta) (("" (flatten) (("" (expand "connect_pump_device_patient" 3) (("" (assert) (("" (expand "patient_enter_device_name" 3) (("" (expand "p_enter_name" 3) (("" (expand "patient_menu_act" 3) (("" (replace -6 3) (("" (expand "edit_none_menu" 3) (("" (expand "act_menu" 3) (("" (replace -1 3) (("" (expand "init_patient_menu" 3) (("" (expand "p_enter" 3) (("" (expand "change_ps_menu" 3) (("" (expand "p_device" 3) (("" (expand "p_device_entry" 3) (("" (expand "change_ps_menu" 3) (("" (expand "p_complete_device_p" 3) (("" (expand "p_complete_device" 3) (("" (expand "change_ps_menu" 3) (("" (expand "connect_new_element" 3) (("" (expand "change_ps_menu" 3) (("" (expand "connect_device_to_patient" 3) (("" (expand "filter_state_patient_station") (("" (expand "fsp_state") (("" (split) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil) ("10" (grind) nil nil) ("11" (grind) nil nil) ("12" (grind) nil nil) ("13" (grind) nil nil) ("14" (grind) nil nil) ("15" (grind) nil nil) ("16" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) (nil (patient_enter_device_name const-decl "state" system_th nil) (patient_menu_act const-decl "state" system_th nil) (edit_none_menu const-decl "menu_set" patient_th nil) (p_enter const-decl "p_state" patient_th nil) (p_device const-decl "p_state" patient_th nil) (p_complete_device const-decl "p_state" patient_th nil) (connect_new_element const-decl "state" system_th nil) (connect_device_to_patient const-decl "state" system_th nil) (fsp_state const-decl "boolean" p_interface_th nil) (pdtp_state const-decl "boolean" p_interface_th nil) (maxtime formal-const-decl "{maxtime: posnat | maxinfuse <= maxtime}" p_interface_th nil) (<= const-decl "bool" reals nil) (maxinfuse formal-const-decl "posnat" p_interface_th nil) (maxrate formal-const-decl "posnat" p_interface_th nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (add_nde_patient_device const-decl "p_state" patient_th nil) (filter_state_patient_station const-decl "boolean" p_interface_th nil) (p_complete_device_p const-decl "p_state" patient_th nil) (p_device_entry const-decl "p_state" patient_th nil) (change_ps_menu const-decl "p_state" patient_th nil) (init_patient_menu const-decl "patient_mn_type" system_th nil) (patient_menu.act_menu const-decl "p_state[maxrate, maxinfuse, maxtime]" system_th nil) (p_enter_name const-decl "p_state" patient_th nil)) shostak))("ICE_patient_int" p_interface_th p_selectdp_case 0 (p_selectdp_case-1 nil 3877428853 ("" (skosimp*) (("" (beta) (("" (flatten) (("" (expand "p_select_d_mode") (("" (lift-if 3) (("" (split) (("1" (flatten) (("1" (expand "select_d_p_window") (("1" (expand "patient_enter_device") (("1" (assert) (("1" (expand "patient_menu_act") (("1" (replace -3 1) (("1" (replace -7 1) (("1" (expand "edit_none_menu" 1) (("1" (expand "act_menu" 1) (("1" (expand "init_patient_menu") (("1" (lift-if) (("1" (split) (("1" (flatten) (("1" (lift-if) (("1" (split) (("1" (flatten) (("1" (lift-if) (("1" (split) (("1" (flatten) (("1" (expand "p_select" 1) (("1" (expand "change_ps_menu") (("1" (lift-if) (("1" (split) (("1" (flatten) (("1" (expand "p_device") (("1" (lift-if) (("1" (split) (("1" (flatten) (("1" (split) (("1" (split) (("1" (flatten) (("1" (expand "p_select_display_mode") (("1" (expand "change_ps_menu") (("1" (expand "p_select_d_mode") (("1" (lift-if) (("1" (split) (("1" (split) (("1" (split) (("1" (flatten) (("1" (expand "p_select_region") (("1" (expand "p_select_disp_m") (("1" (expand "edit_none_menu" 1) (("1" (expand "change_ps_menu") (("1" (replace -10 1) (("1" (apply-extensionality) (("1" (apply-extensionality) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (expand "per_d_select" 1) (("2" (propax) nil nil)) nil)) nil)) nil) ("2" (split) (("1" (flatten) (("1" (expand "p_select_region") (("1" (expand "p_select_disp_m") (("1" (expand "edit_none_menu" 1) (("1" (expand "change_ps_menu" 1) (("1" (replace -9 1) (("1" (apply-extensionality 1) (("1" (apply-extensionality 1) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (expand "per_d_select" 1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (split) (("1" (flatten) (("1" (split) (("1" (flatten 1) (("1" (expand "p_select_region" 1) (("1" (expand "p_select_disp_m" 1) (("1" (replace -10 1) (("1" (expand "edit_none_menu" 1) (("1" (expand "change_ps_menu" 1) (("1" (apply-extensionality 1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten 1) (("2" (expand "per_d_select" 1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (split) (("1" (flatten) (("1" (expand "p_select_region") (("1" (expand "p_select_disp_m" 1) (("1" (expand "edit_none_menu" 1) (("1" (expand "change_ps_menu" 1) (("1" (replace -9 1) (("1" (apply-extensionality 1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten 1) (("2" (expand "per_d_select" 1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) nil nil)) nil) ("2" (split) (("1" (expand "p_select_display_mode" 1) (("1" (expand "p_select_d_mode" 1) (("1" (expand "edit_none_menu" 1) (("1" (expand "change_ps_menu" 1) (("1" (lift-if 1) (("1" (split) (("1" (flatten) (("1" (replace -9 1) (("1" (expand "p_select_region" 1) (("1" (expand "p_select_disp_m" 1) (("1" (expand "edit_none_menu" 1) (("1" (expand "change_ps_menu" 1) (("1" (apply-extensionality 1) (("1" (apply-extensionality 1) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (expand "per_d_select" 1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "p_select_display_mode" 1) (("2" (replace -8 1) (("2" (expand "edit_none_menu" 1) (("2" (expand "change_ps_menu" 1) (("2" (expand "p_select_d_mode" 1) (("2" (lift-if 1) (("2" (flatten) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (replace -6 1) (("2" (expand "p_select_display_mode" 1) (("2" (expand "p_select_d_mode" 1) (("2" (expand "edit_none_menu" 1) (("2" (expand "change_ps_menu" 1) (("2" (lift-if 1) (("2" (flatten) (("2" (split) (("1" (flatten) (("1" (expand "p_select_region") (("1" (expand "p_select_disp_m" 1) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((p_select_d_mode const-decl "p_state" patient_th nil) (select_d_p_window const-decl "state" p_interface_th nil) (edit_none_menu const-decl "menu_set" patient_th nil) (init_patient_menu const-decl "patient_mn_type" system_th nil) (p_select const-decl "p_state" patient_th nil) (p_select_display_mode const-decl "p_state" patient_th nil) (p_select_region const-decl "p_state" patient_th nil) (coord_menu.menu_type type-eq-decl nil system_th nil) (i_state type-eq-decl nil coordinator_th nil) (node_to_pd type-eq-decl nil system_th nil) (n_state type-eq-decl nil node_th nil) (patient_mn_type type-eq-decl nil system_th nil) (patient_db_type type-eq-decl nil system_th nil) (patients_type type-eq-decl nil patient_th nil) (node_to_patient type-eq-decl nil system_th nil) (state type-eq-decl nil system_th nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nlimit const-decl "nat" coord_t_and_c_th nil) (device type-eq-decl nil devices_th nil) (device_type type-decl nil devices_th nil) (infusion_pump? adt-recognizer-decl "[device_type -> boolean]" devices_th nil) (infusion_pump adt-constructor-decl "(infusion_pump?)" devices_th nil) (d_mode? adt-recognizer-decl "[patient_mode_type -> boolean]" coord_t_and_c_th nil) (d_mode adt-constructor-decl "(d_mode?)" coord_t_and_c_th nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (device? adt-recognizer-decl "[menu -> boolean]" coord_t_and_c_th nil) (device adt-constructor-decl "(device?)" coord_t_and_c_th nil) (escape? adt-recognizer-decl "[menu -> boolean]" coord_t_and_c_th nil) (escape adt-constructor-decl "(escape?)" coord_t_and_c_th nil) (display? adt-recognizer-decl "[menu -> boolean]" coord_t_and_c_th nil) (display adt-constructor-decl "(display?)" coord_t_and_c_th nil) (device_filter? adt-recognizer-decl "[menu -> boolean]" coord_t_and_c_th nil) (device_filter adt-constructor-decl "(device_filter?)" coord_t_and_c_th nil) (region? adt-recognizer-decl "[menu -> boolean]" coord_t_and_c_th nil) (region adt-constructor-decl "(region?)" coord_t_and_c_th nil) (select? adt-recognizer-decl "[menu -> boolean]" coord_t_and_c_th nil) (select adt-constructor-decl "(select?)" coord_t_and_c_th nil) (edit? adt-recognizer-decl "[menu -> boolean]" coord_t_and_c_th nil) (edit adt-constructor-decl "(edit?)" coord_t_and_c_th nil) (cursor_down? adt-recognizer-decl "[menu -> boolean]" coord_t_and_c_th nil) (cursor_down adt-constructor-decl "(cursor_down?)" coord_t_and_c_th nil) (cursor_up? adt-recognizer-decl "[menu -> boolean]" coord_t_and_c_th nil) (cursor_up adt-constructor-decl "(cursor_up?)" coord_t_and_c_th nil) (enter? adt-recognizer-decl "[menu -> boolean]" coord_t_and_c_th nil) (enter adt-constructor-decl "(enter?)" coord_t_and_c_th nil) (p_state type-eq-decl nil patient_th nil) (v_state type-eq-decl nil vital_signs_th nil) (patient_constraint_type type-eq-decl nil devices_th nil) (rule_setup_type type-eq-decl nil patient_th nil) (coord_panel_setup_type type-eq-decl nil patient_th nil) (p_entry_window_type type-eq-decl nil patient_th nil) (p_disp_top_type type-eq-decl nil patient_th nil) (p_disp_main_type type-eq-decl nil patient_th nil) (panel type-eq-decl nil coord_t_and_c_th nil) (constraint_setup_type type-eq-decl nil patient_th nil) (menu_set type-eq-decl nil coord_t_and_c_th nil) (menu type-decl nil coord_t_and_c_th nil) (patient_mode_type type-decl nil coord_t_and_c_th nil) (node type-eq-decl nil node_th nil) (p_dstates type-eq-decl nil patient_th nil) (patient type-eq-decl nil patient_th nil) (dpanel_type type-eq-decl nil patient_th nil) (maxtime formal-const-decl "{maxtime: posnat | maxinfuse <= maxtime}" p_interface_th nil) (<= const-decl "bool" reals nil) (maxinfuse formal-const-decl "posnat" p_interface_th nil) (maxrate formal-const-decl "posnat" p_interface_th nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (patient_edit_type type-decl nil coord_t_and_c_th nil) (disp_focus_type type-decl nil coord_t_and_c_th nil) (p_select_disp_m const-decl "p_state" patient_th nil) (per_d_select const-decl "boolean" patient_th nil) (p_device const-decl "p_state" patient_th nil) (change_ps_menu const-decl "p_state" patient_th nil) (patient_menu.act_menu const-decl "p_state[maxrate, maxinfuse, maxtime]" system_th nil) (patient_menu_act const-decl "state" system_th nil) (patient_enter_device const-decl "state" system_th nil) (nil_device const-decl "device" devices_th nil) (dlimit const-decl "nat" coord_t_and_c_th nil) (/= const-decl "boolean" notequal nil) (p_null const-decl "patient" patient_th nil) (plimit const-decl "nat" coord_t_and_c_th nil)) shostak))("ICE_patient_int" p_interface_th p_selectdp_case_st 0 (p_selectdp_case_st-1 nil 3877666422 ("" (skosimp*) (("" (beta) (("" (flatten) (("" (expand "select_d_p_window") (("" (expand "patient_enter_device") (("" (assert) (("" (expand "patient_menu_act" 3) (("" (replace -6 3) (("" (expand "init_patient_menu" 3) (("" (expand "act_menu" 3) (("" (expand "p_select" 3) (("" (replace -1 3) (("" (replace -2 3) (("" (expand "edit_none_menu" 3) (("" (expand "change_ps_menu" 3) (("" (assert) (("" (grind) (("" (apply-extensionality 3) (("" (apply-extensionality 1) (("" (expand "edit_none_menu" 1) (("" (grind) (("" (apply-extensionality 1) (("" (apply-extensionality 1) (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((select_d_p_window const-decl "state" p_interface_th nil) (patient_menu.act_menu const-decl "p_state[maxrate, maxinfuse, maxtime]" system_th nil) (edit_none_menu const-decl "menu_set" patient_th nil) (state type-eq-decl nil system_th nil) (node_to_patient type-eq-decl nil system_th nil) (patients_type type-eq-decl nil patient_th nil) (patient_db_type type-eq-decl nil system_th nil) (patient_mn_type type-eq-decl nil system_th nil) (n_state type-eq-decl nil node_th nil) (node_to_pd type-eq-decl nil system_th nil) (i_state type-eq-decl nil coordinator_th nil) (coord_menu.menu_type type-eq-decl nil system_th nil) (enter adt-constructor-decl "(enter?)" coord_t_and_c_th nil) (enter? adt-recognizer-decl "[menu -> boolean]" coord_t_and_c_th nil) (cursor_up adt-constructor-decl "(cursor_up?)" coord_t_and_c_th nil) (cursor_up? adt-recognizer-decl "[menu -> boolean]" coord_t_and_c_th nil) (cursor_down adt-constructor-decl "(cursor_down?)" coord_t_and_c_th nil) (cursor_down? adt-recognizer-decl "[menu -> boolean]" coord_t_and_c_th nil) (edit adt-constructor-decl "(edit?)" coord_t_and_c_th nil) (edit? adt-recognizer-decl "[menu -> boolean]" coord_t_and_c_th nil) (select adt-constructor-decl "(select?)" coord_t_and_c_th nil) (select? adt-recognizer-decl "[menu -> boolean]" coord_t_and_c_th nil) (region adt-constructor-decl "(region?)" coord_t_and_c_th nil) (region? adt-recognizer-decl "[menu -> boolean]" coord_t_and_c_th nil) (device_filter adt-constructor-decl "(device_filter?)" coord_t_and_c_th nil) (device_filter? adt-recognizer-decl "[menu -> boolean]" coord_t_and_c_th nil) (display adt-constructor-decl "(display?)" coord_t_and_c_th nil) (display? adt-recognizer-decl "[menu -> boolean]" coord_t_and_c_th nil) (escape adt-constructor-decl "(escape?)" coord_t_and_c_th nil) (escape? adt-recognizer-decl "[menu -> boolean]" coord_t_and_c_th nil) (device adt-constructor-decl "(device?)" coord_t_and_c_th nil) (device? adt-recognizer-decl "[menu -> boolean]" coord_t_and_c_th nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (d_mode adt-constructor-decl "(d_mode?)" coord_t_and_c_th nil) (d_mode? adt-recognizer-decl "[patient_mode_type -> boolean]" coord_t_and_c_th nil) (infusion_pump adt-constructor-decl "(infusion_pump?)" devices_th nil) (infusion_pump? adt-recognizer-decl "[device_type -> boolean]" devices_th nil) (device_type type-decl nil devices_th nil) (device type-eq-decl nil devices_th nil) (= const-decl "[T, T -> boolean]" equalities nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (p_state type-eq-decl nil patient_th nil) (v_state type-eq-decl nil vital_signs_th nil) (patient_constraint_type type-eq-decl nil devices_th nil) (rule_setup_type type-eq-decl nil patient_th nil) (coord_panel_setup_type type-eq-decl nil patient_th nil) (p_entry_window_type type-eq-decl nil patient_th nil) (p_disp_top_type type-eq-decl nil patient_th nil) (p_disp_main_type type-eq-decl nil patient_th nil) (panel type-eq-decl nil coord_t_and_c_th nil) (constraint_setup_type type-eq-decl nil patient_th nil) (menu_set type-eq-decl nil coord_t_and_c_th nil) (menu type-decl nil coord_t_and_c_th nil) (patient_mode_type type-decl nil coord_t_and_c_th nil) (node type-eq-decl nil node_th nil) (p_dstates type-eq-decl nil patient_th nil) (dpanel_type type-eq-decl nil patient_th nil) (patient_edit_type type-decl nil coord_t_and_c_th nil) (disp_focus_type type-decl nil coord_t_and_c_th nil) (patient type-eq-decl nil patient_th nil) (nlimit const-decl "nat" coord_t_and_c_th nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (patient_enter_mode const-decl "state" system_th nil) (p_select_region const-decl "p_state" patient_th nil) (p_select_disp_m const-decl "p_state" patient_th nil) (p_device const-decl "p_state" patient_th nil) (p_select_display_mode const-decl "p_state" patient_th nil) (p_select_d_mode const-decl "p_state" patient_th nil) (per_d_select const-decl "boolean" patient_th nil) (nil_device const-decl "device" devices_th nil) (dlimit const-decl "nat" coord_t_and_c_th nil) (p_null const-decl "patient" patient_th nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (maxrate formal-const-decl "posnat" p_interface_th nil) (maxinfuse formal-const-decl "posnat" p_interface_th nil) (<= const-decl "bool" reals nil) (maxtime formal-const-decl "{maxtime: posnat | maxinfuse <= maxtime}" p_interface_th nil) (plimit const-decl "nat" coord_t_and_c_th nil) (change_ps_menu const-decl "p_state" patient_th nil) (p_select const-decl "p_state" patient_th nil) (init_patient_menu const-decl "patient_mn_type" system_th nil) (patient_menu_act const-decl "state" system_th nil) (patient_enter_device const-decl "state" system_th nil)) shostak))("ICE_patient_int" p_interface_th p_selectdp_case_st_filter 0 (p_selectdp_case_st_filter-1 nil 3878109312 ("" (skosimp*) (("" (beta) (("" (flatten) (("" (expand "select_d_p_window") (("" (expand "patient_enter_device") (("" (assert) (("" (expand "patient_menu_act" 3) (("" (replace -6 3) (("" (expand "init_patient_menu" 3) (("" (expand "act_menu" 3) (("" (expand "p_select" 3) (("" (replace -1 3) (("" (replace -2 3) (("" (expand "edit_none_menu" 3) (("" (expand "change_ps_menu" 3) (("" (assert) (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((select_d_p_window const-decl "state" p_interface_th nil) (patient_menu.act_menu const-decl "p_state[maxrate, maxinfuse, maxtime]" system_th nil) (edit_none_menu const-decl "menu_set" patient_th nil) (filter_state_patient_station const-decl "boolean" p_interface_th nil) (fsp_state const-decl "boolean" p_interface_th nil) (pdtp_state const-decl "boolean" p_interface_th nil) (patient_enter_mode const-decl "state" system_th nil) (p_select_region const-decl "p_state" patient_th nil) (p_select_disp_m const-decl "p_state" patient_th nil) (p_device const-decl "p_state" patient_th nil) (p_select_display_mode const-decl "p_state" patient_th nil) (p_select_d_mode const-decl "p_state" patient_th nil) (per_d_select const-decl "boolean" patient_th nil) (nil_device const-decl "device" devices_th nil) (dlimit const-decl "nat" coord_t_and_c_th nil) (p_null const-decl "patient" patient_th nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (maxrate formal-const-decl "posnat" p_interface_th nil) (maxinfuse formal-const-decl "posnat" p_interface_th nil) (<= const-decl "bool" reals nil) (maxtime formal-const-decl "{maxtime: posnat | maxinfuse <= maxtime}" p_interface_th nil) (plimit const-decl "nat" coord_t_and_c_th nil) (change_ps_menu const-decl "p_state" patient_th nil) (p_select const-decl "p_state" patient_th nil) (init_patient_menu const-decl "patient_mn_type" system_th nil) (patient_menu_act const-decl "state" system_th nil) (patient_enter_device const-decl "state" system_th nil)) shostak))("ICE_patient_int" p_interface_th p_menu_conversion 0 (p_menu_conversion-1 nil 3877609661 ("" (skosimp*) (("" (beta) (("" (flatten) (("" (lemma "p_selectdp_case_st_filter" ("p" "p!1" "d" "d!1" "st" "connect_pump_device_patient(p!1, d!1, connect_patient_coord(p!1,
 init_state))")) (("" (beta -1) (("" (split -1) (("1" (lemma "connect_pump_lemma_filter" ("p" "p!1" "d" "d!1" "st" "init_state")) (("1" (beta -1) (("1" (split -1) (("1" (expand "filter_state_patient_station") (("1" (flatten) (("1" (split) (("1" (replace -7 1) (("1" (postpone) nil nil)) nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil) ("4" (postpone) nil nil) ("5" (postpone) nil nil) ("6" (postpone) nil nil)) nil)) nil)) nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil) ("4" (postpone) nil nil) ("5" (postpone) nil nil) ("6" (postpone) nil nil) ("7" (postpone) nil nil) ("8" (postpone) nil nil) ("9" (postpone) nil nil)) nil)) nil)) nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil) ("4" (postpone) nil nil) ("5" (postpone) nil nil) ("6" (postpone) nil nil) ("7" (postpone) nil nil) ("8" (postpone) nil nil) ("9" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) nil shostak))("ICE_patient_int" p_interface_th p_complete_base_case 0 (p_complete_base_case-1 nil 3876809286 ("" (skosimp*) (("" (beta) (("" (flatten) (("" (lemma "p_enter_sel_men_pump_st" ("p" "p!1" "d" "d!1")) (("" (beta -1) (("" (assert) (("" (lemma "p_selectdp_case" ("p" "p!1" "d" "d!1" "st" "connect_new_element(p!1, enter_pump_new_device(p!1, d!1,
 connect_patient_coord(p!1, init_state)))")) (("" (beta -1) (("" (split -1) (("1" (split 3) (("1" (replace -1 1) (("1" (replace -2 1) (("1" (expand "connect_patient_coord" 1) (("1" (expand "init_state" 1) (("1" (expand "init_p_state" 1) (("1" (assert) (("1" (expand "connect_new_element" 1) (("1" (expand "connect_to_coordinator" 1) (("1" (expand "change_ps_menu" 1) (("1" (expand "p_ent_new_device" 1) (("1" (expand "init_disp_top" 1) (("1" (assert) (("1" (expand "connect_device_to_patient" 1) (("1" (expand "patient_enter_device" 1) (("1" (expand "change_ps_menu" 1) (("1" (expand "add_nde_patient_device" 1) (("1" (expand "p_select_d_mode" 1) (("1" (lift-if 1) (("1" (split) (("1" (propax) nil nil) ("2" (expand "per_d_select" 1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (replace -1 1) (("2" (replace -2 1) (("2" (expand "connect_patient_coord" 1) (("2" (expand "init_state" 1) (("2" (expand "init_p_state" 1) (("2" (assert) (("2" (expand "connect_new_element" 1) (("2" (expand "connect_to_coordinator" 1) (("2" (expand "change_ps_menu" 1) (("2" (expand "p_ent_new_device" 1) (("2" (expand "init_disp_top" 1) (("2" (assert) (("2" (expand "connect_device_to_patient" 1) (("2" (expand "patient_enter_device" 1) (("2" (expand "change_ps_menu" 1) (("2" (expand "add_nde_patient_device" 1) (("2" (expand "p_select_d_mode" 1) (("2" (lift-if 1) (("2" (split) (("1" (flatten) (("1" (expand "p_d_per_action" 1) (("1" (expand "init_d_state" 1) (("1" (expand "init_ip_panel" 1) (("1" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (flatten 1) (("2" (expand "per_d_select" 1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (postpone) nil nil) ("4" (replace -2 1) (("4" (expand "connect_patient_coord" 1) (("4" (expand "init_state" 1) (("4" (expand "init_p_state" 1) (("4" (assert) (("4" (expand "connect_new_element" 1) (("4" (expand "connect_to_coordinator" 1) (("4" (expand "change_ps_menu" 1) (("4" (expand "p_ent_new_device" 1) (("4" (expand "init_disp_top" 1) (("4" (assert) (("4" (expand "connect_device_to_patient" 1) (("4" (expand "patient_enter_device" 1) (("4" (expand "change_ps_menu" 1) (("4" (expand "add_nde_patient_device" 1) (("4" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("5" (postpone) nil nil) ("6" (postpone) nil nil) ("7" (postpone) nil nil) ("8" (postpone) nil nil)) nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil) ("4" (postpone) nil nil) ("5" (postpone) nil nil) ("6" (postpone) nil nil) ("7" (postpone) nil nil) ("8" (postpone) nil nil) ("9" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((connect_new_element const-decl "state" system_th nil) (init_state const-decl "state" system_th nil) (finite_emptyset name-judgement "finite_set" finite_sets nil) nil (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (nonempty_add_finite application-judgement "non_empty_finite_set" finite_sets nil) (select_d_p_window const-decl "state" p_interface_th nil) (p_select_region const-decl "p_state" patient_th nil) (p_select_disp_m const-decl "p_state" patient_th nil) (p_select_display_mode const-decl "p_state" patient_th nil) (p_select_d_mode const-decl "p_state" patient_th nil) (per_d_select const-decl "boolean" patient_th nil) (p_select const-decl "p_state" patient_th nil) (patient_enter_device const-decl "state" system_th nil) (connect_device_to_patient const-decl "state" system_th nil) (update_patient_device_alarm_disp const-decl "i_state" coordinator_th nil) (add_nde_patient_device const-decl "p_state" patient_th nil) (c_d_t_patient const-decl "i_state" coordinator_th nil) (member const-decl "bool" sets nil) (p_complete_device_p const-decl "p_state" patient_th nil) (p_complete_device const-decl "p_state" patient_th nil) (p_device const-decl "p_state" patient_th nil) (p_device_entry const-decl "p_state" patient_th nil) (patient_menu_act const-decl "state" system_th nil) (patient_menu.act_menu const-decl "p_state[maxrate, maxinfuse, maxtime]" system_th nil) (p_enter const-decl "p_state" patient_th nil) (init_patient_menu const-decl "patient_mn_type" system_th nil) (edit_none_menu const-decl "menu_set" patient_th nil) (patient_enter_device_name const-decl "state" system_th nil) (p_enter_name const-decl "p_state" patient_th nil) (update_patient_alarm_disp const-decl "i_state" coordinator_th nil) (include_patient const-decl "i_state" coordinator_th nil) (change_ps_menu const-decl "p_state" patient_th nil) (init_d_state const-decl "d_state" infusion_pumps_th nil) (init_ip_panel const-decl "panel" infusion_pumps_th nil) (init_vs const-decl "v_state" vital_signs_th nil) (init_vs_panel const-decl "panel" vital_signs_th nil) (enum_par const-decl "boolean" coord_t_and_c_th nil) (no_num const-decl "nonneg_real" coord_t_and_c_th nil) (num_par const-decl "boolean" coord_t_and_c_th nil) (empty_constraint_setup const-decl "constraint_setup_type" patient_th nil) (init_constraint const-decl "constraint_type" patient_th nil) (null_ec const-decl "enum_constraint_type" patient_th nil) (null_nc const-decl "num_constraint_type" patient_th nil) (d_bot const-decl "device" devices_th nil) (init_rule_setup const-decl "rule_setup_type" patient_th nil) (init_panel_display const-decl "coord_panel_setup_type" patient_th nil) (init_disp_main const-decl "p_disp_main_type" patient_th nil) (init_disp_top const-decl "p_disp_top_type" patient_th nil) (empty_entry_window const-decl "p_entry_window_type" patient_th nil) (null_value const-decl "posnat" coord_t_and_c_th nil) (mindex const-decl "nat" coord_t_and_c_th nil) (undef_device const-decl "devs_type" devices_th nil) (emptyset const-decl "set" sets nil) (nil_pd const-decl "patient_to_device" system_th nil) (update_n_graph const-decl "n_state" node_th nil) (increment_node const-decl "node" node_th nil) (init_i_state const-decl "i_state" coordinator_th nil) (empty_config const-decl "patient_config" coordinator_th nil) (empty_device_display const-decl "disp_device_type" coordinator_th nil) (empty_patient_display const-decl "disp_patient_type" coordinator_th nil) (empty_alarm_disp const-decl "disp_alarm_type" coordinator_th nil) (empty_top_display const-decl "coord_disp_top_type" coordinator_th nil) (empty_entry_window const-decl "coord_entry_window_type" coordinator_th nil) (coord_node const-decl "node" node_th nil) (init_n_state const-decl "n_state" node_th nil) (empty_act_q const-decl "act_q_type" node_th nil) (empty_pan_q const-decl "pan_q_type" node_th nil) (empty_act_msg const-decl "act_message_type" node_th nil) (empty_pan_msg const-decl "pan_message_type" node_th nil) (empty_panel const-decl "panel" coord_t_and_c_th nil) (no_node const-decl "node" node_th nil) (nlimit const-decl "nat" coord_t_and_c_th nil) (root_node const-decl "node" node_th nil) (nil_device const-decl "device" devices_th nil) (dlimit const-decl "nat" coord_t_and_c_th nil) (p_null const-decl "patient" patient_th nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (maxrate formal-const-decl "posnat" p_interface_th nil) (maxinfuse formal-const-decl "posnat" p_interface_th nil) (<= const-decl "bool" reals nil) (maxtime formal-const-decl "{maxtime: posnat | maxinfuse <= maxtime}" p_interface_th nil) (plimit const-decl "nat" coord_t_and_c_th nil) (connect_to_coordinator const-decl "state" system_th nil) (init_p_state const-decl "p_state" patient_th nil) nil (p_d_per_action const-decl "boolean" ICE_templates_rsce_th nil)) shostak))("ICEpatients" patient_th p_edit_region_TCC1 0 (p_edit_region_TCC1-1 nil 3814084179 ("" (cond-disjoint-tcc) nil nil) ((per_p_edit const-decl "boolean" patient_th nil)) nil (p_edit_region disjointness "COND patient_th.ps`disp_focus = coord_t_and_c_th.top_focus -> patient_th.p_edit_top(patient_th.ps), patient_th.ps`disp_focus = coord_t_and_c_th.patient_focus -> patient_th.p_edit_main(patient_th.ps), patient_th.ps`disp_focus = coord_t_and_c_th.device_focus -> patient_th.p_edit_device(patient_th.ps), ELSE -> patient_th.ps ENDCOND" "nil")))("ICEpatients" patient_th p_select_par_TCC1 0 (p_select_par_TCC1-1 nil 3814084179 ("" (cond-disjoint-tcc) nil nil) ((per_p_select const-decl "boolean" patient_th nil) (per_e_select const-decl "boolean" patient_th nil)) nil (p_select_par disjointness "COND patient_th.per_p_select(patient_th.ps) -> LET ps = patient_th.change_ps_menu(patient_th.edit_menu, patient_th.ps) IN patient_th.ps WITH [p_panel_display := patient_th.ps`p_panel_display WITH [select_pars := sets[coord_t_and_c_th.par].add((patient_th.ps`p_entry_window)`ent_par, (patient_th.ps`p_panel_display)`select_pars)]], patient_th.per_e_select(patient_th.ps) -> LET ps = patient_th.change_ps_menu(patient_th.edit_constraint_menu, patient_th.ps) IN patient_th.ps WITH [p_constraint_display := patient_th.ps`p_constraint_display WITH [select_par := (patient_th.ps`p_entry_window)`ent_par]], ELSE -> patient_th.ps ENDCOND" "nil")))("ICEpatients" patient_th p_select_a_TCC1 0 (p_select_a_TCC1-1 nil 3814084179 ("" (cond-disjoint-tcc) nil nil) ((per_a_d_r_select const-decl "boolean" patient_th nil) (per_a_rule_select const-decl "boolean" patient_th nil)) nil (p_select_a disjointness "COND patient_th.per_a_d_r_select(patient_th.ps) -> LET ps = patient_th.change_ps_menu(patient_th.edit_menu, patient_th.ps) IN patient_th.ps WITH [p_panel_display := patient_th.ps`p_panel_display WITH [select_acts := sets[coord_t_and_c_th.action_id].add(patient_th.a, (patient_th.ps`p_panel_display)`select_acts)]], patient_th.per_a_rule_select(patient_th.ps) -> LET ps = patient_th.change_ps_menu(patient_th.edit_rule_menu, patient_th.ps) IN patient_th.ps WITH [p_rules_display := patient_th.ps`p_rules_display WITH [select_act := patient_th.a]], ELSE -> patient_th.ps ENDCOND" "nil")))("ICEpatients" patient_th act_patient_quit_TCC1 0 (act_patient_quit_TCC1-1 nil 3814084179 ("" (cond-disjoint-tcc) nil nil) ((dlimit const-decl "nat" coord_t_and_c_th nil) (maxtime formal-const-decl "{maxtime: posnat | maxinfuse <= maxtime}" patient_th nil) (<= const-decl "bool" reals nil) (maxinfuse formal-const-decl "posnat" patient_th nil) (maxrate formal-const-decl "posnat" patient_th nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (nil_device const-decl "device" devices_th nil)) nil (act_patient_quit disjointness "COND booleans.OR((patient_th.ps`emode = coord_t_and_c_th.edit_top), booleans.OR((patient_th.ps`emode = coord_t_and_c_th.edit_device), (patient_th.ps`emode = coord_t_and_c_th.edit_patient))) -> patient_th.p_quit_patient(patient_th.ps), (patient_th.ps`emode = coord_t_and_c_th.edit_constraint) -> patient_th.p_quit_constraint(patient_th.ps), (patient_th.ps`emode = coord_t_and_c_th.edit_rule) -> patient_th.p_quit_rule(patient_th.ps), ELSE -> patient_th.ps ENDCOND" "nil")))("ICEpatients" patient_th p_edit_TCC1 0 (p_edit_TCC1-1 nil 3814270472 ("" (cond-disjoint-tcc) nil nil) ((per_p_edit const-decl "boolean" patient_th nil)) nil (p_edit disjointness "COND patient_th.per_p_edit(patient_th.ps) -> LET ps = patient_th.ps WITH [prev_menu_visible := (patient_th.ps`p_disp_top)`menu_visible] IN patient_th.change_ps_menu(patient_th.edit_options_menu, patient_th.ps), booleans.AND((patient_th.ps`pmode = coord_t_and_c_th.d_mode), (patient_th.ps`emode = coord_t_and_c_th.edit_rule)) -> LET ps = patient_th.ps WITH [prev_menu_visible := (patient_th.ps`p_disp_top)`menu_visible] IN patient_th.change_ps_menu(LAMBDA (m: coord_t_and_c_th.menu): booleans.OR((m = coord_t_and_c_th.constraint), (m = coord_t_and_c_th.escape)), patient_th.ps), ELSE -> patient_th.p_escape(patient_th.ps) ENDCOND" "nil")))("ICEpatients" patient_th p_select_TCC1 0 (p_select_TCC1-1 nil 3814103765 ("" (cond-disjoint-tcc) nil nil) nil nil (p_select disjointness "COND patient_th.ps`emode = coord_t_and_c_th.edit_none -> patient_th.change_ps_menu(LAMBDA (m: coord_t_and_c_th.menu): booleans.OR((m = coord_t_and_c_th.device), booleans.OR((m = coord_t_and_c_th.escape), booleans.OR((m = coord_t_and_c_th.display), (m = coord_t_and_c_th.region)))), patient_th.ps), patient_th.ps`emode = coord_t_and_c_th.edit_top -> patient_th.change_ps_menu(LAMBDA (m: coord_t_and_c_th.menu): booleans.OR((m = coord_t_and_c_th.parameter), (m = coord_t_and_c_th.escape)), patient_th.ps), booleans.OR((patient_th.ps`emode = coord_t_and_c_th.edit_patient), (patient_th.ps`emode = coord_t_and_c_th.edit_device)) -> patient_th.change_ps_menu(LAMBDA (m: coord_t_and_c_th.menu): booleans.OR((m = coord_t_and_c_th.parameter), booleans.OR((m = coord_t_and_c_th.action), (m = coord_t_and_c_th.escape))), patient_th.ps), (patient_th.ps`emode = coord_t_and_c_th.edit_constraint) -> patient_th.change_ps_menu(LAMBDA (m: coord_t_and_c_th.menu):      (m = coord_t_and_c_th.parameter) OR (m = coord_t_and_c_th.relation) OR (m = coord_t_and_c_th.num_value) OR (m = coord_t_and_c_th.enum_value) OR (m = coord_t_and_c_th.escape), patient_th.ps), (patient_th.ps`emode = coord_t_and_c_th.edit_rule) -> patient_th.change_ps_menu(LAMBDA (m: coord_t_and_c_th.menu):      (m = coord_t_and_c_th.action) OR (m = coord_t_and_c_th.escape) OR (m = coord_t_and_c_th.device) OR (m = coord_t_and_c_th.display) OR (m = coord_t_and_c_th.escape) OR (m = coord_t_and_c_th.region), patient_th.ps), ELSE -> patient_th.ps ENDCOND" "nil")))("ICEpatients" patient_th p_constraint_TCC1 0 (p_constraint_TCC1-1 nil 3817556338 ("" (cond-disjoint-tcc) nil nil) nil nil (p_constraint disjointness "COND patient_th.ps`prev_menu_entry = coord_t_and_c_th.edit -> patient_th.p_edit_constraint(patient_th.ps), patient_th.ps`prev_menu_entry = coord_t_and_c_th.cursor_up -> patient_th.p_scroll_up_rule(patient_th.ps), patient_th.ps`prev_menu_entry = coord_t_and_c_th.cursor_down -> patient_th.p_scroll_down_rule(patient_th.ps), ELSE -> patient_th.p_escape(patient_th.ps) ENDCOND" "nil")))("ICEpatients" patient_th p_region_TCC1 0 (p_region_TCC1-1 nil 3817556338 ("" (cond-disjoint-tcc) nil nil) nil nil (p_region disjointness "COND patient_th.ps`prev_menu_entry = coord_t_and_c_th.edit -> patient_th.p_edit_region(patient_th.ps), patient_th.ps`prev_menu_entry = coord_t_and_c_th.select -> patient_th.p_select_region(patient_th.ps), patient_th.ps`prev_menu_entry = coord_t_and_c_th.cursor_up -> patient_th.p_up_display(patient_th.ps), patient_th.ps`prev_menu_entry = coord_t_and_c_th.cursor_down -> patient_th.p_down_display(patient_th.ps), ELSE -> patient_th.p_escape(patient_th.ps) ENDCOND" "nil")))("ICEpatients" patient_th p_device_TCC1 0 (p_device_TCC1-1 nil 3817556338 ("" (cond-disjoint-tcc) nil nil) nil nil (p_device disjointness "COND (patient_th.ps`prev_menu_entry = coord_t_and_c_th.select) -> patient_th.p_select_display_mode(patient_th.ps), patient_th.ps`prev_menu_entry = coord_t_and_c_th.enter -> patient_th.p_device_entry(patient_th.ps), patient_th.ps`prev_menu_entry = coord_t_and_c_th.edit -> patient_th.p_edit_device(patient_th.ps), ELSE -> patient_th.p_escape(patient_th.ps) ENDCOND" "nil")))("ICEcoordinator" coordinator_th i_select_display_TCC1 0 (i_select_display_TCC1-1 nil 3813306066 ("" (cond-disjoint-tcc) nil nil) nil nil (i_select_display disjointness "COND coordinator_th.is`disp_focus = coord_t_and_c_th.top_focus -> coordinator_th.i_select_top(coordinator_th.is), coordinator_th.is`disp_focus = coord_t_and_c_th.patient_focus -> coordinator_th.i_select_p_mode(coordinator_th.is), coordinator_th.is`disp_focus = coord_t_and_c_th.device_focus -> coordinator_th.i_select_d_mode(coordinator_th.is), ELSE -> coordinator_th.is ENDCOND" "nil")))("ICEcoordinator" coordinator_th i_select_action_TCC1 0 (i_select_action_TCC1-1 nil 3813306066 ("" (cond-disjoint-tcc) nil nil) nil nil (i_select_action disjointness "COND coordinator_th.is`mode = coord_t_and_c_th.p_mode -> coordinator_th.i_select_ap(coordinator_th.a, coordinator_th.is), coordinator_th.is`mode = coord_t_and_c_th.d_mode -> coordinator_th.i_select_ad(coordinator_th.a, coordinator_th.is), ELSE -> coordinator_th.is ENDCOND" "nil")))("ICEcoordinator" coordinator_th i_up_display_TCC1 0 (i_up_display_TCC1-1 nil 3813306066 ("" (cond-disjoint-tcc) nil nil) nil nil (i_up_display disjointness "COND coordinator_th.is`disp_focus = coord_t_and_c_th.no_focus -> coord_t_and_c_th.no_focus, coordinator_th.is`disp_focus = coord_t_and_c_th.top_focus -> coord_t_and_c_th.no_focus, coordinator_th.is`disp_focus = coord_t_and_c_th.patient_focus -> coord_t_and_c_th.top_focus, coordinator_th.is`disp_focus = coord_t_and_c_th.device_focus -> coord_t_and_c_th.patient_focus ENDCOND" "nil")))("ICEcoordinator" coordinator_th i_up_display_TCC2 0 (i_up_display_TCC2-1 nil 3813306066 ("" (cond-coverage-tcc) nil nil) nil nil (i_up_display coverage "COND coordinator_th.is`disp_focus = coord_t_and_c_th.no_focus -> coord_t_and_c_th.no_focus, coordinator_th.is`disp_focus = coord_t_and_c_th.top_focus -> coord_t_and_c_th.no_focus, coordinator_th.is`disp_focus = coord_t_and_c_th.patient_focus -> coord_t_and_c_th.top_focus, coordinator_th.is`disp_focus = coord_t_and_c_th.device_focus -> coord_t_and_c_th.patient_focus ENDCOND" "nil")))("ICEcoordinator" coordinator_th i_down_display_TCC1 0 (i_down_display_TCC1-1 nil 3813306066 ("" (cond-disjoint-tcc) nil nil) nil nil (i_down_display disjointness "COND coordinator_th.is`disp_focus = coord_t_and_c_th.no_focus -> coord_t_and_c_th.top_focus, coordinator_th.is`disp_focus = coord_t_and_c_th.top_focus -> coord_t_and_c_th.patient_focus, coordinator_th.is`disp_focus = coord_t_and_c_th.patient_focus -> coord_t_and_c_th.device_focus, coordinator_th.is`disp_focus = coord_t_and_c_th.device_focus -> coord_t_and_c_th.no_focus ENDCOND" "nil")))("ICEpatients" patient_th IMP_infusion_pumps_th_TCC1 0 (IMP_infusion_pumps_th_TCC1-1 nil 3821444858 ("" (assuming-tcc) nil nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil (IMP_infusion_pumps_th assuming "infusion_pumps_th[patient_th.maxrate, patient_th.maxinfuse, patient_th.maxtime].infusion_pumps_th" "maxinfuseLEQmaxtime: ASSUMPTION reals.<=(infusion_pumps_th.maxinfuse, infusion_pumps_th.maxtime)")))("ICEpatients" patient_th p_enum_value_TCC1 0 (p_enum_value_TCC1-1 nil 3814084179 ("" (cond-disjoint-tcc) nil nil) nil nil (p_enum_value disjointness "COND patient_th.ps`prev_menu_entry = coord_t_and_c_th.select -> patient_th.p_enter_enum_value(patient_th.ps), patient_th.ps`prev_menu_entry = coord_t_and_c_th.clear -> patient_th.p_clear_enum_value(patient_th.ps), ELSE -> patient_th.ps ENDCOND" "nil")))("ICEsystem" system_th init_coord_menu_TCC1 0 (init_coord_menu_TCC1-1 nil 3817560331 ("" (cond-disjoint-tcc) nil nil) nil nil (init_coord_menu disjointness "COND system_th.m = coord_t_and_c_th.select -> coordinator_th[system_th.maxrate, system_th.maxinfuse, system_th.maxtime].i_select, system_th.m = coord_t_and_c_th.cursor_up -> coordinator_th[system_th.maxrate, system_th.maxinfuse, system_th.maxtime].i_up_display, system_th.m = coord_t_and_c_th.cursor_down -> coordinator_th[system_th.maxrate, system_th.maxinfuse, system_th.maxtime].i_down_display, system_th.m = coord_t_and_c_th.display -> coordinator_th[system_th.maxrate, system_th.maxinfuse, system_th.maxtime].i_select_display, system_th.m = coord_t_and_c_th.patient -> coordinator_th[system_th.maxrate, system_th.maxinfuse, system_th.maxtime].i_select_patient, system_th.m = coord_t_and_c_th.device -> coordinator_th[system_th.maxrate, system_th.maxinfuse, system_th.maxtime].i_select_device, system_th.m = coord_t_and_c_th.action -> coordinator_th[system_th.maxrate, system_th.maxinfuse, system_th.maxtime].i_select_action, system_th.m = coord_t_and_c_th.escape -> coordinator_th[system_th.maxrate, system_th.maxinfuse, system_th.maxtime].i_escape, ELSE -> coordinator_th[system_th.maxrate, system_th.maxinfuse, system_th.maxtime].i_escape ENDCOND" "nil")))("ICEsystem" system_th init_patient_menu_TCC1 0 (init_patient_menu_TCC1-1 nil 3817560331 ("" (cond-disjoint-tcc) nil nil) nil nil (init_patient_menu disjointness "COND system_th.m = coord_t_and_c_th.escape -> patient_th[system_th.maxrate, system_th.maxinfuse, system_th.maxtime].p_escape, system_th.m = coord_t_and_c_th.cursor_up -> patient_th[system_th.maxrate, system_th.maxinfuse, system_th.maxtime].p_cursor_move, system_th.m = coord_t_and_c_th.cursor_down -> patient_th[system_th.maxrate, system_th.maxinfuse, system_th.maxtime].p_cursor_move, system_th.m = coord_t_and_c_th.constraint -> patient_th[system_th.maxrate, system_th.maxinfuse, system_th.maxtime].p_constraint, system_th.m = coord_t_and_c_th.delete -> patient_th[system_th.maxrate, system_th.maxinfuse, system_th.maxtime].p_delete_rule, system_th.m = coord_t_and_c_th.clear -> patient_th[system_th.maxrate, system_th.maxinfuse, system_th.maxtime].p_clear, system_th.m = coord_t_and_c_th.select -> patient_th[system_th.maxrate, system_th.maxinfuse, system_th.maxtime].p_select, system_th.m = coord_t_and_c_th.parameter -> patient_th[system_th.maxrate, system_th.maxinfuse, system_th.maxtime].p_select_par, system_th.m = coord_t_and_c_th.relation -> patient_th[system_th.maxrate, system_th.maxinfuse, system_th.maxtime].p_select_relation, system_th.m = coord_t_and_c_th.action -> patient_th[system_th.maxrate, system_th.maxinfuse, system_th.maxtime].p_select_a, system_th.m = coord_t_and_c_th.display -> patient_th[system_th.maxrate, system_th.maxinfuse, system_th.maxtime].p_select_region, system_th.m = coord_t_and_c_th.enum_value -> patient_th[system_th.maxrate, system_th.maxinfuse, system_th.maxtime].p_enum_value, system_th.m = coord_t_and_c_th.num_value -> patient_th[system_th.maxrate, system_th.maxinfuse, system_th.maxtime].p_num_value, system_th.m = coord_t_and_c_th.edit -> patient_th[system_th.maxrate, system_th.maxinfuse, system_th.maxtime].p_edit, system_th.m = coord_t_and_c_th.top -> patient_th[system_th.maxrate, system_th.maxinfuse, system_th.maxtime].p_edit_top, system_th.m = coord_t_and_c_th.main -> patient_th[system_th.maxrate, system_th.maxinfuse, system_th.maxtime].p_edit_main, system_th.m = coord_t_and_c_th.region -> patient_th[system_th.maxrate, system_th.maxinfuse, system_th.maxtime].p_region, system_th.m = coord_t_and_c_th.device -> patient_th[system_th.maxrate, system_th.maxinfuse, system_th.maxtime].p_device, system_th.m = coord_t_and_c_th.device_filter -> patient_th[system_th.maxrate, system_th.maxinfuse, system_th.maxtime].p_device_filter, system_th.m = coord_t_and_c_th.enter -> patient_th[system_th.maxrate, system_th.maxinfuse, system_th.maxtime].p_enter, system_th.m = coord_t_and_c_th.pump -> patient_th[system_th.maxrate, system_th.maxinfuse, system_th.maxtime].p_complete_device_p, system_th.m = coord_t_and_c_th.vs_device -> patient_th[system_th.maxrate, system_th.maxinfuse, system_th.maxtime].p_complete_device_vs, ELSE -> patient_th[system_th.maxrate, system_th.maxinfuse, system_th.maxtime].p_escape ENDCOND" "nil")))("ICE_patient_int" p_interface_th menu_action_lemma 0 (menu_action_lemma-1 nil 3880615654 ("" (skosimp*) (("" (beta) (("" (flatten) (("" (expand "patient_menu_act" 5) (("" (expand "patient_menu" 5) (("" (expand "update_patient_prev_entry" 5) (("" (expand "p_select" 5) (("" (expand "p_change_menu" 5) (("" (expand "p_device" 5) (("" (grind) (("1" (postpone) nil nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil) ("4" (postpone) nil nil) ("5" (postpone) nil nil) ("6" (postpone) nil nil) ("7" (postpone) nil nil) ("8" (postpone) nil nil) ("9" (postpone) nil nil) ("10" (postpone) nil nil) ("11" (postpone) nil nil) ("12" (postpone) nil nil) ("13" (postpone) nil nil) ("14" (postpone) nil nil) ("15" (postpone) nil nil) ("16" (postpone) nil nil) ("17" (postpone) nil nil) ("18" (postpone) nil nil) ("19" (postpone) nil nil) ("20" (postpone) nil nil) ("21" (postpone) nil nil) ("22" (postpone) nil nil) ("23" (postpone) nil nil) ("24" (postpone) nil nil) ("25" (postpone) nil nil) ("26" (postpone) nil nil) ("27" (postpone) nil nil) ("28" (postpone) nil nil) ("29" (postpone) nil nil) ("30" (postpone) nil nil) ("31" (postpone) nil nil) ("32" (postpone) nil nil) ("33" (postpone) nil nil) ("34" (postpone) nil nil) ("35" (postpone) nil nil) ("36" (postpone) nil nil) ("37" (postpone) nil nil) ("38" (postpone) nil nil) ("39" (postpone) nil nil) ("40" (postpone) nil nil) ("41" (postpone) nil nil) ("42" (postpone) nil nil) ("43" (postpone) nil nil) ("44" (postpone) nil nil) ("45" (postpone) nil nil) ("46" (postpone) nil nil) ("47" (postpone) nil nil) ("48" (postpone) nil nil) ("49" (postpone) nil nil) ("50" (postpone) nil nil) ("51" (postpone) nil nil) ("52" (postpone) nil nil) ("53" (postpone) nil nil) ("54" (postpone) nil nil) ("55" (postpone) nil nil) ("56" (postpone) nil nil) ("57" (postpone) nil nil) ("58" (postpone) nil nil) ("59" (postpone) nil nil) ("60" (postpone) nil nil) ("61" (postpone) nil nil) ("62" (postpone) nil nil) ("63" (postpone) nil nil) ("64" (postpone) nil nil) ("65" (postpone) nil nil) ("66" (postpone) nil nil) ("67" (postpone) nil nil) ("68" (postpone) nil nil) ("69" (postpone) nil nil) ("70" (postpone) nil nil) ("71" (postpone) nil nil) ("72" (postpone) nil nil) ("73" (postpone) nil nil) ("74" (postpone) nil nil) ("75" (postpone) nil nil) ("76" (postpone) nil nil) ("77" (postpone) nil nil) ("78" (postpone) nil nil) ("79" (postpone) nil nil) ("80" (postpone) nil nil) ("81" (postpone) nil nil) ("82" (postpone) nil nil) ("83" (postpone) nil nil) ("84" (postpone) nil nil) ("85" (postpone) nil nil) ("86" (postpone) nil nil) ("87" (postpone) nil nil) ("88" (postpone) nil nil) ("89" (postpone) nil nil) ("90" (postpone) nil nil) ("91" (postpone) nil nil) ("92" (postpone) nil nil) ("93" (postpone) nil nil) ("94" (postpone) nil nil) ("95" (postpone) nil nil) ("96" (postpone) nil nil) ("97" (postpone) nil nil) ("98" (postpone) nil nil) ("99" (postpone) nil nil) ("100" (postpone) nil nil) ("101" (postpone) nil nil) ("102" (postpone) nil nil) ("103" (postpone) nil nil) ("104" (postpone) nil nil) ("105" (postpone) nil nil) ("106" (postpone) nil nil) ("107" (postpone) nil nil) ("108" (postpone) nil nil) ("109" (postpone) nil nil) ("110" (postpone) nil nil) ("111" (postpone) nil nil) ("112" (postpone) nil nil) ("113" (postpone) nil nil) ("114" (postpone) nil nil) ("115" (postpone) nil nil) ("116" (postpone) nil nil) ("117" (postpone) nil nil) ("118" (postpone) nil nil) ("119" (postpone) nil nil) ("120" (postpone) nil nil) ("121" (postpone) nil nil) ("122" (postpone) nil nil) ("123" (postpone) nil nil) ("124" (postpone) nil nil) ("125" (postpone) nil nil) ("126" (postpone) nil nil) ("127" (postpone) nil nil) ("128" (postpone) nil nil) ("129" (postpone) nil nil) ("130" (postpone) nil nil) ("131" (postpone) nil nil) ("132" (postpone) nil nil) ("133" (postpone) nil nil) ("134" (postpone) nil nil) ("135" (postpone) nil nil) ("136" (postpone) nil nil) ("137" (postpone) nil nil) ("138" (postpone) nil nil) ("139" (postpone) nil nil) ("140" (postpone) nil nil) ("141" (postpone) nil nil) ("142" (postpone) nil nil) ("143" (postpone) nil nil) ("144" (postpone) nil nil) ("145" (postpone) nil nil) ("146" (postpone) nil nil) ("147" (postpone) nil nil) ("148" (postpone) nil nil) ("149" (postpone) nil nil) ("150" (postpone) nil nil) ("151" (postpone) nil nil) ("152" (postpone) nil nil) ("153" (postpone) nil nil) ("154" (postpone) nil nil) ("155" (postpone) nil nil) ("156" (postpone) nil nil) ("157" (postpone) nil nil) ("158" (postpone) nil nil) ("159" (postpone) nil nil) ("160" (postpone) nil nil) ("161" (postpone) nil nil) ("162" (postpone) nil nil) ("163" (postpone) nil nil) ("164" (postpone) nil nil) ("165" (postpone) nil nil) ("166" (postpone) nil nil) ("167" (postpone) nil nil) ("168" (postpone) nil nil) ("169" (postpone) nil nil) ("170" (postpone) nil nil) ("171" (postpone) nil nil) ("172" (postpone) nil nil) ("173" (postpone) nil nil) ("174" (postpone) nil nil) ("175" (postpone) nil nil) ("176" (postpone) nil nil) ("177" (postpone) nil nil) ("178" (postpone) nil nil) ("179" (postpone) nil nil) ("180" (postpone) nil nil) ("181" (postpone) nil nil) ("182" (postpone) nil nil) ("183" (postpone) nil nil) ("184" (postpone) nil nil) ("185" (postpone) nil nil) ("186" (postpone) nil nil) ("187" (postpone) nil nil) ("188" (postpone) nil nil) ("189" (postpone) nil nil) ("190" (postpone) nil nil) ("191" (postpone) nil nil) ("192" (postpone) nil nil) ("193" (postpone) nil nil) ("194" (postpone) nil nil) ("195" (postpone) nil nil) ("196" (postpone) nil nil) ("197" (postpone) nil nil) ("198" (postpone) nil nil) ("199" (postpone) nil nil) ("200" (postpone) nil nil) ("201" (postpone) nil nil) ("202" (postpone) nil nil) ("203" (postpone) nil nil) ("204" (postpone) nil nil) ("205" (postpone) nil nil) ("206" (postpone) nil nil) ("207" (postpone) nil nil) ("208" (postpone) nil nil) ("209" (postpone) nil nil) ("210" (postpone) nil nil) ("211" (postpone) nil nil) ("212" (postpone) nil nil) ("213" (postpone) nil nil) ("214" (postpone) nil nil) ("215" (postpone) nil nil) ("216" (postpone) nil nil) ("217" (postpone) nil nil) ("218" (postpone) nil nil) ("219" (postpone) nil nil) ("220" (postpone) nil nil) ("221" (postpone) nil nil) ("222" (postpone) nil nil) ("223" (postpone) nil nil) ("224" (postpone) nil nil) ("225" (postpone) nil nil) ("226" (postpone) nil nil) ("227" (postpone) nil nil) ("228" (postpone) nil nil) ("229" (postpone) nil nil) ("230" (postpone) nil nil) ("231" (postpone) nil nil) ("232" (postpone) nil nil) ("233" (postpone) nil nil) ("234" (postpone) nil nil) ("235" (postpone) nil nil) ("236" (postpone) nil nil) ("237" (postpone) nil nil) ("238" (postpone) nil nil) ("239" (postpone) nil nil) ("240" (postpone) nil nil) ("241" (postpone) nil nil) ("242" (postpone) nil nil) ("243" (postpone) nil nil) ("244" (postpone) nil nil) ("245" (postpone) nil nil) ("246" (postpone) nil nil) ("247" (postpone) nil nil) ("248" (postpone) nil nil) ("249" (postpone) nil nil) ("250" (postpone) nil nil) ("251" (postpone) nil nil) ("252" (postpone) nil nil) ("253" (postpone) nil nil) ("254" (postpone) nil nil) ("255" (postpone) nil nil) ("256" (postpone) nil nil) ("257" (postpone) nil nil) ("258" (postpone) nil nil) ("259" (postpone) nil nil) ("260" (postpone) nil nil) ("261" (postpone) nil nil) ("262" (postpone) nil nil) ("263" (postpone) nil nil) ("264" (postpone) nil nil) ("265" (postpone) nil nil) ("266" (postpone) nil nil) ("267" (postpone) nil nil) ("268" (postpone) nil nil) ("269" (postpone) nil nil) ("270" (postpone) nil nil) ("271" (postpone) nil nil) ("272" (postpone) nil nil) ("273" (postpone) nil nil) ("274" (postpone) nil nil) ("275" (postpone) nil nil) ("276" (postpone) nil nil) ("277" (postpone) nil nil) ("278" (postpone) nil nil) ("279" (postpone) nil nil) ("280" (postpone) nil nil) ("281" (postpone) nil nil) ("282" (postpone) nil nil) ("283" (postpone) nil nil) ("284" (postpone) nil nil) ("285" (postpone) nil nil) ("286" (postpone) nil nil) ("287" (postpone) nil nil) ("288" (postpone) nil nil) ("289" (postpone) nil nil) ("290" (postpone) nil nil) ("291" (postpone) nil nil) ("292" (postpone) nil nil) ("293" (postpone) nil nil) ("294" (postpone) nil nil) ("295" (postpone) nil nil) ("296" (postpone) nil nil) ("297" (postpone) nil nil) ("298" (postpone) nil nil) ("299" (postpone) nil nil) ("300" (postpone) nil nil) ("301" (postpone) nil nil) ("302" (postpone) nil nil) ("303" (postpone) nil nil) ("304" (postpone) nil nil) ("305" (postpone) nil nil) ("306" (postpone) nil nil) ("307" (postpone) nil nil) ("308" (postpone) nil nil) ("309" (postpone) nil nil) ("310" (postpone) nil nil) ("311" (postpone) nil nil) ("312" (postpone) nil nil) ("313" (postpone) nil nil) ("314" (postpone) nil nil) ("315" (postpone) nil nil) ("316" (postpone) nil nil) ("317" (postpone) nil nil) ("318" (postpone) nil nil) ("319" (postpone) nil nil) ("320" (postpone) nil nil) ("321" (postpone) nil nil) ("322" (postpone) nil nil) ("323" (postpone) nil nil) ("324" (postpone) nil nil) ("325" (postpone) nil nil) ("326" (postpone) nil nil) ("327" (postpone) nil nil) ("328" (postpone) nil nil) ("329" (postpone) nil nil) ("330" (postpone) nil nil) ("331" (postpone) nil nil) ("332" (postpone) nil nil) ("333" (postpone) nil nil) ("334" (postpone) nil nil) ("335" (postpone) nil nil) ("336" (postpone) nil nil) ("337" (postpone) nil nil) ("338" (postpone) nil nil) ("339" (postpone) nil nil) ("340" (postpone) nil nil) ("341" (postpone) nil nil) ("342" (postpone) nil nil) ("343" (postpone) nil nil) ("344" (postpone) nil nil) ("345" (postpone) nil nil) ("346" (postpone) nil nil) ("347" (postpone) nil nil) ("348" (postpone) nil nil) ("349" (postpone) nil nil) ("350" (postpone) nil nil) ("351" (postpone) nil nil) ("352" (postpone) nil nil) ("353" (postpone) nil nil) ("354" (postpone) nil nil) ("355" (postpone) nil nil) ("356" (postpone) nil nil) ("357" (postpone) nil nil) ("358" (postpone) nil nil) ("359" (postpone) nil nil) ("360" (postpone) nil nil) ("361" (postpone) nil nil) ("362" (postpone) nil nil) ("363" (postpone) nil nil) ("364" (postpone) nil nil) ("365" (postpone) nil nil) ("366" (postpone) nil nil) ("367" (postpone) nil nil) ("368" (postpone) nil nil) ("369" (postpone) nil nil) ("370" (postpone) nil nil) ("371" (postpone) nil nil) ("372" (postpone) nil nil) ("373" (postpone) nil nil) ("374" (postpone) nil nil) ("375" (postpone) nil nil) ("376" (postpone) nil nil) ("377" (postpone) nil nil) ("378" (postpone) nil nil) ("379" (postpone) nil nil) ("380" (postpone) nil nil) ("381" (postpone) nil nil) ("382" (postpone) nil nil) ("383" (postpone) nil nil) ("384" (postpone) nil nil) ("385" (postpone) nil nil) ("386" (postpone) nil nil) ("387" (postpone) nil nil) ("388" (postpone) nil nil) ("389" (postpone) nil nil) ("390" (postpone) nil nil) ("391" (postpone) nil nil) ("392" (postpone) nil nil) ("393" (postpone) nil nil) ("394" (postpone) nil nil) ("395" (postpone) nil nil) ("396" (postpone) nil nil) ("397" (postpone) nil nil) ("398" (postpone) nil nil) ("399" (postpone) nil nil) ("400" (postpone) nil nil) ("401" (postpone) nil nil) ("402" (postpone) nil nil) ("403" (postpone) nil nil) ("404" (postpone) nil nil) ("405" (postpone) nil nil) ("406" (postpone) nil nil) ("407" (postpone) nil nil) ("408" (postpone) nil nil) ("409" (postpone) nil nil) ("410" (postpone) nil nil) ("411" (postpone) nil nil) ("412" (postpone) nil nil) ("413" (postpone) nil nil) ("414" (postpone) nil nil) ("415" (postpone) nil nil) ("416" (postpone) nil nil) ("417" (postpone) nil nil) ("418" (postpone) nil nil) ("419" (postpone) nil nil) ("420" (postpone) nil nil) ("421" (postpone) nil nil) ("422" (postpone) nil nil) ("423" (postpone) nil nil) ("424" (postpone) nil nil) ("425" (postpone) nil nil) ("426" (postpone) nil nil) ("427" (postpone) nil nil) ("428" (postpone) nil nil) ("429" (postpone) nil nil) ("430" (postpone) nil nil) ("431" (postpone) nil nil) ("432" (postpone) nil nil) ("433" (postpone) nil nil) ("434" (postpone) nil nil) ("435" (postpone) nil nil) ("436" (postpone) nil nil) ("437" (postpone) nil nil) ("438" (postpone) nil nil) ("439" (postpone) nil nil) ("440" (postpone) nil nil) ("441" (postpone) nil nil) ("442" (postpone) nil nil) ("443" (postpone) nil nil) ("444" (postpone) nil nil) ("445" (postpone) nil nil) ("446" (postpone) nil nil) ("447" (postpone) nil nil) ("448" (postpone) nil nil) ("449" (postpone) nil nil) ("450" (postpone) nil nil) ("451" (postpone) nil nil) ("452" (postpone) nil nil) ("453" (postpone) nil nil) ("454" (postpone) nil nil) ("455" (postpone) nil nil) ("456" (postpone) nil nil) ("457" (postpone) nil nil) ("458" (postpone) nil nil) ("459" (postpone) nil nil) ("460" (postpone) nil nil) ("461" (postpone) nil nil) ("462" (postpone) nil nil) ("463" (postpone) nil nil) ("464" (postpone) nil nil) ("465" (postpone) nil nil) ("466" (postpone) nil nil) ("467" (postpone) nil nil) ("468" (postpone) nil nil) ("469" (postpone) nil nil) ("470" (postpone) nil nil) ("471" (postpone) nil nil) ("472" (postpone) nil nil) ("473" (postpone) nil nil) ("474" (postpone) nil nil) ("475" (postpone) nil nil) ("476" (postpone) nil nil) ("477" (postpone) nil nil) ("478" (postpone) nil nil) ("479" (postpone) nil nil) ("480" (postpone) nil nil) ("481" (postpone) nil nil) ("482" (postpone) nil nil) ("483" (postpone) nil nil) ("484" (postpone) nil nil) ("485" (postpone) nil nil) ("486" (postpone) nil nil) ("487" (postpone) nil nil) ("488" (postpone) nil nil) ("489" (postpone) nil nil) ("490" (postpone) nil nil) ("491" (postpone) nil nil) ("492" (postpone) nil nil) ("493" (postpone) nil nil) ("494" (postpone) nil nil) ("495" (postpone) nil nil) ("496" (postpone) nil nil) ("497" (postpone) nil nil) ("498" (postpone) nil nil) ("499" (postpone) nil nil) ("500" (postpone) nil nil) ("501" (postpone) nil nil) ("502" (postpone) nil nil) ("503" (postpone) nil nil) ("504" (postpone) nil nil) ("505" (postpone) nil nil) ("506" (postpone) nil nil) ("507" (postpone) nil nil) ("508" (postpone) nil nil) ("509" (postpone) nil nil) ("510" (postpone) nil nil) ("511" (postpone) nil nil) ("512" (postpone) nil nil) ("513" (postpone) nil nil) ("514" (postpone) nil nil) ("515" (postpone) nil nil) ("516" (postpone) nil nil) ("517" (postpone) nil nil) ("518" (postpone) nil nil) ("519" (postpone) nil nil) ("520" (postpone) nil nil) ("521" (postpone) nil nil) ("522" (postpone) nil nil) ("523" (postpone) nil nil) ("524" (postpone) nil nil) ("525" (postpone) nil nil) ("526" (postpone) nil nil) ("527" (postpone) nil nil) ("528" (postpone) nil nil) ("529" (postpone) nil nil) ("530" (postpone) nil nil) ("531" (postpone) nil nil) ("532" (postpone) nil nil) ("533" (postpone) nil nil) ("534" (postpone) nil nil) ("535" (postpone) nil nil) ("536" (postpone) nil nil) ("537" (postpone) nil nil) ("538" (postpone) nil nil) ("539" (postpone) nil nil) ("540" (postpone) nil nil) ("541" (postpone) nil nil) ("542" (postpone) nil nil) ("543" (postpone) nil nil) ("544" (postpone) nil nil) ("545" (postpone) nil nil) ("546" (postpone) nil nil) ("547" (postpone) nil nil) ("548" (postpone) nil nil) ("549" (postpone) nil nil) ("550" (postpone) nil nil) ("551" (postpone) nil nil) ("552" (postpone) nil nil) ("553" (postpone) nil nil) ("554" (postpone) nil nil) ("555" (postpone) nil nil) ("556" (postpone) nil nil) ("557" (postpone) nil nil) ("558" (postpone) nil nil) ("559" (postpone) nil nil) ("560" (postpone) nil nil) ("561" (postpone) nil nil) ("562" (postpone) nil nil) ("563" (postpone) nil nil) ("564" (postpone) nil nil) ("565" (postpone) nil nil) ("566" (postpone) nil nil) ("567" (postpone) nil nil) ("568" (postpone) nil nil) ("569" (postpone) nil nil) ("570" (postpone) nil nil) ("571" (postpone) nil nil) ("572" (postpone) nil nil) ("573" (postpone) nil nil) ("574" (postpone) nil nil) ("575" (postpone) nil nil) ("576" (postpone) nil nil) ("577" (postpone) nil nil) ("578" (postpone) nil nil) ("579" (postpone) nil nil) ("580" (postpone) nil nil) ("581" (postpone) nil nil) ("582" (postpone) nil nil) ("583" (postpone) nil nil) ("584" (postpone) nil nil) ("585" (postpone) nil nil) ("586" (postpone) nil nil) ("587" (postpone) nil nil) ("588" (postpone) nil nil) ("589" (postpone) nil nil) ("590" (postpone) nil nil) ("591" (postpone) nil nil) ("592" (postpone) nil nil) ("593" (postpone) nil nil) ("594" (postpone) nil nil) ("595" (postpone) nil nil) ("596" (postpone) nil nil) ("597" (postpone) nil nil) ("598" (postpone) nil nil) ("599" (postpone) nil nil) ("600" (postpone) nil nil) ("601" (postpone) nil nil) ("602" (postpone) nil nil) ("603" (postpone) nil nil) ("604" (postpone) nil nil) ("605" (postpone) nil nil) ("606" (postpone) nil nil) ("607" (postpone) nil nil) ("608" (postpone) nil nil) ("609" (postpone) nil nil) ("610" (postpone) nil nil) ("611" (postpone) nil nil) ("612" (postpone) nil nil) ("613" (postpone) nil nil) ("614" (postpone) nil nil) ("615" (postpone) nil nil) ("616" (postpone) nil nil) ("617" (postpone) nil nil) ("618" (postpone) nil nil) ("619" (postpone) nil nil) ("620" (postpone) nil nil) ("621" (postpone) nil nil) ("622" (postpone) nil nil) ("623" (postpone) nil nil) ("624" (postpone) nil nil) ("625" (postpone) nil nil) ("626" (postpone) nil nil) ("627" (postpone) nil nil) ("628" (postpone) nil nil) ("629" (postpone) nil nil) ("630" (postpone) nil nil) ("631" (postpone) nil nil) ("632" (postpone) nil nil) ("633" (postpone) nil nil) ("634" (postpone) nil nil) ("635" (postpone) nil nil) ("636" (postpone) nil nil) ("637" (postpone) nil nil) ("638" (postpone) nil nil) ("639" (postpone) nil nil) ("640" (postpone) nil nil) ("641" (postpone) nil nil) ("642" (postpone) nil nil) ("643" (postpone) nil nil) ("644" (postpone) nil nil) ("645" (postpone) nil nil) ("646" (postpone) nil nil) ("647" (postpone) nil nil) ("648" (postpone) nil nil) ("649" (postpone) nil nil) ("650" (postpone) nil nil) ("651" (postpone) nil nil) ("652" (postpone) nil nil) ("653" (postpone) nil nil) ("654" (postpone) nil nil) ("655" (postpone) nil nil) ("656" (postpone) nil nil) ("657" (postpone) nil nil) ("658" (postpone) nil nil) ("659" (postpone) nil nil) ("660" (postpone) nil nil) ("661" (postpone) nil nil) ("662" (postpone) nil nil) ("663" (postpone) nil nil) ("664" (postpone) nil nil) ("665" (postpone) nil nil) ("666" (postpone) nil nil) ("667" (postpone) nil nil) ("668" (postpone) nil nil) ("669" (postpone) nil nil) ("670" (postpone) nil nil) ("671" (postpone) nil nil) ("672" (postpone) nil nil) ("673" (postpone) nil nil) ("674" (postpone) nil nil) ("675" (postpone) nil nil) ("676" (postpone) nil nil) ("677" (postpone) nil nil) ("678" (postpone) nil nil) ("679" (postpone) nil nil) ("680" (postpone) nil nil) ("681" (postpone) nil nil) ("682" (postpone) nil nil) ("683" (postpone) nil nil) ("684" (postpone) nil nil) ("685" (postpone) nil nil) ("686" (postpone) nil nil) ("687" (postpone) nil nil) ("688" (postpone) nil nil) ("689" (postpone) nil nil) ("690" (postpone) nil nil) ("691" (postpone) nil nil) ("692" (postpone) nil nil) ("693" (postpone) nil nil) ("694" (postpone) nil nil) ("695" (postpone) nil nil) ("696" (postpone) nil nil) ("697" (postpone) nil nil) ("698" (postpone) nil nil) ("699" (postpone) nil nil) ("700" (postpone) nil nil) ("701" (postpone) nil nil) ("702" (postpone) nil nil) ("703" (postpone) nil nil) ("704" (postpone) nil nil) ("705" (postpone) nil nil) ("706" (postpone) nil nil) ("707" (postpone) nil nil) ("708" (postpone) nil nil) ("709" (postpone) nil nil) ("710" (postpone) nil nil) ("711" (postpone) nil nil) ("712" (postpone) nil nil) ("713" (postpone) nil nil) ("714" (postpone) nil nil) ("715" (postpone) nil nil) ("716" (postpone) nil nil) ("717" (postpone) nil nil) ("718" (postpone) nil nil) ("719" (postpone) nil nil) ("720" (postpone) nil nil) ("721" (postpone) nil nil) ("722" (postpone) nil nil) ("723" (postpone) nil nil) ("724" (postpone) nil nil) ("725" (postpone) nil nil) ("726" (postpone) nil nil) ("727" (postpone) nil nil) ("728" (postpone) nil nil) ("729" (postpone) nil nil) ("730" (postpone) nil nil) ("731" (postpone) nil nil) ("732" (postpone) nil nil) ("733" (postpone) nil nil) ("734" (postpone) nil nil) ("735" (postpone) nil nil) ("736" (postpone) nil nil) ("737" (postpone) nil nil) ("738" (postpone) nil nil) ("739" (postpone) nil nil) ("740" (postpone) nil nil) ("741" (postpone) nil nil) ("742" (postpone) nil nil) ("743" (postpone) nil nil) ("744" (postpone) nil nil) ("745" (postpone) nil nil) ("746" (postpone) nil nil) ("747" (postpone) nil nil) ("748" (postpone) nil nil) ("749" (postpone) nil nil) ("750" (postpone) nil nil) ("751" (postpone) nil nil) ("752" (postpone) nil nil) ("753" (postpone) nil nil) ("754" (postpone) nil nil) ("755" (postpone) nil nil) ("756" (postpone) nil nil) ("757" (postpone) nil nil) ("758" (postpone) nil nil) ("759" (postpone) nil nil) ("760" (postpone) nil nil) ("761" (postpone) nil nil) ("762" (postpone) nil nil) ("763" (postpone) nil nil) ("764" (postpone) nil nil) ("765" (postpone) nil nil) ("766" (postpone) nil nil) ("767" (postpone) nil nil) ("768" (postpone) nil nil) ("769" (postpone) nil nil) ("770" (postpone) nil nil) ("771" (postpone) nil nil) ("772" (postpone) nil nil) ("773" (postpone) nil nil) ("774" (postpone) nil nil) ("775" (postpone) nil nil) ("776" (postpone) nil nil) ("777" (postpone) nil nil) ("778" (postpone) nil nil) ("779" (postpone) nil nil) ("780" (postpone) nil nil) ("781" (postpone) nil nil) ("782" (postpone) nil nil) ("783" (postpone) nil nil) ("784" (postpone) nil nil) ("785" (postpone) nil nil) ("786" (postpone) nil nil) ("787" (postpone) nil nil) ("788" (postpone) nil nil) ("789" (postpone) nil nil) ("790" (postpone) nil nil) ("791" (postpone) nil nil) ("792" (postpone) nil nil) ("793" (postpone) nil nil) ("794" (postpone) nil nil) ("795" (postpone) nil nil) ("796" (postpone) nil nil) ("797" (postpone) nil nil) ("798" (postpone) nil nil) ("799" (postpone) nil nil) ("800" (postpone) nil nil) ("801" (postpone) nil nil) ("802" (postpone) nil nil) ("803" (postpone) nil nil) ("804" (postpone) nil nil) ("805" (postpone) nil nil) ("806" (postpone) nil nil) ("807" (postpone) nil nil) ("808" (postpone) nil nil) ("809" (postpone) nil nil) ("810" (postpone) nil nil) ("811" (postpone) nil nil) ("812" (postpone) nil nil) ("813" (postpone) nil nil) ("814" (postpone) nil nil) ("815" (postpone) nil nil) ("816" (postpone) nil nil) ("817" (postpone) nil nil) ("818" (postpone) nil nil) ("819" (postpone) nil nil) ("820" (postpone) nil nil) ("821" (postpone) nil nil) ("822" (postpone) nil nil) ("823" (postpone) nil nil) ("824" (postpone) nil nil) ("825" (postpone) nil nil) ("826" (postpone) nil nil) ("827" (postpone) nil nil) ("828" (postpone) nil nil) ("829" (postpone) nil nil) ("830" (postpone) nil nil) ("831" (postpone) nil nil) ("832" (postpone) nil nil) ("833" (postpone) nil nil) ("834" (postpone) nil nil) ("835" (postpone) nil nil) ("836" (postpone) nil nil) ("837" (postpone) nil nil) ("838" (postpone) nil nil) ("839" (postpone) nil nil) ("840" (postpone) nil nil) ("841" (postpone) nil nil) ("842" (postpone) nil nil) ("843" (postpone) nil nil) ("844" (postpone) nil nil) ("845" (postpone) nil nil) ("846" (postpone) nil nil) ("847" (postpone) nil nil) ("848" (postpone) nil nil) ("849" (postpone) nil nil) ("850" (postpone) nil nil) ("851" (postpone) nil nil) ("852" (postpone) nil nil) ("853" (postpone) nil nil) ("854" (postpone) nil nil) ("855" (postpone) nil nil) ("856" (postpone) nil nil) ("857" (postpone) nil nil) ("858" (postpone) nil nil) ("859" (postpone) nil nil) ("860" (postpone) nil nil) ("861" (postpone) nil nil) ("862" (postpone) nil nil) ("863" (postpone) nil nil) ("864" (postpone) nil nil) ("865" (postpone) nil nil) ("866" (postpone) nil nil) ("867" (postpone) nil nil) ("868" (postpone) nil nil) ("869" (postpone) nil nil) ("870" (postpone) nil nil) ("871" (postpone) nil nil) ("872" (postpone) nil nil) ("873" (postpone) nil nil) ("874" (postpone) nil nil) ("875" (postpone) nil nil) ("876" (postpone) nil nil) ("877" (postpone) nil nil) ("878" (postpone) nil nil) ("879" (postpone) nil nil) ("880" (postpone) nil nil) ("881" (postpone) nil nil) ("882" (postpone) nil nil) ("883" (postpone) nil nil) ("884" (postpone) nil nil) ("885" (postpone) nil nil) ("886" (postpone) nil nil) ("887" (postpone) nil nil) ("888" (postpone) nil nil) ("889" (postpone) nil nil) ("890" (postpone) nil nil) ("891" (postpone) nil nil) ("892" (postpone) nil nil) ("893" (postpone) nil nil) ("894" (postpone) nil nil) ("895" (postpone) nil nil) ("896" (postpone) nil nil) ("897" (postpone) nil nil) ("898" (postpone) nil nil) ("899" (postpone) nil nil) ("900" (postpone) nil nil) ("901" (postpone) nil nil) ("902" (postpone) nil nil) ("903" (postpone) nil nil) ("904" (postpone) nil nil) ("905" (postpone) nil nil) ("906" (postpone) nil nil) ("907" (postpone) nil nil) ("908" (postpone) nil nil) ("909" (postpone) nil nil) ("910" (postpone) nil nil) ("911" (postpone) nil nil) ("912" (postpone) nil nil) ("913" (postpone) nil nil) ("914" (postpone) nil nil) ("915" (postpone) nil nil) ("916" (postpone) nil nil) ("917" (postpone) nil nil) ("918" (postpone) nil nil) ("919" (postpone) nil nil) ("920" (postpone) nil nil) ("921" (postpone) nil nil) ("922" (postpone) nil nil) ("923" (postpone) nil nil) ("924" (postpone) nil nil) ("925" (postpone) nil nil) ("926" (postpone) nil nil) ("927" (postpone) nil nil) ("928" (postpone) nil nil) ("929" (postpone) nil nil) ("930" (postpone) nil nil) ("931" (postpone) nil nil) ("932" (postpone) nil nil) ("933" (postpone) nil nil) ("934" (postpone) nil nil) ("935" (postpone) nil nil) ("936" (postpone) nil nil) ("937" (postpone) nil nil) ("938" (postpone) nil nil) ("939" (postpone) nil nil) ("940" (postpone) nil nil) ("941" (postpone) nil nil) ("942" (postpone) nil nil) ("943" (postpone) nil nil) ("944" (postpone) nil nil) ("945" (postpone) nil nil) ("946" (postpone) nil nil) ("947" (postpone) nil nil) ("948" (postpone) nil nil) ("949" (postpone) nil nil) ("950" (postpone) nil nil) ("951" (postpone) nil nil) ("952" (postpone) nil nil) ("953" (postpone) nil nil) ("954" (postpone) nil nil) ("955" (postpone) nil nil) ("956" (postpone) nil nil) ("957" (postpone) nil nil) ("958" (postpone) nil nil) ("959" (postpone) nil nil) ("960" (postpone) nil nil) ("961" (postpone) nil nil) ("962" (postpone) nil nil) ("963" (postpone) nil nil) ("964" (postpone) nil nil) ("965" (postpone) nil nil) ("966" (postpone) nil nil) ("967" (postpone) nil nil) ("968" (postpone) nil nil) ("969" (postpone) nil nil) ("970" (postpone) nil nil) ("971" (postpone) nil nil) ("972" (postpone) nil nil) ("973" (postpone) nil nil) ("974" (postpone) nil nil) ("975" (postpone) nil nil) ("976" (postpone) nil nil) ("977" (postpone) nil nil) ("978" (postpone) nil nil) ("979" (postpone) nil nil) ("980" (postpone) nil nil) ("981" (postpone) nil nil) ("982" (postpone) nil nil) ("983" (postpone) nil nil) ("984" (postpone) nil nil) ("985" (postpone) nil nil) ("986" (postpone) nil nil) ("987" (postpone) nil nil) ("988" (postpone) nil nil) ("989" (postpone) nil nil) ("990" (postpone) nil nil) ("991" (postpone) nil nil) ("992" (postpone) nil nil) ("993" (postpone) nil nil) ("994" (postpone) nil nil) ("995" (postpone) nil nil) ("996" (postpone) nil nil) ("997" (postpone) nil nil) ("998" (postpone) nil nil) ("999" (postpone) nil nil) ("1000" (postpone) nil nil) ("1001" (postpone) nil nil) ("1002" (postpone) nil nil) ("1003" (postpone) nil nil) ("1004" (postpone) nil nil) ("1005" (postpone) nil nil) ("1006" (postpone) nil nil) ("1007" (postpone) nil nil) ("1008" (postpone) nil nil) ("1009" (postpone) nil nil) ("1010" (postpone) nil nil) ("1011" (postpone) nil nil) ("1012" (postpone) nil nil) ("1013" (postpone) nil nil) ("1014" (postpone) nil nil) ("1015" (postpone) nil nil) ("1016" (postpone) nil nil) ("1017" (postpone) nil nil) ("1018" (postpone) nil nil) ("1019" (postpone) nil nil) ("1020" (postpone) nil nil) ("1021" (postpone) nil nil) ("1022" (postpone) nil nil) ("1023" (postpone) nil nil) ("1024" (postpone) nil nil) ("1025" (postpone) nil nil) ("1026" (postpone) nil nil) ("1027" (postpone) nil nil) ("1028" (postpone) nil nil) ("1029" (postpone) nil nil) ("1030" (postpone) nil nil) ("1031" (postpone) nil nil) ("1032" (postpone) nil nil) ("1033" (postpone) nil nil) ("1034" (postpone) nil nil) ("1035" (postpone) nil nil) ("1036" (postpone) nil nil) ("1037" (postpone) nil nil) ("1038" (postpone) nil nil) ("1039" (postpone) nil nil) ("1040" (postpone) nil nil) ("1041" (postpone) nil nil) ("1042" (postpone) nil nil) ("1043" (postpone) nil nil) ("1044" (postpone) nil nil) ("1045" (postpone) nil nil) ("1046" (postpone) nil nil) ("1047" (postpone) nil nil) ("1048" (postpone) nil nil) ("1049" (postpone) nil nil) ("1050" (postpone) nil nil) ("1051" (postpone) nil nil) ("1052" (postpone) nil nil) ("1053" (postpone) nil nil) ("1054" (postpone) nil nil) ("1055" (postpone) nil nil) ("1056" (postpone) nil nil) ("1057" (postpone) nil nil) ("1058" (postpone) nil nil) ("1059" (postpone) nil nil) ("1060" (postpone) nil nil) ("1061" (postpone) nil nil) ("1062" (postpone) nil nil) ("1063" (postpone) nil nil) ("1064" (postpone) nil nil) ("1065" (postpone) nil nil) ("1066" (postpone) nil nil) ("1067" (postpone) nil nil) ("1068" (postpone) nil nil) ("1069" (postpone) nil nil) ("1070" (postpone) nil nil) ("1071" (postpone) nil nil) ("1072" (postpone) nil nil) ("1073" (postpone) nil nil) ("1074" (postpone) nil nil) ("1075" (postpone) nil nil) ("1076" (postpone) nil nil) ("1077" (postpone) nil nil) ("1078" (postpone) nil nil) ("1079" (postpone) nil nil) ("1080" (postpone) nil nil) ("1081" (postpone) nil nil) ("1082" (postpone) nil nil) ("1083" (postpone) nil nil) ("1084" (postpone) nil nil) ("1085" (postpone) nil nil) ("1086" (postpone) nil nil) ("1087" (postpone) nil nil) ("1088" (postpone) nil nil) ("1089" (postpone) nil nil) ("1090" (postpone) nil nil) ("1091" (postpone) nil nil) ("1092" (postpone) nil nil) ("1093" (postpone) nil nil) ("1094" (postpone) nil nil) ("1095" (postpone) nil nil) ("1096" (postpone) nil nil) ("1097" (postpone) nil nil) ("1098" (postpone) nil nil) ("1099" (postpone) nil nil) ("1100" (postpone) nil nil) ("1101" (postpone) nil nil) ("1102" (postpone) nil nil) ("1103" (postpone) nil nil) ("1104" (postpone) nil nil) ("1105" (postpone) nil nil) ("1106" (postpone) nil nil) ("1107" (postpone) nil nil) ("1108" (postpone) nil nil) ("1109" (postpone) nil nil) ("1110" (postpone) nil nil) ("1111" (postpone) nil nil) ("1112" (postpone) nil nil) ("1113" (postpone) nil nil) ("1114" (postpone) nil nil) ("1115" (postpone) nil nil) ("1116" (postpone) nil nil) ("1117" (postpone) nil nil) ("1118" (postpone) nil nil) ("1119" (postpone) nil nil) ("1120" (postpone) nil nil) ("1121" (postpone) nil nil) ("1122" (postpone) nil nil) ("1123" (postpone) nil nil) ("1124" (postpone) nil nil) ("1125" (postpone) nil nil) ("1126" (postpone) nil nil) ("1127" (postpone) nil nil) ("1128" (postpone) nil nil) ("1129" (postpone) nil nil) ("1130" (postpone) nil nil) ("1131" (postpone) nil nil) ("1132" (postpone) nil nil) ("1133" (postpone) nil nil) ("1134" (postpone) nil nil) ("1135" (postpone) nil nil) ("1136" (postpone) nil nil) ("1137" (postpone) nil nil) ("1138" (postpone) nil nil) ("1139" (postpone) nil nil) ("1140" (postpone) nil nil) ("1141" (postpone) nil nil) ("1142" (postpone) nil nil) ("1143" (postpone) nil nil) ("1144" (postpone) nil nil) ("1145" (postpone) nil nil) ("1146" (postpone) nil nil) ("1147" (postpone) nil nil) ("1148" (postpone) nil nil) ("1149" (postpone) nil nil) ("1150" (postpone) nil nil) ("1151" (postpone) nil nil) ("1152" (postpone) nil nil) ("1153" (postpone) nil nil) ("1154" (postpone) nil nil) ("1155" (postpone) nil nil) ("1156" (postpone) nil nil) ("1157" (postpone) nil nil) ("1158" (postpone) nil nil) ("1159" (postpone) nil nil) ("1160" (postpone) nil nil) ("1161" (postpone) nil nil) ("1162" (postpone) nil nil) ("1163" (postpone) nil nil) ("1164" (postpone) nil nil) ("1165" (postpone) nil nil) ("1166" (postpone) nil nil) ("1167" (postpone) nil nil) ("1168" (postpone) nil nil) ("1169" (postpone) nil nil) ("1170" (postpone) nil nil) ("1171" (postpone) nil nil) ("1172" (postpone) nil nil) ("1173" (postpone) nil nil) ("1174" (postpone) nil nil) ("1175" (postpone) nil nil) ("1176" (postpone) nil nil) ("1177" (postpone) nil nil) ("1178" (postpone) nil nil) ("1179" (postpone) nil nil) ("1180" (postpone) nil nil) ("1181" (postpone) nil nil) ("1182" (postpone) nil nil) ("1183" (postpone) nil nil) ("1184" (postpone) nil nil) ("1185" (postpone) nil nil) ("1186" (postpone) nil nil) ("1187" (postpone) nil nil) ("1188" (postpone) nil nil) ("1189" (postpone) nil nil) ("1190" (postpone) nil nil) ("1191" (postpone) nil nil) ("1192" (postpone) nil nil) ("1193" (postpone) nil nil) ("1194" (postpone) nil nil) ("1195" (postpone) nil nil) ("1196" (postpone) nil nil) ("1197" (postpone) nil nil) ("1198" (postpone) nil nil) ("1199" (postpone) nil nil) ("1200" (postpone) nil nil) ("1201" (postpone) nil nil) ("1202" (postpone) nil nil) ("1203" (postpone) nil nil) ("1204" (postpone) nil nil) ("1205" (postpone) nil nil) ("1206" (postpone) nil nil) ("1207" (postpone) nil nil) ("1208" (postpone) nil nil) ("1209" (postpone) nil nil) ("1210" (postpone) nil nil) ("1211" (postpone) nil nil) ("1212" (postpone) nil nil) ("1213" (postpone) nil nil) ("1214" (postpone) nil nil) ("1215" (postpone) nil nil) ("1216" (postpone) nil nil) ("1217" (postpone) nil nil) ("1218" (postpone) nil nil) ("1219" (postpone) nil nil) ("1220" (postpone) nil nil) ("1221" (postpone) nil nil) ("1222" (postpone) nil nil) ("1223" (postpone) nil nil) ("1224" (postpone) nil nil) ("1225" (postpone) nil nil) ("1226" (postpone) nil nil) ("1227" (postpone) nil nil) ("1228" (postpone) nil nil) ("1229" (postpone) nil nil) ("1230" (postpone) nil nil) ("1231" (postpone) nil nil) ("1232" (postpone) nil nil) ("1233" (postpone) nil nil) ("1234" (postpone) nil nil) ("1235" (postpone) nil nil) ("1236" (postpone) nil nil) ("1237" (postpone) nil nil) ("1238" (postpone) nil nil) ("1239" (postpone) nil nil) ("1240" (postpone) nil nil) ("1241" (postpone) nil nil) ("1242" (postpone) nil nil) ("1243" (postpone) nil nil) ("1244" (postpone) nil nil) ("1245" (postpone) nil nil) ("1246" (postpone) nil nil) ("1247" (postpone) nil nil) ("1248" (postpone) nil nil) ("1249" (postpone) nil nil) ("1250" (postpone) nil nil) ("1251" (postpone) nil nil) ("1252" (postpone) nil nil) ("1253" (postpone) nil nil) ("1254" (postpone) nil nil) ("1255" (postpone) nil nil) ("1256" (postpone) nil nil) ("1257" (postpone) nil nil) ("1258" (postpone) nil nil) ("1259" (postpone) nil nil) ("1260" (postpone) nil nil) ("1261" (postpone) nil nil) ("1262" (postpone) nil nil) ("1263" (postpone) nil nil) ("1264" (postpone) nil nil) ("1265" (postpone) nil nil) ("1266" (postpone) nil nil) ("1267" (postpone) nil nil) ("1268" (postpone) nil nil) ("1269" (postpone) nil nil) ("1270" (postpone) nil nil) ("1271" (postpone) nil nil) ("1272" (postpone) nil nil) ("1273" (postpone) nil nil) ("1274" (postpone) nil nil) ("1275" (postpone) nil nil) ("1276" (postpone) nil nil) ("1277" (postpone) nil nil) ("1278" (postpone) nil nil) ("1279" (postpone) nil nil) ("1280" (postpone) nil nil) ("1281" (postpone) nil nil) ("1282" (postpone) nil nil) ("1283" (postpone) nil nil) ("1284" (postpone) nil nil) ("1285" (postpone) nil nil) ("1286" (postpone) nil nil) ("1287" (postpone) nil nil) ("1288" (postpone) nil nil) ("1289" (postpone) nil nil) ("1290" (postpone) nil nil) ("1291" (postpone) nil nil) ("1292" (postpone) nil nil) ("1293" (postpone) nil nil) ("1294" (postpone) nil nil) ("1295" (postpone) nil nil) ("1296" (postpone) nil nil) ("1297" (postpone) nil nil) ("1298" (postpone) nil nil) ("1299" (postpone) nil nil) ("1300" (postpone) nil nil) ("1301" (postpone) nil nil) ("1302" (postpone) nil nil) ("1303" (postpone) nil nil) ("1304" (postpone) nil nil) ("1305" (postpone) nil nil) ("1306" (postpone) nil nil) ("1307" (postpone) nil nil) ("1308" (postpone) nil nil) ("1309" (postpone) nil nil) ("1310" (postpone) nil nil) ("1311" (postpone) nil nil) ("1312" (postpone) nil nil) ("1313" (postpone) nil nil) ("1314" (postpone) nil nil) ("1315" (postpone) nil nil) ("1316" (postpone) nil nil) ("1317" (postpone) nil nil) ("1318" (postpone) nil nil) ("1319" (postpone) nil nil) ("1320" (postpone) nil nil) ("1321" (postpone) nil nil) ("1322" (postpone) nil nil) ("1323" (postpone) nil nil) ("1324" (postpone) nil nil) ("1325" (postpone) nil nil) ("1326" (postpone) nil nil) ("1327" (postpone) nil nil) ("1328" (postpone) nil nil) ("1329" (postpone) nil nil) ("1330" (postpone) nil nil) ("1331" (postpone) nil nil) ("1332" (postpone) nil nil) ("1333" (postpone) nil nil) ("1334" (postpone) nil nil) ("1335" (postpone) nil nil) ("1336" (postpone) nil nil) ("1337" (postpone) nil nil) ("1338" (postpone) nil nil) ("1339" (postpone) nil nil) ("1340" (postpone) nil nil) ("1341" (postpone) nil nil) ("1342" (postpone) nil nil) ("1343" (postpone) nil nil) ("1344" (postpone) nil nil) ("1345" (postpone) nil nil) ("1346" (postpone) nil nil) ("1347" (postpone) nil nil) ("1348" (postpone) nil nil) ("1349" (postpone) nil nil) ("1350" (postpone) nil nil) ("1351" (postpone) nil nil) ("1352" (postpone) nil nil) ("1353" (postpone) nil nil) ("1354" (postpone) nil nil) ("1355" (postpone) nil nil) ("1356" (postpone) nil nil) ("1357" (postpone) nil nil) ("1358" (postpone) nil nil) ("1359" (postpone) nil nil) ("1360" (postpone) nil nil) ("1361" (postpone) nil nil) ("1362" (postpone) nil nil) ("1363" (postpone) nil nil) ("1364" (postpone) nil nil) ("1365" (postpone) nil nil) ("1366" (postpone) nil nil) ("1367" (postpone) nil nil) ("1368" (postpone) nil nil) ("1369" (postpone) nil nil) ("1370" (postpone) nil nil) ("1371" (postpone) nil nil) ("1372" (postpone) nil nil) ("1373" (postpone) nil nil) ("1374" (postpone) nil nil) ("1375" (postpone) nil nil) ("1376" (postpone) nil nil) ("1377" (postpone) nil nil) ("1378" (postpone) nil nil) ("1379" (postpone) nil nil) ("1380" (postpone) nil nil) ("1381" (postpone) nil nil) ("1382" (postpone) nil nil) ("1383" (postpone) nil nil) ("1384" (postpone) nil nil) ("1385" (postpone) nil nil) ("1386" (postpone) nil nil) ("1387" (postpone) nil nil) ("1388" (postpone) nil nil) ("1389" (postpone) nil nil) ("1390" (postpone) nil nil) ("1391" (postpone) nil nil) ("1392" (postpone) nil nil) ("1393" (postpone) nil nil) ("1394" (postpone) nil nil) ("1395" (postpone) nil nil) ("1396" (postpone) nil nil) ("1397" (postpone) nil nil) ("1398" (postpone) nil nil) ("1399" (postpone) nil nil) ("1400" (postpone) nil nil) ("1401" (postpone) nil nil) ("1402" (postpone) nil nil) ("1403" (postpone) nil nil) ("1404" (postpone) nil nil) ("1405" (postpone) nil nil) ("1406" (postpone) nil nil) ("1407" (postpone) nil nil) ("1408" (postpone) nil nil) ("1409" (postpone) nil nil) ("1410" (postpone) nil nil) ("1411" (postpone) nil nil) ("1412" (postpone) nil nil) ("1413" (postpone) nil nil) ("1414" (postpone) nil nil) ("1415" (postpone) nil nil) ("1416" (postpone) nil nil) ("1417" (postpone) nil nil) ("1418" (postpone) nil nil) ("1419" (postpone) nil nil) ("1420" (postpone) nil nil) ("1421" (postpone) nil nil) ("1422" (postpone) nil nil) ("1423" (postpone) nil nil) ("1424" (postpone) nil nil) ("1425" (postpone) nil nil) ("1426" (postpone) nil nil) ("1427" (postpone) nil nil) ("1428" (postpone) nil nil) ("1429" (postpone) nil nil) ("1430" (postpone) nil nil) ("1431" (postpone) nil nil) ("1432" (postpone) nil nil) ("1433" (postpone) nil nil) ("1434" (postpone) nil nil) ("1435" (postpone) nil nil) ("1436" (postpone) nil nil) ("1437" (postpone) nil nil) ("1438" (postpone) nil nil) ("1439" (postpone) nil nil) ("1440" (postpone) nil nil) ("1441" (postpone) nil nil) ("1442" (postpone) nil nil) ("1443" (postpone) nil nil) ("1444" (postpone) nil nil) ("1445" (postpone) nil nil) ("1446" (postpone) nil nil) ("1447" (postpone) nil nil) ("1448" (postpone) nil nil) ("1449" (postpone) nil nil) ("1450" (postpone) nil nil) ("1451" (postpone) nil nil) ("1452" (postpone) nil nil) ("1453" (postpone) nil nil) ("1454" (postpone) nil nil) ("1455" (postpone) nil nil) ("1456" (postpone) nil nil) ("1457" (postpone) nil nil) ("1458" (postpone) nil nil) ("1459" (postpone) nil nil) ("1460" (postpone) nil nil) ("1461" (postpone) nil nil) ("1462" (postpone) nil nil) ("1463" (postpone) nil nil) ("1464" (postpone) nil nil) ("1465" (postpone) nil nil) ("1466" (postpone) nil nil) ("1467" (postpone) nil nil) ("1468" (postpone) nil nil) ("1469" (postpone) nil nil) ("1470" (postpone) nil nil) ("1471" (postpone) nil nil) ("1472" (postpone) nil nil) ("1473" (postpone) nil nil) ("1474" (postpone) nil nil) ("1475" (postpone) nil nil) ("1476" (postpone) nil nil) ("1477" (postpone) nil nil) ("1478" (postpone) nil nil) ("1479" (postpone) nil nil) ("1480" (postpone) nil nil) ("1481" (postpone) nil nil) ("1482" (postpone) nil nil) ("1483" (postpone) nil nil) ("1484" (postpone) nil nil) ("1485" (postpone) nil nil) ("1486" (postpone) nil nil) ("1487" (postpone) nil nil) ("1488" (postpone) nil nil) ("1489" (postpone) nil nil) ("1490" (postpone) nil nil) ("1491" (postpone) nil nil) ("1492" (postpone) nil nil) ("1493" (postpone) nil nil) ("1494" (postpone) nil nil) ("1495" (postpone) nil nil) ("1496" (postpone) nil nil) ("1497" (postpone) nil nil) ("1498" (postpone) nil nil) ("1499" (postpone) nil nil) ("1500" (postpone) nil nil) ("1501" (postpone) nil nil) ("1502" (postpone) nil nil) ("1503" (postpone) nil nil) ("1504" (postpone) nil nil) ("1505" (postpone) nil nil) ("1506" (postpone) nil nil) ("1507" (postpone) nil nil) ("1508" (postpone) nil nil) ("1509" (postpone) nil nil) ("1510" (postpone) nil nil) ("1511" (postpone) nil nil) ("1512" (postpone) nil nil) ("1513" (postpone) nil nil) ("1514" (postpone) nil nil) ("1515" (postpone) nil nil) ("1516" (postpone) nil nil) ("1517" (postpone) nil nil) ("1518" (postpone) nil nil) ("1519" (postpone) nil nil) ("1520" (postpone) nil nil) ("1521" (postpone) nil nil) ("1522" (postpone) nil nil) ("1523" (postpone) nil nil) ("1524" (postpone) nil nil) ("1525" (postpone) nil nil) ("1526" (postpone) nil nil) ("1527" (postpone) nil nil) ("1528" (postpone) nil nil) ("1529" (postpone) nil nil) ("1530" (postpone) nil nil) ("1531" (postpone) nil nil) ("1532" (postpone) nil nil) ("1533" (postpone) nil nil) ("1534" (postpone) nil nil) ("1535" (postpone) nil nil) ("1536" (postpone) nil nil) ("1537" (postpone) nil nil) ("1538" (postpone) nil nil) ("1539" (postpone) nil nil) ("1540" (postpone) nil nil) ("1541" (postpone) nil nil) ("1542" (postpone) nil nil) ("1543" (postpone) nil nil) ("1544" (postpone) nil nil) ("1545" (postpone) nil nil) ("1546" (postpone) nil nil) ("1547" (postpone) nil nil) ("1548" (postpone) nil nil) ("1549" (postpone) nil nil) ("1550" (postpone) nil nil) ("1551" (postpone) nil nil) ("1552" (postpone) nil nil) ("1553" (postpone) nil nil) ("1554" (postpone) nil nil) ("1555" (postpone) nil nil) ("1556" (postpone) nil nil) ("1557" (postpone) nil nil) ("1558" (postpone) nil nil) ("1559" (postpone) nil nil) ("1560" (postpone) nil nil) ("1561" (postpone) nil nil) ("1562" (postpone) nil nil) ("1563" (postpone) nil nil) ("1564" (postpone) nil nil) ("1565" (postpone) nil nil) ("1566" (postpone) nil nil) ("1567" (postpone) nil nil) ("1568" (postpone) nil nil) ("1569" (postpone) nil nil) ("1570" (postpone) nil nil) ("1571" (postpone) nil nil) ("1572" (postpone) nil nil) ("1573" (postpone) nil nil) ("1574" (postpone) nil nil) ("1575" (postpone) nil nil) ("1576" (postpone) nil nil) ("1577" (postpone) nil nil) ("1578" (postpone) nil nil) ("1579" (postpone) nil nil) ("1580" (postpone) nil nil) ("1581" (postpone) nil nil) ("1582" (postpone) nil nil) ("1583" (postpone) nil nil) ("1584" (postpone) nil nil) ("1585" (postpone) nil nil) ("1586" (postpone) nil nil) ("1587" (postpone) nil nil) ("1588" (postpone) nil nil) ("1589" (postpone) nil nil) ("1590" (postpone) nil nil) ("1591" (postpone) nil nil) ("1592" (postpone) nil nil) ("1593" (postpone) nil nil) ("1594" (postpone) nil nil) ("1595" (postpone) nil nil) ("1596" (postpone) nil nil) ("1597" (postpone) nil nil) ("1598" (postpone) nil nil) ("1599" (postpone) nil nil) ("1600" (postpone) nil nil) ("1601" (postpone) nil nil) ("1602" (postpone) nil nil) ("1603" (postpone) nil nil) ("1604" (postpone) nil nil) ("1605" (postpone) nil nil) ("1606" (postpone) nil nil) ("1607" (postpone) nil nil) ("1608" (postpone) nil nil) ("1609" (postpone) nil nil) ("1610" (postpone) nil nil) ("1611" (postpone) nil nil) ("1612" (postpone) nil nil) ("1613" (postpone) nil nil) ("1614" (postpone) nil nil) ("1615" (postpone) nil nil) ("1616" (postpone) nil nil) ("1617" (postpone) nil nil) ("1618" (postpone) nil nil) ("1619" (postpone) nil nil) ("1620" (postpone) nil nil) ("1621" (postpone) nil nil) ("1622" (postpone) nil nil) ("1623" (postpone) nil nil) ("1624" (postpone) nil nil) ("1625" (postpone) nil nil) ("1626" (postpone) nil nil) ("1627" (postpone) nil nil) ("1628" (postpone) nil nil) ("1629" (postpone) nil nil) ("1630" (postpone) nil nil) ("1631" (postpone) nil nil) ("1632" (postpone) nil nil) ("1633" (postpone) nil nil) ("1634" (postpone) nil nil) ("1635" (postpone) nil nil) ("1636" (postpone) nil nil) ("1637" (postpone) nil nil) ("1638" (postpone) nil nil) ("1639" (postpone) nil nil) ("1640" (postpone) nil nil) ("1641" (postpone) nil nil) ("1642" (postpone) nil nil) ("1643" (postpone) nil nil) ("1644" (postpone) nil nil) ("1645" (postpone) nil nil) ("1646" (postpone) nil nil) ("1647" (postpone) nil nil) ("1648" (postpone) nil nil) ("1649" (postpone) nil nil) ("1650" (postpone) nil nil) ("1651" (postpone) nil nil) ("1652" (postpone) nil nil) ("1653" (postpone) nil nil) ("1654" (postpone) nil nil) ("1655" (postpone) nil nil) ("1656" (postpone) nil nil) ("1657" (postpone) nil nil) ("1658" (postpone) nil nil) ("1659" (postpone) nil nil) ("1660" (postpone) nil nil) ("1661" (postpone) nil nil) ("1662" (postpone) nil nil) ("1663" (postpone) nil nil) ("1664" (postpone) nil nil) ("1665" (postpone) nil nil) ("1666" (postpone) nil nil) ("1667" (postpone) nil nil) ("1668" (postpone) nil nil) ("1669" (postpone) nil nil) ("1670" (postpone) nil nil) ("1671" (postpone) nil nil) ("1672" (postpone) nil nil) ("1673" (postpone) nil nil) ("1674" (postpone) nil nil) ("1675" (postpone) nil nil) ("1676" (postpone) nil nil) ("1677" (postpone) nil nil) ("1678" (postpone) nil nil) ("1679" (postpone) nil nil) ("1680" (postpone) nil nil) ("1681" (postpone) nil nil) ("1682" (postpone) nil nil) ("1683" (postpone) nil nil) ("1684" (postpone) nil nil) ("1685" (postpone) nil nil) ("1686" (postpone) nil nil) ("1687" (postpone) nil nil) ("1688" (postpone) nil nil) ("1689" (postpone) nil nil) ("1690" (postpone) nil nil) ("1691" (postpone) nil nil) ("1692" (postpone) nil nil) ("1693" (postpone) nil nil) ("1694" (postpone) nil nil) ("1695" (postpone) nil nil) ("1696" (postpone) nil nil) ("1697" (postpone) nil nil) ("1698" (postpone) nil nil) ("1699" (postpone) nil nil) ("1700" (postpone) nil nil) ("1701" (postpone) nil nil) ("1702" (postpone) nil nil) ("1703" (postpone) nil nil) ("1704" (postpone) nil nil) ("1705" (postpone) nil nil) ("1706" (postpone) nil nil) ("1707" (postpone) nil nil) ("1708" (postpone) nil nil) ("1709" (postpone) nil nil) ("1710" (postpone) nil nil) ("1711" (postpone) nil nil) ("1712" (postpone) nil nil) ("1713" (postpone) nil nil) ("1714" (postpone) nil nil) ("1715" (postpone) nil nil) ("1716" (postpone) nil nil) ("1717" (postpone) nil nil) ("1718" (postpone) nil nil) ("1719" (postpone) nil nil) ("1720" (postpone) nil nil) ("1721" (postpone) nil nil) ("1722" (postpone) nil nil) ("1723" (postpone) nil nil) ("1724" (postpone) nil nil) ("1725" (postpone) nil nil) ("1726" (postpone) nil nil) ("1727" (postpone) nil nil) ("1728" (postpone) nil nil) ("1729" (postpone) nil nil) ("1730" (postpone) nil nil) ("1731" (postpone) nil nil) ("1732" (postpone) nil nil) ("1733" (postpone) nil nil) ("1734" (postpone) nil nil) ("1735" (postpone) nil nil) ("1736" (postpone) nil nil) ("1737" (postpone) nil nil) ("1738" (postpone) nil nil) ("1739" (postpone) nil nil) ("1740" (postpone) nil nil) ("1741" (postpone) nil nil) ("1742" (postpone) nil nil) ("1743" (postpone) nil nil) ("1744" (postpone) nil nil) ("1745" (postpone) nil nil) ("1746" (postpone) nil nil) ("1747" (postpone) nil nil) ("1748" (postpone) nil nil) ("1749" (postpone) nil nil) ("1750" (postpone) nil nil) ("1751" (postpone) nil nil) ("1752" (postpone) nil nil) ("1753" (postpone) nil nil) ("1754" (postpone) nil nil) ("1755" (postpone) nil nil) ("1756" (postpone) nil nil) ("1757" (postpone) nil nil) ("1758" (postpone) nil nil) ("1759" (postpone) nil nil) ("1760" (postpone) nil nil) ("1761" (postpone) nil nil) ("1762" (postpone) nil nil) ("1763" (postpone) nil nil) ("1764" (postpone) nil nil) ("1765" (postpone) nil nil) ("1766" (postpone) nil nil) ("1767" (postpone) nil nil) ("1768" (postpone) nil nil) ("1769" (postpone) nil nil) ("1770" (postpone) nil nil) ("1771" (postpone) nil nil) ("1772" (postpone) nil nil) ("1773" (postpone) nil nil) ("1774" (postpone) nil nil) ("1775" (postpone) nil nil) ("1776" (postpone) nil nil) ("1777" (postpone) nil nil) ("1778" (postpone) nil nil) ("1779" (postpone) nil nil) ("1780" (postpone) nil nil) ("1781" (postpone) nil nil) ("1782" (postpone) nil nil) ("1783" (postpone) nil nil) ("1784" (postpone) nil nil) ("1785" (postpone) nil nil) ("1786" (postpone) nil nil) ("1787" (postpone) nil nil) ("1788" (postpone) nil nil) ("1789" (postpone) nil nil) ("1790" (postpone) nil nil) ("1791" (postpone) nil nil) ("1792" (postpone) nil nil) ("1793" (postpone) nil nil) ("1794" (postpone) nil nil) ("1795" (postpone) nil nil) ("1796" (postpone) nil nil) ("1797" (postpone) nil nil) ("1798" (postpone) nil nil) ("1799" (postpone) nil nil) ("1800" (postpone) nil nil) ("1801" (postpone) nil nil) ("1802" (postpone) nil nil) ("1803" (postpone) nil nil) ("1804" (postpone) nil nil) ("1805" (postpone) nil nil) ("1806" (postpone) nil nil) ("1807" (postpone) nil nil) ("1808" (postpone) nil nil) ("1809" (postpone) nil nil) ("1810" (postpone) nil nil) ("1811" (postpone) nil nil) ("1812" (postpone) nil nil) ("1813" (postpone) nil nil) ("1814" (postpone) nil nil) ("1815" (postpone) nil nil) ("1816" (postpone) nil nil) ("1817" (postpone) nil nil) ("1818" (postpone) nil nil) ("1819" (postpone) nil nil) ("1820" (postpone) nil nil) ("1821" (postpone) nil nil) ("1822" (postpone) nil nil) ("1823" (postpone) nil nil) ("1824" (postpone) nil nil) ("1825" (postpone) nil nil) ("1826" (postpone) nil nil) ("1827" (postpone) nil nil) ("1828" (postpone) nil nil) ("1829" (postpone) nil nil) ("1830" (postpone) nil nil) ("1831" (postpone) nil nil) ("1832" (postpone) nil nil) ("1833" (postpone) nil nil) ("1834" (postpone) nil nil) ("1835" (postpone) nil nil) ("1836" (postpone) nil nil) ("1837" (postpone) nil nil) ("1838" (postpone) nil nil) ("1839" (postpone) nil nil) ("1840" (postpone) nil nil) ("1841" (postpone) nil nil) ("1842" (postpone) nil nil) ("1843" (postpone) nil nil) ("1844" (postpone) nil nil) ("1845" (postpone) nil nil) ("1846" (postpone) nil nil) ("1847" (postpone) nil nil) ("1848" (postpone) nil nil) ("1849" (postpone) nil nil) ("1850" (postpone) nil nil) ("1851" (postpone) nil nil) ("1852" (postpone) nil nil) ("1853" (postpone) nil nil) ("1854" (postpone) nil nil) ("1855" (postpone) nil nil) ("1856" (postpone) nil nil) ("1857" (postpone) nil nil) ("1858" (postpone) nil nil) ("1859" (postpone) nil nil) ("1860" (postpone) nil nil) ("1861" (postpone) nil nil) ("1862" (postpone) nil nil) ("1863" (postpone) nil nil) ("1864" (postpone) nil nil) ("1865" (postpone) nil nil) ("1866" (postpone) nil nil) ("1867" (postpone) nil nil) ("1868" (postpone) nil nil) ("1869" (postpone) nil nil) ("1870" (postpone) nil nil) ("1871" (postpone) nil nil) ("1872" (postpone) nil nil) ("1873" (postpone) nil nil) ("1874" (postpone) nil nil) ("1875" (postpone) nil nil) ("1876" (postpone) nil nil) ("1877" (postpone) nil nil) ("1878" (postpone) nil nil) ("1879" (postpone) nil nil) ("1880" (postpone) nil nil) ("1881" (postpone) nil nil) ("1882" (postpone) nil nil) ("1883" (postpone) nil nil) ("1884" (postpone) nil nil) ("1885" (postpone) nil nil) ("1886" (postpone) nil nil) ("1887" (postpone) nil nil) ("1888" (postpone) nil nil) ("1889" (postpone) nil nil) ("1890" (postpone) nil nil) ("1891" (postpone) nil nil) ("1892" (postpone) nil nil) ("1893" (postpone) nil nil) ("1894" (postpone) nil nil) ("1895" (postpone) nil nil) ("1896" (postpone) nil nil) ("1897" (postpone) nil nil) ("1898" (postpone) nil nil) ("1899" (postpone) nil nil) ("1900" (postpone) nil nil) ("1901" (postpone) nil nil) ("1902" (postpone) nil nil) ("1903" (postpone) nil nil) ("1904" (postpone) nil nil) ("1905" (postpone) nil nil) ("1906" (postpone) nil nil) ("1907" (postpone) nil nil) ("1908" (postpone) nil nil) ("1909" (postpone) nil nil) ("1910" (postpone) nil nil) ("1911" (postpone) nil nil) ("1912" (postpone) nil nil) ("1913" (postpone) nil nil) ("1914" (postpone) nil nil) ("1915" (postpone) nil nil) ("1916" (postpone) nil nil) ("1917" (postpone) nil nil) ("1918" (postpone) nil nil) ("1919" (postpone) nil nil) ("1920" (postpone) nil nil) ("1921" (postpone) nil nil) ("1922" (postpone) nil nil) ("1923" (postpone) nil nil) ("1924" (postpone) nil nil) ("1925" (postpone) nil nil) ("1926" (postpone) nil nil) ("1927" (postpone) nil nil) ("1928" (postpone) nil nil) ("1929" (postpone) nil nil) ("1930" (postpone) nil nil) ("1931" (postpone) nil nil) ("1932" (postpone) nil nil) ("1933" (postpone) nil nil) ("1934" (postpone) nil nil) ("1935" (postpone) nil nil) ("1936" (postpone) nil nil) ("1937" (postpone) nil nil) ("1938" (postpone) nil nil) ("1939" (postpone) nil nil) ("1940" (postpone) nil nil) ("1941" (postpone) nil nil) ("1942" (postpone) nil nil) ("1943" (postpone) nil nil) ("1944" (postpone) nil nil) ("1945" (postpone) nil nil) ("1946" (postpone) nil nil) ("1947" (postpone) nil nil) ("1948" (postpone) nil nil) ("1949" (postpone) nil nil) ("1950" (postpone) nil nil) ("1951" (postpone) nil nil) ("1952" (postpone) nil nil) ("1953" (postpone) nil nil) ("1954" (postpone) nil nil) ("1955" (postpone) nil nil) ("1956" (postpone) nil nil) ("1957" (postpone) nil nil) ("1958" (postpone) nil nil) ("1959" (postpone) nil nil) ("1960" (postpone) nil nil) ("1961" (postpone) nil nil) ("1962" (postpone) nil nil) ("1963" (postpone) nil nil) ("1964" (postpone) nil nil) ("1965" (postpone) nil nil) ("1966" (postpone) nil nil) ("1967" (postpone) nil nil) ("1968" (postpone) nil nil) ("1969" (postpone) nil nil) ("1970" (postpone) nil nil) ("1971" (postpone) nil nil) ("1972" (postpone) nil nil) ("1973" (postpone) nil nil) ("1974" (postpone) nil nil) ("1975" (postpone) nil nil) ("1976" (postpone) nil nil) ("1977" (postpone) nil nil) ("1978" (postpone) nil nil) ("1979" (postpone) nil nil) ("1980" (postpone) nil nil) ("1981" (postpone) nil nil) ("1982" (postpone) nil nil) ("1983" (postpone) nil nil) ("1984" (postpone) nil nil) ("1985" (postpone) nil nil) ("1986" (postpone) nil nil) ("1987" (postpone) nil nil) ("1988" (postpone) nil nil) ("1989" (postpone) nil nil) ("1990" (postpone) nil nil) ("1991" (postpone) nil nil) ("1992" (postpone) nil nil) ("1993" (postpone) nil nil) ("1994" (postpone) nil nil) ("1995" (postpone) nil nil) ("1996" (postpone) nil nil) ("1997" (postpone) nil nil) ("1998" (postpone) nil nil) ("1999" (postpone) nil nil) ("2000" (postpone) nil nil) ("2001" (postpone) nil nil) ("2002" (postpone) nil nil) ("2003" (postpone) nil nil) ("2004" (postpone) nil nil) ("2005" (postpone) nil nil) ("2006" (postpone) nil nil) ("2007" (postpone) nil nil) ("2008" (postpone) nil nil) ("2009" (postpone) nil nil) ("2010" (postpone) nil nil) ("2011" (postpone) nil nil) ("2012" (postpone) nil nil) ("2013" (postpone) nil nil) ("2014" (postpone) nil nil) ("2015" (postpone) nil nil) ("2016" (postpone) nil nil) ("2017" (postpone) nil nil) ("2018" (postpone) nil nil) ("2019" (postpone) nil nil) ("2020" (postpone) nil nil) ("2021" (postpone) nil nil) ("2022" (postpone) nil nil) ("2023" (postpone) nil nil) ("2024" (postpone) nil nil) ("2025" (postpone) nil nil) ("2026" (postpone) nil nil) ("2027" (postpone) nil nil) ("2028" (postpone) nil nil) ("2029" (postpone) nil nil) ("2030" (postpone) nil nil) ("2031" (postpone) nil nil) ("2032" (postpone) nil nil) ("2033" (postpone) nil nil) ("2034" (postpone) nil nil) ("2035" (postpone) nil nil) ("2036" (postpone) nil nil) ("2037" (postpone) nil nil) ("2038" (postpone) nil nil) ("2039" (postpone) nil nil) ("2040" (postpone) nil nil) ("2041" (postpone) nil nil) ("2042" (postpone) nil nil) ("2043" (postpone) nil nil) ("2044" (postpone) nil nil) ("2045" (postpone) nil nil) ("2046" (postpone) nil nil) ("2047" (postpone) nil nil) ("2048" (postpone) nil nil) ("2049" (postpone) nil nil) ("2050" (postpone) nil nil) ("2051" (postpone) nil nil) ("2052" (postpone) nil nil) ("2053" (postpone) nil nil) ("2054" (postpone) nil nil) ("2055" (postpone) nil nil) ("2056" (postpone) nil nil) ("2057" (postpone) nil nil) ("2058" (postpone) nil nil) ("2059" (postpone) nil nil) ("2060" (postpone) nil nil) ("2061" (postpone) nil nil) ("2062" (postpone) nil nil) ("2063" (postpone) nil nil) ("2064" (postpone) nil nil) ("2065" (postpone) nil nil) ("2066" (postpone) nil nil) ("2067" (postpone) nil nil) ("2068" (postpone) nil nil) ("2069" (postpone) nil nil) ("2070" (postpone) nil nil) ("2071" (postpone) nil nil) ("2072" (postpone) nil nil) ("2073" (postpone) nil nil) ("2074" (postpone) nil nil) ("2075" (postpone) nil nil) ("2076" (postpone) nil nil) ("2077" (postpone) nil nil) ("2078" (postpone) nil nil) ("2079" (postpone) nil nil) ("2080" (postpone) nil nil) ("2081" (postpone) nil nil) ("2082" (postpone) nil nil) ("2083" (postpone) nil nil) ("2084" (postpone) nil nil) ("2085" (postpone) nil nil) ("2086" (postpone) nil nil) ("2087" (postpone) nil nil) ("2088" (postpone) nil nil) ("2089" (postpone) nil nil) ("2090" (postpone) nil nil) ("2091" (postpone) nil nil) ("2092" (postpone) nil nil) ("2093" (postpone) nil nil) ("2094" (postpone) nil nil) ("2095" (postpone) nil nil) ("2096" (postpone) nil nil) ("2097" (postpone) nil nil) ("2098" (postpone) nil nil) ("2099" (postpone) nil nil) ("2100" (postpone) nil nil) ("2101" (postpone) nil nil) ("2102" (postpone) nil nil) ("2103" (postpone) nil nil) ("2104" (postpone) nil nil) ("2105" (postpone) nil nil) ("2106" (postpone) nil nil) ("2107" (postpone) nil nil) ("2108" (postpone) nil nil) ("2109" (postpone) nil nil) ("2110" (postpone) nil nil) ("2111" (postpone) nil nil) ("2112" (postpone) nil nil) ("2113" (postpone) nil nil) ("2114" (postpone) nil nil) ("2115" (postpone) nil nil) ("2116" (postpone) nil nil) ("2117" (postpone) nil nil) ("2118" (postpone) nil nil) ("2119" (postpone) nil nil) ("2120" (postpone) nil nil) ("2121" (postpone) nil nil) ("2122" (postpone) nil nil) ("2123" (postpone) nil nil) ("2124" (postpone) nil nil) ("2125" (postpone) nil nil) ("2126" (postpone) nil nil) ("2127" (postpone) nil nil) ("2128" (postpone) nil nil) ("2129" (postpone) nil nil) ("2130" (postpone) nil nil) ("2131" (postpone) nil nil) ("2132" (postpone) nil nil) ("2133" (postpone) nil nil) ("2134" (postpone) nil nil) ("2135" (postpone) nil nil) ("2136" (postpone) nil nil) ("2137" (postpone) nil nil) ("2138" (postpone) nil nil) ("2139" (postpone) nil nil) ("2140" (postpone) nil nil) ("2141" (postpone) nil nil) ("2142" (postpone) nil nil) ("2143" (postpone) nil nil) ("2144" (postpone) nil nil) ("2145" (postpone) nil nil) ("2146" (postpone) nil nil) ("2147" (postpone) nil nil) ("2148" (postpone) nil nil) ("2149" (postpone) nil nil) ("2150" (postpone) nil nil) ("2151" (postpone) nil nil) ("2152" (postpone) nil nil) ("2153" (postpone) nil nil) ("2154" (postpone) nil nil) ("2155" (postpone) nil nil) ("2156" (postpone) nil nil) ("2157" (postpone) nil nil) ("2158" (postpone) nil nil) ("2159" (postpone) nil nil) ("2160" (postpone) nil nil) ("2161" (postpone) nil nil) ("2162" (postpone) nil nil) ("2163" (postpone) nil nil) ("2164" (postpone) nil nil) ("2165" (postpone) nil nil) ("2166" (postpone) nil nil) ("2167" (postpone) nil nil) ("2168" (postpone) nil nil) ("2169" (postpone) nil nil) ("2170" (postpone) nil nil) ("2171" (postpone) nil nil) ("2172" (postpone) nil nil) ("2173" (postpone) nil nil) ("2174" (postpone) nil nil) ("2175" (postpone) nil nil) ("2176" (postpone) nil nil) ("2177" (postpone) nil nil) ("2178" (postpone) nil nil) ("2179" (postpone) nil nil) ("2180" (postpone) nil nil) ("2181" (postpone) nil nil) ("2182" (postpone) nil nil) ("2183" (postpone) nil nil) ("2184" (postpone) nil nil) ("2185" (postpone) nil nil) ("2186" (postpone) nil nil) ("2187" (postpone) nil nil) ("2188" (postpone) nil nil) ("2189" (postpone) nil nil) ("2190" (postpone) nil nil) ("2191" (postpone) nil nil) ("2192" (postpone) nil nil) ("2193" (postpone) nil nil) ("2194" (postpone) nil nil) ("2195" (postpone) nil nil) ("2196" (postpone) nil nil) ("2197" (postpone) nil nil) ("2198" (postpone) nil nil) ("2199" (postpone) nil nil) ("2200" (postpone) nil nil) ("2201" (postpone) nil nil) ("2202" (postpone) nil nil) ("2203" (postpone) nil nil) ("2204" (postpone) nil nil) ("2205" (postpone) nil nil) ("2206" (postpone) nil nil) ("2207" (postpone) nil nil) ("2208" (postpone) nil nil) ("2209" (postpone) nil nil) ("2210" (postpone) nil nil) ("2211" (postpone) nil nil) ("2212" (postpone) nil nil) ("2213" (postpone) nil nil) ("2214" (postpone) nil nil) ("2215" (postpone) nil nil) ("2216" (postpone) nil nil) ("2217" (postpone) nil nil) ("2218" (postpone) nil nil) ("2219" (postpone) nil nil) ("2220" (postpone) nil nil) ("2221" (postpone) nil nil) ("2222" (postpone) nil nil) ("2223" (postpone) nil nil) ("2224" (postpone) nil nil) ("2225" (postpone) nil nil) ("2226" (postpone) nil nil) ("2227" (postpone) nil nil) ("2228" (postpone) nil nil) ("2229" (postpone) nil nil) ("2230" (postpone) nil nil) ("2231" (postpone) nil nil) ("2232" (postpone) nil nil) ("2233" (postpone) nil nil) ("2234" (postpone) nil nil) ("2235" (postpone) nil nil) ("2236" (postpone) nil nil) ("2237" (postpone) nil nil) ("2238" (postpone) nil nil) ("2239" (postpone) nil nil) ("2240" (postpone) nil nil) ("2241" (postpone) nil nil) ("2242" (postpone) nil nil) ("2243" (postpone) nil nil) ("2244" (postpone) nil nil) ("2245" (postpone) nil nil) ("2246" (postpone) nil nil) ("2247" (postpone) nil nil) ("2248" (postpone) nil nil) ("2249" (postpone) nil nil) ("2250" (postpone) nil nil) ("2251" (postpone) nil nil) ("2252" (postpone) nil nil) ("2253" (postpone) nil nil) ("2254" (postpone) nil nil) ("2255" (postpone) nil nil) ("2256" (postpone) nil nil) ("2257" (postpone) nil nil) ("2258" (postpone) nil nil) ("2259" (postpone) nil nil) ("2260" (postpone) nil nil) ("2261" (postpone) nil nil) ("2262" (postpone) nil nil) ("2263" (postpone) nil nil) ("2264" (postpone) nil nil) ("2265" (postpone) nil nil) ("2266" (postpone) nil nil) ("2267" (postpone) nil nil) ("2268" (postpone) nil nil) ("2269" (postpone) nil nil) ("2270" (postpone) nil nil) ("2271" (postpone) nil nil) ("2272" (postpone) nil nil) ("2273" (postpone) nil nil) ("2274" (postpone) nil nil) ("2275" (postpone) nil nil) ("2276" (postpone) nil nil) ("2277" (postpone) nil nil) ("2278" (postpone) nil nil) ("2279" (postpone) nil nil) ("2280" (postpone) nil nil) ("2281" (postpone) nil nil) ("2282" (postpone) nil nil) ("2283" (postpone) nil nil) ("2284" (postpone) nil nil) ("2285" (postpone) nil nil) ("2286" (postpone) nil nil) ("2287" (postpone) nil nil) ("2288" (postpone) nil nil) ("2289" (postpone) nil nil) ("2290" (postpone) nil nil) ("2291" (postpone) nil nil) ("2292" (postpone) nil nil) ("2293" (postpone) nil nil) ("2294" (postpone) nil nil) ("2295" (postpone) nil nil) ("2296" (postpone) nil nil) ("2297" (postpone) nil nil) ("2298" (postpone) nil nil) ("2299" (postpone) nil nil) ("2300" (postpone) nil nil) ("2301" (postpone) nil nil) ("2302" (postpone) nil nil) ("2303" (postpone) nil nil) ("2304" (postpone) nil nil) ("2305" (postpone) nil nil) ("2306" (postpone) nil nil) ("2307" (postpone) nil nil) ("2308" (postpone) nil nil) ("2309" (postpone) nil nil) ("2310" (postpone) nil nil) ("2311" (postpone) nil nil) ("2312" (postpone) nil nil) ("2313" (postpone) nil nil) ("2314" (postpone) nil nil) ("2315" (postpone) nil nil) ("2316" (postpone) nil nil) ("2317" (postpone) nil nil) ("2318" (postpone) nil nil) ("2319" (postpone) nil nil) ("2320" (postpone) nil nil) ("2321" (postpone) nil nil) ("2322" (postpone) nil nil) ("2323" (postpone) nil nil) ("2324" (postpone) nil nil) ("2325" (postpone) nil nil) ("2326" (postpone) nil nil) ("2327" (postpone) nil nil) ("2328" (postpone) nil nil) ("2329" (postpone) nil nil) ("2330" (postpone) nil nil) ("2331" (postpone) nil nil) ("2332" (postpone) nil nil) ("2333" (postpone) nil nil) ("2334" (postpone) nil nil) ("2335" (postpone) nil nil) ("2336" (postpone) nil nil) ("2337" (postpone) nil nil) ("2338" (postpone) nil nil) ("2339" (postpone) nil nil) ("2340" (postpone) nil nil) ("2341" (postpone) nil nil) ("2342" (postpone) nil nil) ("2343" (postpone) nil nil) ("2344" (postpone) nil nil) ("2345" (postpone) nil nil) ("2346" (postpone) nil nil) ("2347" (postpone) nil nil) ("2348" (postpone) nil nil) ("2349" (postpone) nil nil) ("2350" (postpone) nil nil) ("2351" (postpone) nil nil) ("2352" (postpone) nil nil) ("2353" (postpone) nil nil) ("2354" (postpone) nil nil) ("2355" (postpone) nil nil) ("2356" (postpone) nil nil) ("2357" (postpone) nil nil) ("2358" (postpone) nil nil) ("2359" (postpone) nil nil) ("2360" (postpone) nil nil) ("2361" (postpone) nil nil) ("2362" (postpone) nil nil) ("2363" (postpone) nil nil) ("2364" (postpone) nil nil) ("2365" (postpone) nil nil) ("2366" (postpone) nil nil) ("2367" (postpone) nil nil) ("2368" (postpone) nil nil) ("2369" (postpone) nil nil) ("2370" (postpone) nil nil) ("2371" (postpone) nil nil) ("2372" (postpone) nil nil) ("2373" (postpone) nil nil) ("2374" (postpone) nil nil) ("2375" (postpone) nil nil) ("2376" (postpone) nil nil) ("2377" (postpone) nil nil) ("2378" (postpone) nil nil) ("2379" (postpone) nil nil) ("2380" (postpone) nil nil) ("2381" (postpone) nil nil) ("2382" (postpone) nil nil) ("2383" (postpone) nil nil) ("2384" (postpone) nil nil) ("2385" (postpone) nil nil) ("2386" (postpone) nil nil) ("2387" (postpone) nil nil) ("2388" (postpone) nil nil) ("2389" (postpone) nil nil) ("2390" (postpone) nil nil) ("2391" (postpone) nil nil) ("2392" (postpone) nil nil) ("2393" (postpone) nil nil) ("2394" (postpone) nil nil) ("2395" (postpone) nil nil) ("2396" (postpone) nil nil) ("2397" (postpone) nil nil) ("2398" (postpone) nil nil) ("2399" (postpone) nil nil) ("2400" (postpone) nil nil) ("2401" (postpone) nil nil) ("2402" (postpone) nil nil) ("2403" (postpone) nil nil) ("2404" (postpone) nil nil) ("2405" (postpone) nil nil) ("2406" (postpone) nil nil) ("2407" (postpone) nil nil) ("2408" (postpone) nil nil) ("2409" (postpone) nil nil) ("2410" (postpone) nil nil) ("2411" (postpone) nil nil) ("2412" (postpone) nil nil) ("2413" (postpone) nil nil) ("2414" (postpone) nil nil) ("2415" (postpone) nil nil) ("2416" (postpone) nil nil) ("2417" (postpone) nil nil) ("2418" (postpone) nil nil) ("2419" (postpone) nil nil) ("2420" (postpone) nil nil) ("2421" (postpone) nil nil) ("2422" (postpone) nil nil) ("2423" (postpone) nil nil) ("2424" (postpone) nil nil) ("2425" (postpone) nil nil) ("2426" (postpone) nil nil) ("2427" (postpone) nil nil) ("2428" (postpone) nil nil) ("2429" (postpone) nil nil) ("2430" (postpone) nil nil) ("2431" (postpone) nil nil) ("2432" (postpone) nil nil) ("2433" (postpone) nil nil) ("2434" (postpone) nil nil) ("2435" (postpone) nil nil) ("2436" (postpone) nil nil) ("2437" (postpone) nil nil) ("2438" (postpone) nil nil) ("2439" (postpone) nil nil) ("2440" (postpone) nil nil) ("2441" (postpone) nil nil) ("2442" (postpone) nil nil) ("2443" (postpone) nil nil) ("2444" (postpone) nil nil) ("2445" (postpone) nil nil) ("2446" (postpone) nil nil) ("2447" (postpone) nil nil) ("2448" (postpone) nil nil) ("2449" (postpone) nil nil) ("2450" (postpone) nil nil) ("2451" (postpone) nil nil) ("2452" (postpone) nil nil) ("2453" (postpone) nil nil) ("2454" (postpone) nil nil) ("2455" (postpone) nil nil) ("2456" (postpone) nil nil) ("2457" (postpone) nil nil) ("2458" (postpone) nil nil) ("2459" (postpone) nil nil) ("2460" (postpone) nil nil) ("2461" (postpone) nil nil) ("2462" (postpone) nil nil) ("2463" (postpone) nil nil) ("2464" (postpone) nil nil) ("2465" (postpone) nil nil) ("2466" (postpone) nil nil) ("2467" (postpone) nil nil) ("2468" (postpone) nil nil) ("2469" (postpone) nil nil) ("2470" (postpone) nil nil) ("2471" (postpone) nil nil) ("2472" (postpone) nil nil) ("2473" (postpone) nil nil) ("2474" (postpone) nil nil) ("2475" (postpone) nil nil) ("2476" (postpone) nil nil) ("2477" (postpone) nil nil) ("2478" (postpone) nil nil) ("2479" (postpone) nil nil) ("2480" (postpone) nil nil) ("2481" (postpone) nil nil) ("2482" (postpone) nil nil) ("2483" (postpone) nil nil) ("2484" (postpone) nil nil) ("2485" (postpone) nil nil) ("2486" (postpone) nil nil) ("2487" (postpone) nil nil) ("2488" (postpone) nil nil) ("2489" (postpone) nil nil) ("2490" (postpone) nil nil) ("2491" (postpone) nil nil) ("2492" (postpone) nil nil) ("2493" (postpone) nil nil) ("2494" (postpone) nil nil) ("2495" (postpone) nil nil) ("2496" (postpone) nil nil) ("2497" (postpone) nil nil) ("2498" (postpone) nil nil) ("2499" (postpone) nil nil) ("2500" (postpone) nil nil) ("2501" (postpone) nil nil) ("2502" (postpone) nil nil) ("2503" (postpone) nil nil) ("2504" (postpone) nil nil) ("2505" (postpone) nil nil) ("2506" (postpone) nil nil) ("2507" (postpone) nil nil) ("2508" (postpone) nil nil) ("2509" (postpone) nil nil) ("2510" (postpone) nil nil) ("2511" (postpone) nil nil) ("2512" (postpone) nil nil) ("2513" (postpone) nil nil) ("2514" (postpone) nil nil) ("2515" (postpone) nil nil) ("2516" (postpone) nil nil) ("2517" (postpone) nil nil) ("2518" (postpone) nil nil) ("2519" (postpone) nil nil) ("2520" (postpone) nil nil) ("2521" (postpone) nil nil) ("2522" (postpone) nil nil) ("2523" (postpone) nil nil) ("2524" (postpone) nil nil) ("2525" (postpone) nil nil) ("2526" (postpone) nil nil) ("2527" (postpone) nil nil) ("2528" (postpone) nil nil) ("2529" (postpone) nil nil) ("2530" (postpone) nil nil) ("2531" (postpone) nil nil) ("2532" (postpone) nil nil) ("2533" (postpone) nil nil) ("2534" (postpone) nil nil) ("2535" (postpone) nil nil) ("2536" (postpone) nil nil) ("2537" (postpone) nil nil) ("2538" (postpone) nil nil) ("2539" (postpone) nil nil) ("2540" (postpone) nil nil) ("2541" (postpone) nil nil) ("2542" (postpone) nil nil) ("2543" (postpone) nil nil) ("2544" (postpone) nil nil) ("2545" (postpone) nil nil) ("2546" (postpone) nil nil) ("2547" (postpone) nil nil) ("2548" (postpone) nil nil) ("2549" (postpone) nil nil) ("2550" (postpone) nil nil) ("2551" (postpone) nil nil) ("2552" (postpone) nil nil) ("2553" (postpone) nil nil) ("2554" (postpone) nil nil) ("2555" (postpone) nil nil) ("2556" (postpone) nil nil) ("2557" (postpone) nil nil) ("2558" (postpone) nil nil) ("2559" (postpone) nil nil) ("2560" (postpone) nil nil) ("2561" (postpone) nil nil) ("2562" (postpone) nil nil) ("2563" (postpone) nil nil) ("2564" (postpone) nil nil) ("2565" (postpone) nil nil) ("2566" (postpone) nil nil) ("2567" (postpone) nil nil) ("2568" (postpone) nil nil) ("2569" (postpone) nil nil) ("2570" (postpone) nil nil) ("2571" (postpone) nil nil) ("2572" (postpone) nil nil) ("2573" (postpone) nil nil) ("2574" (postpone) nil nil) ("2575" (postpone) nil nil) ("2576" (postpone) nil nil) ("2577" (postpone) nil nil) ("2578" (postpone) nil nil) ("2579" (postpone) nil nil) ("2580" (postpone) nil nil) ("2581" (postpone) nil nil) ("2582" (postpone) nil nil) ("2583" (postpone) nil nil) ("2584" (postpone) nil nil) ("2585" (postpone) nil nil) ("2586" (postpone) nil nil) ("2587" (postpone) nil nil) ("2588" (postpone) nil nil) ("2589" (postpone) nil nil) ("2590" (postpone) nil nil) ("2591" (postpone) nil nil) ("2592" (postpone) nil nil) ("2593" (postpone) nil nil) ("2594" (postpone) nil nil) ("2595" (postpone) nil nil) ("2596" (postpone) nil nil) ("2597" (postpone) nil nil) ("2598" (postpone) nil nil) ("2599" (postpone) nil nil) ("2600" (postpone) nil nil) ("2601" (postpone) nil nil) ("2602" (postpone) nil nil) ("2603" (postpone) nil nil) ("2604" (postpone) nil nil) ("2605" (postpone) nil nil) ("2606" (postpone) nil nil) ("2607" (postpone) nil nil) ("2608" (postpone) nil nil) ("2609" (postpone) nil nil) ("2610" (postpone) nil nil) ("2611" (postpone) nil nil) ("2612" (postpone) nil nil) ("2613" (postpone) nil nil) ("2614" (postpone) nil nil) ("2615" (postpone) nil nil) ("2616" (postpone) nil nil) ("2617" (postpone) nil nil) ("2618" (postpone) nil nil) ("2619" (postpone) nil nil) ("2620" (postpone) nil nil) ("2621" (postpone) nil nil) ("2622" (postpone) nil nil) ("2623" (postpone) nil nil) ("2624" (postpone) nil nil) ("2625" (postpone) nil nil) ("2626" (postpone) nil nil) ("2627" (postpone) nil nil) ("2628" (postpone) nil nil) ("2629" (postpone) nil nil) ("2630" (postpone) nil nil) ("2631" (postpone) nil nil) ("2632" (postpone) nil nil) ("2633" (postpone) nil nil) ("2634" (postpone) nil nil) ("2635" (postpone) nil nil) ("2636" (postpone) nil nil) ("2637" (postpone) nil nil) ("2638" (postpone) nil nil) ("2639" (postpone) nil nil) ("2640" (postpone) nil nil) ("2641" (postpone) nil nil) ("2642" (postpone) nil nil) ("2643" (postpone) nil nil) ("2644" (postpone) nil nil) ("2645" (postpone) nil nil) ("2646" (postpone) nil nil) ("2647" (postpone) nil nil) ("2648" (postpone) nil nil) ("2649" (postpone) nil nil) ("2650" (postpone) nil nil) ("2651" (postpone) nil nil) ("2652" (postpone) nil nil) ("2653" (postpone) nil nil) ("2654" (postpone) nil nil) ("2655" (postpone) nil nil) ("2656" (postpone) nil nil) ("2657" (postpone) nil nil) ("2658" (postpone) nil nil) ("2659" (postpone) nil nil) ("2660" (postpone) nil nil) ("2661" (postpone) nil nil) ("2662" (postpone) nil nil) ("2663" (postpone) nil nil) ("2664" (postpone) nil nil) ("2665" (postpone) nil nil) ("2666" (postpone) nil nil) ("2667" (postpone) nil nil) ("2668" (postpone) nil nil) ("2669" (postpone) nil nil) ("2670" (postpone) nil nil) ("2671" (postpone) nil nil) ("2672" (postpone) nil nil) ("2673" (postpone) nil nil) ("2674" (postpone) nil nil) ("2675" (postpone) nil nil) ("2676" (postpone) nil nil) ("2677" (postpone) nil nil) ("2678" (postpone) nil nil) ("2679" (postpone) nil nil) ("2680" (postpone) nil nil) ("2681" (postpone) nil nil) ("2682" (postpone) nil nil) ("2683" (postpone) nil nil) ("2684" (postpone) nil nil) ("2685" (postpone) nil nil) ("2686" (postpone) nil nil) ("2687" (postpone) nil nil) ("2688" (postpone) nil nil) ("2689" (postpone) nil nil) ("2690" (postpone) nil nil) ("2691" (postpone) nil nil) ("2692" (postpone) nil nil) ("2693" (postpone) nil nil) ("2694" (postpone) nil nil) ("2695" (postpone) nil nil) ("2696" (postpone) nil nil) ("2697" (postpone) nil nil) ("2698" (postpone) nil nil) ("2699" (postpone) nil nil) ("2700" (postpone) nil nil) ("2701" (postpone) nil nil) ("2702" (postpone) nil nil) ("2703" (postpone) nil nil) ("2704" (postpone) nil nil) ("2705" (postpone) nil nil) ("2706" (postpone) nil nil) ("2707" (postpone) nil nil) ("2708" (postpone) nil nil) ("2709" (postpone) nil nil) ("2710" (postpone) nil nil) ("2711" (postpone) nil nil) ("2712" (postpone) nil nil) ("2713" (postpone) nil nil) ("2714" (postpone) nil nil) ("2715" (postpone) nil nil) ("2716" (postpone) nil nil) ("2717" (postpone) nil nil) ("2718" (postpone) nil nil) ("2719" (postpone) nil nil) ("2720" (postpone) nil nil) ("2721" (postpone) nil nil) ("2722" (postpone) nil nil) ("2723" (postpone) nil nil) ("2724" (postpone) nil nil) ("2725" (postpone) nil nil) ("2726" (postpone) nil nil) ("2727" (postpone) nil nil) ("2728" (postpone) nil nil) ("2729" (postpone) nil nil) ("2730" (postpone) nil nil) ("2731" (postpone) nil nil) ("2732" (postpone) nil nil) ("2733" (postpone) nil nil) ("2734" (postpone) nil nil) ("2735" (postpone) nil nil) ("2736" (postpone) nil nil) ("2737" (postpone) nil nil) ("2738" (postpone) nil nil) ("2739" (postpone) nil nil) ("2740" (postpone) nil nil) ("2741" (postpone) nil nil) ("2742" (postpone) nil nil) ("2743" (postpone) nil nil) ("2744" (postpone) nil nil) ("2745" (postpone) nil nil) ("2746" (postpone) nil nil) ("2747" (postpone) nil nil) ("2748" (postpone) nil nil) ("2749" (postpone) nil nil) ("2750" (postpone) nil nil) ("2751" (postpone) nil nil) ("2752" (postpone) nil nil) ("2753" (postpone) nil nil) ("2754" (postpone) nil nil) ("2755" (postpone) nil nil) ("2756" (postpone) nil nil) ("2757" (postpone) nil nil) ("2758" (postpone) nil nil) ("2759" (postpone) nil nil) ("2760" (postpone) nil nil) ("2761" (postpone) nil nil) ("2762" (postpone) nil nil) ("2763" (postpone) nil nil) ("2764" (postpone) nil nil) ("2765" (postpone) nil nil) ("2766" (postpone) nil nil) ("2767" (postpone) nil nil) ("2768" (postpone) nil nil) ("2769" (postpone) nil nil) ("2770" (postpone) nil nil) ("2771" (postpone) nil nil) ("2772" (postpone) nil nil) ("2773" (postpone) nil nil) ("2774" (postpone) nil nil) ("2775" (postpone) nil nil) ("2776" (postpone) nil nil) ("2777" (postpone) nil nil) ("2778" (postpone) nil nil) ("2779" (postpone) nil nil) ("2780" (postpone) nil nil) ("2781" (postpone) nil nil) ("2782" (postpone) nil nil) ("2783" (postpone) nil nil) ("2784" (postpone) nil nil) ("2785" (postpone) nil nil) ("2786" (postpone) nil nil) ("2787" (postpone) nil nil) ("2788" (postpone) nil nil) ("2789" (postpone) nil nil) ("2790" (postpone) nil nil) ("2791" (postpone) nil nil) ("2792" (postpone) nil nil) ("2793" (postpone) nil nil) ("2794" (postpone) nil nil) ("2795" (postpone) nil nil) ("2796" (postpone) nil nil) ("2797" (postpone) nil nil) ("2798" (postpone) nil nil) ("2799" (postpone) nil nil) ("2800" (postpone) nil nil) ("2801" (postpone) nil nil) ("2802" (postpone) nil nil) ("2803" (postpone) nil nil) ("2804" (postpone) nil nil) ("2805" (postpone) nil nil) ("2806" (postpone) nil nil) ("2807" (postpone) nil nil) ("2808" (postpone) nil nil) ("2809" (postpone) nil nil) ("2810" (postpone) nil nil) ("2811" (postpone) nil nil) ("2812" (postpone) nil nil) ("2813" (postpone) nil nil) ("2814" (postpone) nil nil) ("2815" (postpone) nil nil) ("2816" (postpone) nil nil) ("2817" (postpone) nil nil) ("2818" (postpone) nil nil) ("2819" (postpone) nil nil) ("2820" (postpone) nil nil) ("2821" (postpone) nil nil) ("2822" (postpone) nil nil) ("2823" (postpone) nil nil) ("2824" (postpone) nil nil) ("2825" (postpone) nil nil) ("2826" (postpone) nil nil) ("2827" (postpone) nil nil) ("2828" (postpone) nil nil) ("2829" (postpone) nil nil) ("2830" (postpone) nil nil) ("2831" (postpone) nil nil) ("2832" (postpone) nil nil) ("2833" (postpone) nil nil) ("2834" (postpone) nil nil) ("2835" (postpone) nil nil) ("2836" (postpone) nil nil) ("2837" (postpone) nil nil) ("2838" (postpone) nil nil) ("2839" (postpone) nil nil) ("2840" (postpone) nil nil) ("2841" (postpone) nil nil) ("2842" (postpone) nil nil) ("2843" (postpone) nil nil) ("2844" (postpone) nil nil) ("2845" (postpone) nil nil) ("2846" (postpone) nil nil) ("2847" (postpone) nil nil) ("2848" (postpone) nil nil) ("2849" (postpone) nil nil) ("2850" (postpone) nil nil) ("2851" (postpone) nil nil) ("2852" (postpone) nil nil) ("2853" (postpone) nil nil) ("2854" (postpone) nil nil) ("2855" (postpone) nil nil) ("2856" (postpone) nil nil) ("2857" (postpone) nil nil) ("2858" (postpone) nil nil) ("2859" (postpone) nil nil) ("2860" (postpone) nil nil) ("2861" (postpone) nil nil) ("2862" (postpone) nil nil) ("2863" (postpone) nil nil) ("2864" (postpone) nil nil) ("2865" (postpone) nil nil) ("2866" (postpone) nil nil) ("2867" (postpone) nil nil) ("2868" (postpone) nil nil) ("2869" (postpone) nil nil) ("2870" (postpone) nil nil) ("2871" (postpone) nil nil) ("2872" (postpone) nil nil) ("2873" (postpone) nil nil) ("2874" (postpone) nil nil) ("2875" (postpone) nil nil) ("2876" (postpone) nil nil) ("2877" (postpone) nil nil) ("2878" (postpone) nil nil) ("2879" (postpone) nil nil) ("2880" (postpone) nil nil) ("2881" (postpone) nil nil) ("2882" (postpone) nil nil) ("2883" (postpone) nil nil) ("2884" (postpone) nil nil) ("2885" (postpone) nil nil) ("2886" (postpone) nil nil) ("2887" (postpone) nil nil) ("2888" (postpone) nil nil) ("2889" (postpone) nil nil) ("2890" (postpone) nil nil) ("2891" (postpone) nil nil) ("2892" (postpone) nil nil) ("2893" (postpone) nil nil) ("2894" (postpone) nil nil) ("2895" (postpone) nil nil) ("2896" (postpone) nil nil) ("2897" (postpone) nil nil) ("2898" (postpone) nil nil) ("2899" (postpone) nil nil) ("2900" (postpone) nil nil) ("2901" (postpone) nil nil) ("2902" (postpone) nil nil) ("2903" (postpone) nil nil) ("2904" (postpone) nil nil) ("2905" (postpone) nil nil) ("2906" (postpone) nil nil) ("2907" (postpone) nil nil) ("2908" (postpone) nil nil) ("2909" (postpone) nil nil) ("2910" (postpone) nil nil) ("2911" (postpone) nil nil) ("2912" (postpone) nil nil) ("2913" (postpone) nil nil) ("2914" (postpone) nil nil) ("2915" (postpone) nil nil) ("2916" (postpone) nil nil) ("2917" (postpone) nil nil) ("2918" (postpone) nil nil) ("2919" (postpone) nil nil) ("2920" (postpone) nil nil) ("2921" (postpone) nil nil) ("2922" (postpone) nil nil) ("2923" (postpone) nil nil) ("2924" (postpone) nil nil) ("2925" (postpone) nil nil) ("2926" (postpone) nil nil) ("2927" (postpone) nil nil) ("2928" (postpone) nil nil) ("2929" (postpone) nil nil) ("2930" (postpone) nil nil) ("2931" (postpone) nil nil) ("2932" (postpone) nil nil) ("2933" (postpone) nil nil) ("2934" (postpone) nil nil) ("2935" (postpone) nil nil) ("2936" (postpone) nil nil) ("2937" (postpone) nil nil) ("2938" (postpone) nil nil) ("2939" (postpone) nil nil) ("2940" (postpone) nil nil) ("2941" (postpone) nil nil) ("2942" (postpone) nil nil) ("2943" (postpone) nil nil) ("2944" (postpone) nil nil) ("2945" (postpone) nil nil) ("2946" (postpone) nil nil) ("2947" (postpone) nil nil) ("2948" (postpone) nil nil) ("2949" (postpone) nil nil) ("2950" (postpone) nil nil) ("2951" (postpone) nil nil) ("2952" (postpone) nil nil) ("2953" (postpone) nil nil) ("2954" (postpone) nil nil) ("2955" (postpone) nil nil) ("2956" (postpone) nil nil) ("2957" (postpone) nil nil) ("2958" (postpone) nil nil) ("2959" (postpone) nil nil) ("2960" (postpone) nil nil) ("2961" (postpone) nil nil) ("2962" (postpone) nil nil) ("2963" (postpone) nil nil) ("2964" (postpone) nil nil) ("2965" (postpone) nil nil) ("2966" (postpone) nil nil) ("2967" (postpone) nil nil) ("2968" (postpone) nil nil) ("2969" (postpone) nil nil) ("2970" (postpone) nil nil) ("2971" (postpone) nil nil) ("2972" (postpone) nil nil) ("2973" (postpone) nil nil) ("2974" (postpone) nil nil) ("2975" (postpone) nil nil) ("2976" (postpone) nil nil) ("2977" (postpone) nil nil) ("2978" (postpone) nil nil) ("2979" (postpone) nil nil) ("2980" (postpone) nil nil) ("2981" (postpone) nil nil) ("2982" (postpone) nil nil) ("2983" (postpone) nil nil) ("2984" (postpone) nil nil) ("2985" (postpone) nil nil) ("2986" (postpone) nil nil) ("2987" (postpone) nil nil) ("2988" (postpone) nil nil) ("2989" (postpone) nil nil) ("2990" (postpone) nil nil) ("2991" (postpone) nil nil) ("2992" (postpone) nil nil) ("2993" (postpone) nil nil) ("2994" (postpone) nil nil) ("2995" (postpone) nil nil) ("2996" (postpone) nil nil) ("2997" (postpone) nil nil) ("2998" (postpone) nil nil) ("2999" (postpone) nil nil) ("3000" (postpone) nil nil) ("3001" (postpone) nil nil) ("3002" (postpone) nil nil) ("3003" (postpone) nil nil) ("3004" (postpone) nil nil) ("3005" (postpone) nil nil) ("3006" (postpone) nil nil) ("3007" (postpone) nil nil) ("3008" (postpone) nil nil) ("3009" (postpone) nil nil) ("3010" (postpone) nil nil) ("3011" (postpone) nil nil) ("3012" (postpone) nil nil) ("3013" (postpone) nil nil) ("3014" (postpone) nil nil) ("3015" (postpone) nil nil) ("3016" (postpone) nil nil) ("3017" (postpone) nil nil) ("3018" (postpone) nil nil) ("3019" (postpone) nil nil) ("3020" (postpone) nil nil) ("3021" (postpone) nil nil) ("3022" (postpone) nil nil) ("3023" (postpone) nil nil) ("3024" (postpone) nil nil) ("3025" (postpone) nil nil) ("3026" (postpone) nil nil) ("3027" (postpone) nil nil) ("3028" (postpone) nil nil) ("3029" (postpone) nil nil) ("3030" (postpone) nil nil) ("3031" (postpone) nil nil) ("3032" (postpone) nil nil) ("3033" (postpone) nil nil) ("3034" (postpone) nil nil) ("3035" (postpone) nil nil) ("3036" (postpone) nil nil) ("3037" (postpone) nil nil) ("3038" (postpone) nil nil) ("3039" (postpone) nil nil) ("3040" (postpone) nil nil) ("3041" (postpone) nil nil) ("3042" (postpone) nil nil) ("3043" (postpone) nil nil) ("3044" (postpone) nil nil) ("3045" (postpone) nil nil) ("3046" (postpone) nil nil) ("3047" (postpone) nil nil) ("3048" (postpone) nil nil) ("3049" (postpone) nil nil) ("3050" (postpone) nil nil) ("3051" (postpone) nil nil) ("3052" (postpone) nil nil) ("3053" (postpone) nil nil) ("3054" (postpone) nil nil) ("3055" (postpone) nil nil) ("3056" (postpone) nil nil) ("3057" (postpone) nil nil) ("3058" (postpone) nil nil) ("3059" (postpone) nil nil) ("3060" (postpone) nil nil) ("3061" (postpone) nil nil) ("3062" (postpone) nil nil) ("3063" (postpone) nil nil) ("3064" (postpone) nil nil) ("3065" (postpone) nil nil) ("3066" (postpone) nil nil) ("3067" (postpone) nil nil) ("3068" (postpone) nil nil) ("3069" (postpone) nil nil) ("3070" (postpone) nil nil) ("3071" (postpone) nil nil) ("3072" (postpone) nil nil) ("3073" (postpone) nil nil) ("3074" (postpone) nil nil) ("3075" (postpone) nil nil) ("3076" (postpone) nil nil) ("3077" (postpone) nil nil) ("3078" (postpone) nil nil) ("3079" (postpone) nil nil) ("3080" (postpone) nil nil) ("3081" (postpone) nil nil) ("3082" (postpone) nil nil) ("3083" (postpone) nil nil) ("3084" (postpone) nil nil) ("3085" (postpone) nil nil) ("3086" (postpone) nil nil) ("3087" (postpone) nil nil) ("3088" (postpone) nil nil) ("3089" (postpone) nil nil) ("3090" (postpone) nil nil) ("3091" (postpone) nil nil) ("3092" (postpone) nil nil) ("3093" (postpone) nil nil) ("3094" (postpone) nil nil) ("3095" (postpone) nil nil) ("3096" (postpone) nil nil) ("3097" (postpone) nil nil) ("3098" (postpone) nil nil) ("3099" (postpone) nil nil) ("3100" (postpone) nil nil) ("3101" (postpone) nil nil) ("3102" (postpone) nil nil) ("3103" (postpone) nil nil) ("3104" (postpone) nil nil) ("3105" (postpone) nil nil) ("3106" (postpone) nil nil) ("3107" (postpone) nil nil) ("3108" (postpone) nil nil) ("3109" (postpone) nil nil) ("3110" (postpone) nil nil) ("3111" (postpone) nil nil) ("3112" (postpone) nil nil) ("3113" (postpone) nil nil) ("3114" (postpone) nil nil) ("3115" (postpone) nil nil) ("3116" (postpone) nil nil) ("3117" (postpone) nil nil) ("3118" (postpone) nil nil) ("3119" (postpone) nil nil) ("3120" (postpone) nil nil) ("3121" (postpone) nil nil) ("3122" (postpone) nil nil) ("3123" (postpone) nil nil) ("3124" (postpone) nil nil) ("3125" (postpone) nil nil) ("3126" (postpone) nil nil) ("3127" (postpone) nil nil) ("3128" (postpone) nil nil) ("3129" (postpone) nil nil) ("3130" (postpone) nil nil) ("3131" (postpone) nil nil) ("3132" (postpone) nil nil) ("3133" (postpone) nil nil) ("3134" (postpone) nil nil) ("3135" (postpone) nil nil) ("3136" (postpone) nil nil) ("3137" (postpone) nil nil) ("3138" (postpone) nil nil) ("3139" (postpone) nil nil) ("3140" (postpone) nil nil) ("3141" (postpone) nil nil) ("3142" (postpone) nil nil) ("3143" (postpone) nil nil) ("3144" (postpone) nil nil) ("3145" (postpone) nil nil) ("3146" (postpone) nil nil) ("3147" (postpone) nil nil) ("3148" (postpone) nil nil) ("3149" (postpone) nil nil) ("3150" (postpone) nil nil) ("3151" (postpone) nil nil) ("3152" (postpone) nil nil) ("3153" (postpone) nil nil) ("3154" (postpone) nil nil) ("3155" (postpone) nil nil) ("3156" (postpone) nil nil) ("3157" (postpone) nil nil) ("3158" (postpone) nil nil) ("3159" (postpone) nil nil) ("3160" (postpone) nil nil) ("3161" (postpone) nil nil) ("3162" (postpone) nil nil) ("3163" (postpone) nil nil) ("3164" (postpone) nil nil) ("3165" (postpone) nil nil) ("3166" (postpone) nil nil) ("3167" (postpone) nil nil) ("3168" (postpone) nil nil) ("3169" (postpone) nil nil) ("3170" (postpone) nil nil) ("3171" (postpone) nil nil) ("3172" (postpone) nil nil) ("3173" (postpone) nil nil) ("3174" (postpone) nil nil) ("3175" (postpone) nil nil) ("3176" (postpone) nil nil) ("3177" (postpone) nil nil) ("3178" (postpone) nil nil) ("3179" (postpone) nil nil) ("3180" (postpone) nil nil) ("3181" (postpone) nil nil) ("3182" (postpone) nil nil) ("3183" (postpone) nil nil) ("3184" (postpone) nil nil) ("3185" (postpone) nil nil) ("3186" (postpone) nil nil) ("3187" (postpone) nil nil) ("3188" (postpone) nil nil) ("3189" (postpone) nil nil) ("3190" (postpone) nil nil) ("3191" (postpone) nil nil) ("3192" (postpone) nil nil) ("3193" (postpone) nil nil) ("3194" (postpone) nil nil) ("3195" (postpone) nil nil) ("3196" (postpone) nil nil) ("3197" (postpone) nil nil) ("3198" (postpone) nil nil) ("3199" (postpone) nil nil) ("3200" (postpone) nil nil) ("3201" (postpone) nil nil) ("3202" (postpone) nil nil) ("3203" (postpone) nil nil) ("3204" (postpone) nil nil) ("3205" (postpone) nil nil) ("3206" (postpone) nil nil) ("3207" (postpone) nil nil) ("3208" (postpone) nil nil) ("3209" (postpone) nil nil) ("3210" (postpone) nil nil) ("3211" (postpone) nil nil) ("3212" (postpone) nil nil) ("3213" (postpone) nil nil) ("3214" (postpone) nil nil) ("3215" (postpone) nil nil) ("3216" (postpone) nil nil) ("3217" (postpone) nil nil) ("3218" (postpone) nil nil) ("3219" (postpone) nil nil) ("3220" (postpone) nil nil) ("3221" (postpone) nil nil) ("3222" (postpone) nil nil) ("3223" (postpone) nil nil) ("3224" (postpone) nil nil) ("3225" (postpone) nil nil) ("3226" (postpone) nil nil) ("3227" (postpone) nil nil) ("3228" (postpone) nil nil) ("3229" (postpone) nil nil) ("3230" (postpone) nil nil) ("3231" (postpone) nil nil) ("3232" (postpone) nil nil) ("3233" (postpone) nil nil) ("3234" (postpone) nil nil) ("3235" (postpone) nil nil) ("3236" (postpone) nil nil) ("3237" (postpone) nil nil) ("3238" (postpone) nil nil) ("3239" (postpone) nil nil) ("3240" (postpone) nil nil) ("3241" (postpone) nil nil) ("3242" (postpone) nil nil) ("3243" (postpone) nil nil) ("3244" (postpone) nil nil) ("3245" (postpone) nil nil) ("3246" (postpone) nil nil) ("3247" (postpone) nil nil) ("3248" (postpone) nil nil) ("3249" (postpone) nil nil) ("3250" (postpone) nil nil) ("3251" (postpone) nil nil) ("3252" (postpone) nil nil) ("3253" (postpone) nil nil) ("3254" (postpone) nil nil) ("3255" (postpone) nil nil) ("3256" (postpone) nil nil) ("3257" (postpone) nil nil) ("3258" (postpone) nil nil) ("3259" (postpone) nil nil) ("3260" (postpone) nil nil) ("3261" (postpone) nil nil) ("3262" (postpone) nil nil) ("3263" (postpone) nil nil) ("3264" (postpone) nil nil) ("3265" (postpone) nil nil) ("3266" (postpone) nil nil) ("3267" (postpone) nil nil) ("3268" (postpone) nil nil) ("3269" (postpone) nil nil) ("3270" (postpone) nil nil) ("3271" (postpone) nil nil) ("3272" (postpone) nil nil) ("3273" (postpone) nil nil) ("3274" (postpone) nil nil) ("3275" (postpone) nil nil) ("3276" (postpone) nil nil) ("3277" (postpone) nil nil) ("3278" (postpone) nil nil) ("3279" (postpone) nil nil) ("3280" (postpone) nil nil) ("3281" (postpone) nil nil) ("3282" (postpone) nil nil) ("3283" (postpone) nil nil) ("3284" (postpone) nil nil) ("3285" (postpone) nil nil) ("3286" (postpone) nil nil) ("3287" (postpone) nil nil) ("3288" (postpone) nil nil) ("3289" (postpone) nil nil) ("3290" (postpone) nil nil) ("3291" (postpone) nil nil) ("3292" (postpone) nil nil) ("3293" (postpone) nil nil) ("3294" (postpone) nil nil) ("3295" (postpone) nil nil) ("3296" (postpone) nil nil) ("3297" (postpone) nil nil) ("3298" (postpone) nil nil) ("3299" (postpone) nil nil) ("3300" (postpone) nil nil) ("3301" (postpone) nil nil) ("3302" (postpone) nil nil) ("3303" (postpone) nil nil) ("3304" (postpone) nil nil) ("3305" (postpone) nil nil) ("3306" (postpone) nil nil) ("3307" (postpone) nil nil) ("3308" (postpone) nil nil) ("3309" (postpone) nil nil) ("3310" (postpone) nil nil) ("3311" (postpone) nil nil) ("3312" (postpone) nil nil) ("3313" (postpone) nil nil) ("3314" (postpone) nil nil) ("3315" (postpone) nil nil) ("3316" (postpone) nil nil) ("3317" (postpone) nil nil) ("3318" (postpone) nil nil) ("3319" (postpone) nil nil) ("3320" (postpone) nil nil) ("3321" (postpone) nil nil) ("3322" (postpone) nil nil) ("3323" (postpone) nil nil) ("3324" (postpone) nil nil) ("3325" (postpone) nil nil) ("3326" (postpone) nil nil) ("3327" (postpone) nil nil) ("3328" (postpone) nil nil) ("3329" (postpone) nil nil) ("3330" (postpone) nil nil) ("3331" (postpone) nil nil) ("3332" (postpone) nil nil) ("3333" (postpone) nil nil) ("3334" (postpone) nil nil) ("3335" (postpone) nil nil) ("3336" (postpone) nil nil) ("3337" (postpone) nil nil) ("3338" (postpone) nil nil) ("3339" (postpone) nil nil) ("3340" (postpone) nil nil) ("3341" (postpone) nil nil) ("3342" (postpone) nil nil) ("3343" (postpone) nil nil) ("3344" (postpone) nil nil) ("3345" (postpone) nil nil) ("3346" (postpone) nil nil) ("3347" (postpone) nil nil) ("3348" (postpone) nil nil) ("3349" (postpone) nil nil) ("3350" (postpone) nil nil) ("3351" (postpone) nil nil) ("3352" (postpone) nil nil) ("3353" (postpone) nil nil) ("3354" (postpone) nil nil) ("3355" (postpone) nil nil) ("3356" (postpone) nil nil) ("3357" (postpone) nil nil) ("3358" (postpone) nil nil) ("3359" (postpone) nil nil) ("3360" (postpone) nil nil) ("3361" (postpone) nil nil) ("3362" (postpone) nil nil) ("3363" (postpone) nil nil) ("3364" (postpone) nil nil) ("3365" (postpone) nil nil) ("3366" (postpone) nil nil) ("3367" (postpone) nil nil) ("3368" (postpone) nil nil) ("3369" (postpone) nil nil) ("3370" (postpone) nil nil) ("3371" (postpone) nil nil) ("3372" (postpone) nil nil) ("3373" (postpone) nil nil) ("3374" (postpone) nil nil) ("3375" (postpone) nil nil) ("3376" (postpone) nil nil) ("3377" (postpone) nil nil) ("3378" (postpone) nil nil) ("3379" (postpone) nil nil) ("3380" (postpone) nil nil) ("3381" (postpone) nil nil) ("3382" (postpone) nil nil) ("3383" (postpone) nil nil) ("3384" (postpone) nil nil) ("3385" (postpone) nil nil) ("3386" (postpone) nil nil) ("3387" (postpone) nil nil) ("3388" (postpone) nil nil) ("3389" (postpone) nil nil) ("3390" (postpone) nil nil) ("3391" (postpone) nil nil) ("3392" (postpone) nil nil) ("3393" (postpone) nil nil) ("3394" (postpone) nil nil) ("3395" (postpone) nil nil) ("3396" (postpone) nil nil) ("3397" (postpone) nil nil) ("3398" (postpone) nil nil) ("3399" (postpone) nil nil) ("3400" (postpone) nil nil) ("3401" (postpone) nil nil) ("3402" (postpone) nil nil) ("3403" (postpone) nil nil) ("3404" (postpone) nil nil) ("3405" (postpone) nil nil) ("3406" (postpone) nil nil) ("3407" (postpone) nil nil) ("3408" (postpone) nil nil) ("3409" (postpone) nil nil) ("3410" (postpone) nil nil) ("3411" (postpone) nil nil) ("3412" (postpone) nil nil) ("3413" (postpone) nil nil) ("3414" (postpone) nil nil) ("3415" (postpone) nil nil) ("3416" (postpone) nil nil) ("3417" (postpone) nil nil) ("3418" (postpone) nil nil) ("3419" (postpone) nil nil) ("3420" (postpone) nil nil) ("3421" (postpone) nil nil) ("3422" (postpone) nil nil) ("3423" (postpone) nil nil) ("3424" (postpone) nil nil) ("3425" (postpone) nil nil) ("3426" (postpone) nil nil) ("3427" (postpone) nil nil) ("3428" (postpone) nil nil) ("3429" (postpone) nil nil) ("3430" (postpone) nil nil) ("3431" (postpone) nil nil) ("3432" (postpone) nil nil) ("3433" (postpone) nil nil) ("3434" (postpone) nil nil) ("3435" (postpone) nil nil) ("3436" (postpone) nil nil) ("3437" (postpone) nil nil) ("3438" (postpone) nil nil) ("3439" (postpone) nil nil) ("3440" (postpone) nil nil) ("3441" (postpone) nil nil) ("3442" (postpone) nil nil) ("3443" (postpone) nil nil) ("3444" (postpone) nil nil) ("3445" (postpone) nil nil) ("3446" (postpone) nil nil) ("3447" (postpone) nil nil) ("3448" (postpone) nil nil) ("3449" (postpone) nil nil) ("3450" (postpone) nil nil) ("3451" (postpone) nil nil) ("3452" (postpone) nil nil) ("3453" (postpone) nil nil) ("3454" (postpone) nil nil) ("3455" (postpone) nil nil) ("3456" (postpone) nil nil) ("3457" (postpone) nil nil) ("3458" (postpone) nil nil) ("3459" (postpone) nil nil) ("3460" (postpone) nil nil) ("3461" (postpone) nil nil) ("3462" (postpone) nil nil) ("3463" (postpone) nil nil) ("3464" (postpone) nil nil) ("3465" (postpone) nil nil) ("3466" (postpone) nil nil) ("3467" (postpone) nil nil) ("3468" (postpone) nil nil) ("3469" (postpone) nil nil) ("3470" (postpone) nil nil) ("3471" (postpone) nil nil) ("3472" (postpone) nil nil) ("3473" (postpone) nil nil) ("3474" (postpone) nil nil) ("3475" (postpone) nil nil) ("3476" (postpone) nil nil) ("3477" (postpone) nil nil) ("3478" (postpone) nil nil) ("3479" (postpone) nil nil) ("3480" (postpone) nil nil) ("3481" (postpone) nil nil) ("3482" (postpone) nil nil) ("3483" (postpone) nil nil) ("3484" (postpone) nil nil) ("3485" (postpone) nil nil) ("3486" (postpone) nil nil) ("3487" (postpone) nil nil) ("3488" (postpone) nil nil) ("3489" (postpone) nil nil) ("3490" (postpone) nil nil) ("3491" (postpone) nil nil) ("3492" (postpone) nil nil) ("3493" (postpone) nil nil) ("3494" (postpone) nil nil) ("3495" (postpone) nil nil) ("3496" (postpone) nil nil) ("3497" (postpone) nil nil) ("3498" (postpone) nil nil) ("3499" (postpone) nil nil) ("3500" (postpone) nil nil) ("3501" (postpone) nil nil) ("3502" (postpone) nil nil) ("3503" (postpone) nil nil) ("3504" (postpone) nil nil) ("3505" (postpone) nil nil) ("3506" (postpone) nil nil) ("3507" (postpone) nil nil) ("3508" (postpone) nil nil) ("3509" (postpone) nil nil) ("3510" (postpone) nil nil) ("3511" (postpone) nil nil) ("3512" (postpone) nil nil) ("3513" (postpone) nil nil) ("3514" (postpone) nil nil) ("3515" (postpone) nil nil) ("3516" (postpone) nil nil) ("3517" (postpone) nil nil) ("3518" (postpone) nil nil) ("3519" (postpone) nil nil) ("3520" (postpone) nil nil) ("3521" (postpone) nil nil) ("3522" (postpone) nil nil) ("3523" (postpone) nil nil) ("3524" (postpone) nil nil) ("3525" (postpone) nil nil) ("3526" (postpone) nil nil) ("3527" (postpone) nil nil) ("3528" (postpone) nil nil) ("3529" (postpone) nil nil) ("3530" (postpone) nil nil) ("3531" (postpone) nil nil) ("3532" (postpone) nil nil) ("3533" (postpone) nil nil) ("3534" (postpone) nil nil) ("3535" (postpone) nil nil) ("3536" (postpone) nil nil) ("3537" (postpone) nil nil) ("3538" (postpone) nil nil) ("3539" (postpone) nil nil) ("3540" (postpone) nil nil) ("3541" (postpone) nil nil) ("3542" (postpone) nil nil) ("3543" (postpone) nil nil) ("3544" (postpone) nil nil) ("3545" (postpone) nil nil) ("3546" (postpone) nil nil) ("3547" (postpone) nil nil) ("3548" (postpone) nil nil) ("3549" (postpone) nil nil) ("3550" (postpone) nil nil) ("3551" (postpone) nil nil) ("3552" (postpone) nil nil) ("3553" (postpone) nil nil) ("3554" (postpone) nil nil) ("3555" (postpone) nil nil) ("3556" (postpone) nil nil) ("3557" (postpone) nil nil) ("3558" (postpone) nil nil) ("3559" (postpone) nil nil) ("3560" (postpone) nil nil) ("3561" (postpone) nil nil) ("3562" (postpone) nil nil) ("3563" (postpone) nil nil) ("3564" (postpone) nil nil) ("3565" (postpone) nil nil) ("3566" (postpone) nil nil) ("3567" (postpone) nil nil) ("3568" (postpone) nil nil) ("3569" (postpone) nil nil) ("3570" (postpone) nil nil) ("3571" (postpone) nil nil) ("3572" (postpone) nil nil) ("3573" (postpone) nil nil) ("3574" (postpone) nil nil) ("3575" (postpone) nil nil) ("3576" (postpone) nil nil) ("3577" (postpone) nil nil) ("3578" (postpone) nil nil) ("3579" (postpone) nil nil) ("3580" (postpone) nil nil) ("3581" (postpone) nil nil) ("3582" (postpone) nil nil) ("3583" (postpone) nil nil) ("3584" (postpone) nil nil) ("3585" (postpone) nil nil) ("3586" (postpone) nil nil) ("3587" (postpone) nil nil) ("3588" (postpone) nil nil) ("3589" (postpone) nil nil) ("3590" (postpone) nil nil) ("3591" (postpone) nil nil) ("3592" (postpone) nil nil) ("3593" (postpone) nil nil) ("3594" (postpone) nil nil) ("3595" (postpone) nil nil) ("3596" (postpone) nil nil) ("3597" (postpone) nil nil) ("3598" (postpone) nil nil) ("3599" (postpone) nil nil) ("3600" (postpone) nil nil) ("3601" (postpone) nil nil) ("3602" (postpone) nil nil) ("3603" (postpone) nil nil) ("3604" (postpone) nil nil) ("3605" (postpone) nil nil) ("3606" (postpone) nil nil) ("3607" (postpone) nil nil) ("3608" (postpone) nil nil) ("3609" (postpone) nil nil) ("3610" (postpone) nil nil) ("3611" (postpone) nil nil) ("3612" (postpone) nil nil) ("3613" (postpone) nil nil) ("3614" (postpone) nil nil) ("3615" (postpone) nil nil) ("3616" (postpone) nil nil) ("3617" (postpone) nil nil) ("3618" (postpone) nil nil) ("3619" (postpone) nil nil) ("3620" (postpone) nil nil) ("3621" (postpone) nil nil) ("3622" (postpone) nil nil) ("3623" (postpone) nil nil) ("3624" (postpone) nil nil) ("3625" (postpone) nil nil) ("3626" (postpone) nil nil) ("3627" (postpone) nil nil) ("3628" (postpone) nil nil) ("3629" (postpone) nil nil) ("3630" (postpone) nil nil) ("3631" (postpone) nil nil) ("3632" (postpone) nil nil) ("3633" (postpone) nil nil) ("3634" (postpone) nil nil) ("3635" (postpone) nil nil) ("3636" (postpone) nil nil) ("3637" (postpone) nil nil) ("3638" (postpone) nil nil) ("3639" (postpone) nil nil) ("3640" (postpone) nil nil) ("3641" (postpone) nil nil) ("3642" (postpone) nil nil) ("3643" (postpone) nil nil) ("3644" (postpone) nil nil) ("3645" (postpone) nil nil) ("3646" (postpone) nil nil) ("3647" (postpone) nil nil) ("3648" (postpone) nil nil) ("3649" (postpone) nil nil) ("3650" (postpone) nil nil) ("3651" (postpone) nil nil) ("3652" (postpone) nil nil) ("3653" (postpone) nil nil) ("3654" (postpone) nil nil) ("3655" (postpone) nil nil) ("3656" (postpone) nil nil) ("3657" (postpone) nil nil) ("3658" (postpone) nil nil) ("3659" (postpone) nil nil) ("3660" (postpone) nil nil) ("3661" (postpone) nil nil) ("3662" (postpone) nil nil) ("3663" (postpone) nil nil) ("3664" (postpone) nil nil) ("3665" (postpone) nil nil) ("3666" (postpone) nil nil) ("3667" (postpone) nil nil) ("3668" (postpone) nil nil) ("3669" (postpone) nil nil) ("3670" (postpone) nil nil) ("3671" (postpone) nil nil) ("3672" (postpone) nil nil) ("3673" (postpone) nil nil) ("3674" (postpone) nil nil) ("3675" (postpone) nil nil) ("3676" (postpone) nil nil) ("3677" (postpone) nil nil) ("3678" (postpone) nil nil) ("3679" (postpone) nil nil) ("3680" (postpone) nil nil) ("3681" (postpone) nil nil) ("3682" (postpone) nil nil) ("3683" (postpone) nil nil) ("3684" (postpone) nil nil) ("3685" (postpone) nil nil) ("3686" (postpone) nil nil) ("3687" (postpone) nil nil) ("3688" (postpone) nil nil) ("3689" (postpone) nil nil) ("3690" (postpone) nil nil) ("3691" (postpone) nil nil) ("3692" (postpone) nil nil) ("3693" (postpone) nil nil) ("3694" (postpone) nil nil) ("3695" (postpone) nil nil) ("3696" (postpone) nil nil) ("3697" (postpone) nil nil) ("3698" (postpone) nil nil) ("3699" (postpone) nil nil) ("3700" (postpone) nil nil) ("3701" (postpone) nil nil) ("3702" (postpone) nil nil) ("3703" (postpone) nil nil) ("3704" (postpone) nil nil) ("3705" (postpone) nil nil) ("3706" (postpone) nil nil) ("3707" (postpone) nil nil) ("3708" (postpone) nil nil) ("3709" (postpone) nil nil) ("3710" (postpone) nil nil) ("3711" (postpone) nil nil) ("3712" (postpone) nil nil) ("3713" (postpone) nil nil) ("3714" (postpone) nil nil) ("3715" (postpone) nil nil) ("3716" (postpone) nil nil) ("3717" (postpone) nil nil) ("3718" (postpone) nil nil) ("3719" (postpone) nil nil) ("3720" (postpone) nil nil) ("3721" (postpone) nil nil) ("3722" (postpone) nil nil) ("3723" (postpone) nil nil) ("3724" (postpone) nil nil) ("3725" (postpone) nil nil) ("3726" (postpone) nil nil) ("3727" (postpone) nil nil) ("3728" (postpone) nil nil) ("3729" (postpone) nil nil) ("3730" (postpone) nil nil) ("3731" (postpone) nil nil) ("3732" (postpone) nil nil) ("3733" (postpone) nil nil) ("3734" (postpone) nil nil) ("3735" (postpone) nil nil) ("3736" (postpone) nil nil) ("3737" (postpone) nil nil) ("3738" (postpone) nil nil) ("3739" (postpone) nil nil) ("3740" (postpone) nil nil) ("3741" (postpone) nil nil) ("3742" (postpone) nil nil) ("3743" (postpone) nil nil) ("3744" (postpone) nil nil) ("3745" (postpone) nil nil) ("3746" (postpone) nil nil) ("3747" (postpone) nil nil) ("3748" (postpone) nil nil) ("3749" (postpone) nil nil) ("3750" (postpone) nil nil) ("3751" (postpone) nil nil) ("3752" (postpone) nil nil) ("3753" (postpone) nil nil) ("3754" (postpone) nil nil) ("3755" (postpone) nil nil) ("3756" (postpone) nil nil) ("3757" (postpone) nil nil) ("3758" (postpone) nil nil) ("3759" (postpone) nil nil) ("3760" (postpone) nil nil) ("3761" (postpone) nil nil) ("3762" (postpone) nil nil) ("3763" (postpone) nil nil) ("3764" (postpone) nil nil) ("3765" (postpone) nil nil) ("3766" (postpone) nil nil) ("3767" (postpone) nil nil) ("3768" (postpone) nil nil) ("3769" (postpone) nil nil) ("3770" (postpone) nil nil) ("3771" (postpone) nil nil) ("3772" (postpone) nil nil) ("3773" (postpone) nil nil) ("3774" (postpone) nil nil) ("3775" (postpone) nil nil) ("3776" (postpone) nil nil) ("3777" (postpone) nil nil) ("3778" (postpone) nil nil) ("3779" (postpone) nil nil) ("3780" (postpone) nil nil) ("3781" (postpone) nil nil) ("3782" (postpone) nil nil) ("3783" (postpone) nil nil) ("3784" (postpone) nil nil) ("3785" (postpone) nil nil) ("3786" (postpone) nil nil) ("3787" (postpone) nil nil) ("3788" (postpone) nil nil) ("3789" (postpone) nil nil) ("3790" (postpone) nil nil) ("3791" (postpone) nil nil) ("3792" (postpone) nil nil) ("3793" (postpone) nil nil) ("3794" (postpone) nil nil) ("3795" (postpone) nil nil) ("3796" (postpone) nil nil) ("3797" (postpone) nil nil) ("3798" (postpone) nil nil) ("3799" (postpone) nil nil) ("3800" (postpone) nil nil) ("3801" (postpone) nil nil) ("3802" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil shostak))("ICE_templates_resource" ICE_templates_rsce_th lemma2ippannpdvx 0 (lemma2ippannpdvx-1 nil 3882332056 ("" (skosimp*) (("" (beta) (("" (flatten) (("" (split -8) (("1" (assert) (("1" (split 8) (("1" (expand "next_pan_pm" 1) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil)) nil)) nil) ("2" (assert) (("2" (split 8) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((maxtime formal-const-decl "{maxtime: posnat | maxinfuse <= maxtime}" ICE_templates_rsce_th nil) (<= const-decl "bool" reals nil) (maxinfuse formal-const-decl "posnat" ICE_templates_rsce_th nil) (maxrate formal-const-decl "posnat" ICE_templates_rsce_th nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (coord_node const-decl "node" node_th nil) (/= const-decl "boolean" notequal nil) (timeout const-decl "itimes" infusion_pumps_th nil) (bolus_rate const-decl "irates" infusion_pumps_th nil) (num_par const-decl "boolean" coord_t_and_c_th nil) (mindex const-decl "nat" coord_t_and_c_th nil) (null_value const-decl "posnat" coord_t_and_c_th nil) (no_num const-decl "nonneg_real" coord_t_and_c_th nil) (enum_par const-decl "boolean" coord_t_and_c_th nil) (upd_pan const-decl "panel" infusion_pumps_th nil) (update_panel const-decl "d_state" infusion_pumps_th nil) (tick const-decl "d_state" infusion_pumps_th nil) (per_incr const-decl "boolean" infusion_pumps_th nil) (per_decr const-decl "boolean" infusion_pumps_th nil) (per_bolus const-decl "boolean" infusion_pumps_th nil) (per_confirm const-decl "boolean" infusion_pumps_th nil) (per_choosetime const-decl "boolean" infusion_pumps_th nil) (per_choosevtbi const-decl "boolean" infusion_pumps_th nil) (per_chooserate const-decl "boolean" infusion_pumps_th nil) (per_infuse const-decl "boolean" infusion_pumps_th nil) (per_pause const-decl "boolean" infusion_pumps_th nil) (available_act const-decl "panel" infusion_pumps_th nil) (add_pan_buff const-decl "pan_q_type" node_th nil) (pan_send const-decl "n_state" node_th nil) (tick_pan_device const-decl "state" system_th nil) (plimit const-decl "nat" coord_t_and_c_th nil) (p_null const-decl "patient" patient_th nil) (dlimit const-decl "nat" coord_t_and_c_th nil) (nil_device const-decl "device" devices_th nil) (nlimit const-decl "nat" coord_t_and_c_th nil) (no_node const-decl "node" node_th nil) (empty_panel const-decl "panel" coord_t_and_c_th nil) (empty_pan_msg const-decl "pan_message_type" node_th nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (next_pan_pm const-decl "n_state" node_th nil) (sub_pan_buff const-decl "pan_q_type" node_th nil) (available_act const-decl "panel" vital_signs_th nil) (tick_vs const-decl "v_state" vital_signs_th nil) (upd_pan const-decl "panel" vital_signs_th nil) (per_tick_vs const-decl "boolean" vital_signs_th nil)) shostak))("ICE_templates_resource" ICE_templates_rsce_th lemma2ippanx 0 (lemma2ippanx-1 nil 3882428136 ("" (skosimp*) (("" (beta) (("" (flatten) (("" (split -8) (("1" (flatten -1) (("1" (assert) (("1" (split 11) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil) ("10" (grind) nil nil) ("11" (grind) nil nil) ("12" (grind) nil nil) ("13" (grind) nil nil) ("14" (grind) nil nil)) nil)) nil)) nil) ("2" (flatten -1) (("2" (assert) (("2" (split 10) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil) ("10" (grind) nil nil) ("11" (grind) nil nil) ("12" (grind) nil nil) ("13" (grind) nil nil) ("14" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((update_patient_alarm_disp const-decl "i_state" coordinator_th nil) (setup_p_t_panel const-decl "i_state" coordinator_th nil) (member const-decl "bool" sets nil) (setup_p_d_panel const-decl "i_state" coordinator_th nil) (setup_p_m_panel const-decl "i_state" coordinator_th nil) (/= const-decl "boolean" notequal nil) (update_p_panel const-decl "i_state" coordinator_th nil) (tick_pan_coordinator const-decl "state" system_th nil) (next_cm const-decl "n_state" node_th nil) (maxtime formal-const-decl "{maxtime: posnat | maxinfuse <= maxtime}" ICE_templates_rsce_th nil) (<= const-decl "bool" reals nil) (maxinfuse formal-const-decl "posnat" ICE_templates_rsce_th nil) (maxrate formal-const-decl "posnat" ICE_templates_rsce_th nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (timeout const-decl "itimes" infusion_pumps_th nil) (bolus_rate const-decl "irates" infusion_pumps_th nil) (num_par const-decl "boolean" coord_t_and_c_th nil) (mindex const-decl "nat" coord_t_and_c_th nil) (null_value const-decl "posnat" coord_t_and_c_th nil) (no_num const-decl "nonneg_real" coord_t_and_c_th nil) (enum_par const-decl "boolean" coord_t_and_c_th nil) (upd_pan const-decl "panel" infusion_pumps_th nil) (update_panel const-decl "d_state" infusion_pumps_th nil) (tick const-decl "d_state" infusion_pumps_th nil) (per_incr const-decl "boolean" infusion_pumps_th nil) (per_decr const-decl "boolean" infusion_pumps_th nil) (per_bolus const-decl "boolean" infusion_pumps_th nil) (per_confirm const-decl "boolean" infusion_pumps_th nil) (per_choosetime const-decl "boolean" infusion_pumps_th nil) (per_choosevtbi const-decl "boolean" infusion_pumps_th nil) (per_chooserate const-decl "boolean" infusion_pumps_th nil) (per_infuse const-decl "boolean" infusion_pumps_th nil) (per_pause const-decl "boolean" infusion_pumps_th nil) (available_act const-decl "panel" infusion_pumps_th nil) (add_pan_buff const-decl "pan_q_type" node_th nil) (pan_send const-decl "n_state" node_th nil) (tick_pan_device const-decl "state" system_th nil) (nlimit const-decl "nat" coord_t_and_c_th nil) (no_node const-decl "node" node_th nil) (empty_panel const-decl "panel" coord_t_and_c_th nil) (empty_pan_msg const-decl "pan_message_type" node_th nil) (sub_pan_buff const-decl "pan_q_type" node_th nil) (next_pan_pm const-decl "n_state" node_th nil) (coord_node const-decl "node" node_th nil) (plimit const-decl "nat" coord_t_and_c_th nil) (p_null const-decl "patient" patient_th nil) (dlimit const-decl "nat" coord_t_and_c_th nil) (nil_device const-decl "device" devices_th nil) (empty_enum_parameter const-decl "enum_parameter" coord_t_and_c_th nil) (empty_num_parameter const-decl "num_parameter" coord_t_and_c_th nil) (emptyset const-decl "set" sets nil) (filter_panel const-decl "panel" coord_t_and_c_th nil) (update_t_panel const-decl "patient_db_type" system_th nil) (tick_pan_patient const-decl "state" system_th nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (finite_emptyset name-judgement "finite_set" finite_sets nil) (per_tick_vs const-decl "boolean" vital_signs_th nil) (upd_pan const-decl "panel" vital_signs_th nil) (tick_vs const-decl "v_state" vital_signs_th nil) (available_act const-decl "panel" vital_signs_th nil) (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types nil) (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types nil) (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil) (real_minus_real_is_real application-judgement "real" reals nil)) shostak))("ICE_templates_resource" ICE_templates_rsce_th panlemma1ipzx 0 (panlemma1ipzx-1 nil 3882436253 ("" (skosimp*) (("" (beta) (("" (flatten) (("" (split -8) (("1" (flatten -1) (("1" (assert) (("1" (split 13) (("1" (expand "tick_pan_device" 1) (("1" (propax) nil nil)) nil) ("2" (expand "tick_pan_device" 1) (("2" (propax) nil nil)) nil) ("3" (expand "tick_pan_device" 1) (("3" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (flatten -1) (("2" (assert) (("2" (split 13) (("1" (expand "tick_pan_device" 1) (("1" (propax) nil nil)) nil) ("2" (expand "tick_pan_device" 1) (("2" (propax) nil nil)) nil) ("3" (expand "tick_pan_device" 1) (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((tick_pan_device const-decl "state" system_th nil)) shostak))("ICE_templates_resource" ICE_templates_rsce_th c_comp_accessx 0 (c_comp_accessx-1 nil 3864878314 ("" (skosimp*) (("" (beta) (("" (flatten) (("" (lemma "lemma_cd_fun_act_xx" ("a" "a!1" "p" "p!1" "d" "d!1" "st" "st!1")) (("" (beta -1) (("" (split -1) (("1" (flatten -1) (("1" (lemma "c_fun_consistent" ("a" "a!1" "d" "d!1" "p" "p!1" "st" "st!1")) (("1" (beta -1) (("1" (split -1) (("1" (lemma "c_access_devdisp" ("d" "d!1" "p" "p!1" "st" "c_d_fun_action(a!1, st!1)")) (("1" (beta -1) (("1" (split -1) (("1" (flatten -1) (("1" (assert) (("1" (split 40) (("1" (propax) nil nil) ("2" (propax) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil) ("3" (assert) nil nil) ("4" (assert) nil nil) ("5" (assert) nil nil) ("6" (assert) nil nil) ("7" (assert) nil nil) ("8" (assert) nil nil) ("9" (replace -4 1) (("9" (expand "c_d_fun_action" 1) (("9" (assert) nil nil)) nil)) nil) ("10" (replace -4 1) (("10" (expand "c_d_fun_action" 1) (("10" (assert) nil nil)) nil)) nil) ("11" (replace -4 1) (("11" (expand "c_d_fun_action" 1) (("11" (assert) nil nil)) nil)) nil) ("12" (replace -4 1) (("12" (expand "c_d_fun_action" 1) (("12" (assert) nil nil)) nil)) nil) ("13" (replace -4 1) (("13" (expand "c_d_fun_action" 1) (("13" (assert) nil nil)) nil)) nil) ("14" (assert) (("14" (replace -11 1) (("14" (expand "c_d_fun_action" 1) (("14" (propax) nil nil)) nil)) nil)) nil) ("15" (assert) (("15" (replace -11 1) (("15" (expand "c_d_fun_action" 1) (("15" (assert) nil nil)) nil)) nil)) nil) ("16" (assert) (("16" (replace -11 1) (("16" (expand "c_d_fun_action" 1) (("16" (assert) nil nil)) nil)) nil)) nil) ("17" (assert) (("17" (replace -11 1) (("17" (expand "c_d_fun_action" 1) (("17" (propax) nil nil)) nil)) nil)) nil) ("18" (assert) (("18" (replace -11 1) (("18" (expand "c_d_fun_action" 1) (("18" (assert) nil nil)) nil)) nil)) nil) ("19" (assert) (("19" (replace -11 1) (("19" (expand "c_d_fun_action" 1) (("19" (assert) nil nil)) nil)) nil)) nil) ("20" (assert) (("20" (replace -11 1) (("20" (expand "c_d_fun_action" 1) (("20" (propax) nil nil)) nil)) nil)) nil) ("21" (replace -4 1) (("21" (expand "c_d_fun_action" 1) (("21" (assert) nil nil)) nil)) nil) ("22" (replace -4 1) (("22" (expand "c_d_fun_action" 1) (("22" (assert) nil nil)) nil)) nil) ("23" (replace -4 1) (("23" (expand "c_d_fun_action" 1) (("23" (assert) nil nil)) nil)) nil) ("24" (replace -4 1) (("24" (expand "c_d_fun_action" 1) (("24" (assert) nil nil)) nil)) nil) ("25" (replace -4 1) (("25" (expand "c_d_fun_action" 1) (("25" (assert) nil nil)) nil)) nil) ("26" (replace -4 1) (("26" (expand "c_d_fun_action" 1) (("26" (assert) nil nil)) nil)) nil) ("27" (expand "c_d_fun_action" 1) (("27" (assert) nil nil)) nil) ("28" (expand "c_d_fun_action" 1) (("28" (assert) nil nil)) nil) ("29" (expand "c_d_fun_action" 1) (("29" (assert) nil nil)) nil) ("30" (expand "c_d_fun_action" 1) (("30" (assert) nil nil)) nil) ("31" (expand "c_d_fun_action" 1) (("31" (assert) nil nil)) nil) ("32" (expand "c_d_fun_action" 1) (("32" (assert) nil nil)) nil) ("33" (expand "c_d_fun_action" 1) (("33" (assert) nil nil)) nil) ("34" (replace -4 1) (("34" (expand "c_d_fun_action" 1) (("34" (assert) nil nil)) nil)) nil) ("35" (replace -4 1) (("35" (expand "c_d_fun_action" 1) (("35" (assert) nil nil)) nil)) nil) ("36" (replace -4 1) (("36" (expand "c_d_fun_action" 1) (("36" (assert) nil nil)) nil)) nil) ("37" (assert) (("37" (replace -11 1) (("37" (expand "c_d_fun_action" 1) (("37" (propax) nil nil)) nil)) nil)) nil) ("38" (assert) (("38" (replace -11 1) (("38" (expand "c_d_fun_action" 1) (("38" (assert) nil nil)) nil)) nil)) nil) ("39" (assert) (("39" (replace -11 1) (("39" (expand "c_d_fun_action" 1) (("39" (assert) nil nil)) nil)) nil)) nil) ("40" (assert) (("40" (replace -11 1) (("40" (expand "c_d_fun_action" 1) (("40" (propax) nil nil)) nil)) nil)) nil) ("41" (assert) (("41" (replace -11 1) (("41" (expand "c_d_fun_action" 1) (("41" (assert) nil nil)) nil)) nil)) nil) ("42" (assert) (("42" (replace -11 1) (("42" (expand "c_d_fun_action" 1) (("42" (assert) nil nil)) nil)) nil)) nil) ("43" (assert) (("43" (replace -11 1) (("43" (expand "c_d_fun_action" 1) (("43" (propax) nil nil)) nil)) nil)) nil) ("44" (replace -4 1) (("44" (expand "c_d_fun_action" 1) (("44" (assert) nil nil)) nil)) nil) ("45" (replace -4 1) (("45" (expand "c_d_fun_action" 1) (("45" (assert) nil nil)) nil)) nil) ("46" (replace -4 1) (("46" (expand "c_d_fun_action" 1) (("46" (assert) nil nil)) nil)) nil) ("47" (replace -4 1) (("47" (expand "c_d_fun_action" 1) (("47" (assert) nil nil)) nil)) nil) ("48" (replace -4 1) (("48" (expand "c_d_fun_action" 1) (("48" (assert) nil nil)) nil)) nil) ("49" (replace -4 1) (("49" (expand "c_d_fun_action" 1) (("49" (assert) nil nil)) nil)) nil) ("50" (expand "c_d_fun_action" 1) (("50" (assert) nil nil)) nil) ("51" (expand "c_d_fun_action" 1) (("51" (assert) nil nil)) nil) ("52" (expand "c_d_fun_action" 1) (("52" (assert) nil nil)) nil) ("53" (expand "c_d_fun_action" 1) (("53" (assert) nil nil)) nil) ("54" (expand "c_d_fun_action" 1) (("54" (assert) nil nil)) nil) ("55" (expand "c_d_fun_action" 1) (("55" (assert) nil nil)) nil) ("56" (expand "c_d_fun_action" 1) (("56" (assert) nil nil)) nil) ("57" (assert) nil nil) ("58" (assert) nil nil) ("59" (assert) nil nil) ("60" (assert) (("60" (replace -20 1) (("60" (expand "execute_ip" 1) (("60" (expand "fun_ip" 1) (("60" (lift-if -1) (("60" (split -1) (("1" (expand "fun_incr" -1) (("1" (expand "update_panel" -1) (("1" (expand "upd_pan" -1) (("1" (expand "tick" -1) (("1" (expand "update_panel" -1) (("1" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten -1) (("2" (split -1) (("1" (expand "fun_decr" -1) (("1" (expand "update_panel" -1) (("1" (expand "upd_pan" -1) (("1" (expand "tick" -1) (("1" (expand "update_panel" -1) (("1" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten -1) (("2" (split -1) (("1" (expand "fun_bolus" -1) (("1" (expand "update_panel" -1) (("1" (expand "upd_pan" -1) (("1" (expand "tick" -1) (("1" (expand "update_panel" -1) (("1" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten -1) (("2" (split -1) (("1" (expand "fun_confirm" -1) (("1" (expand "update_panel" -1) (("1" (expand "upd_pan" -1) (("1" (expand "tick" -1) (("1" (expand "update_panel" -1) (("1" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten -1) (("2" (split -1) (("1" (expand "fun_choosetime" -1) (("1" (expand "update_panel" -1) (("1" (expand "upd_pan" -1) (("1" (expand "tick" -1) (("1" (expand "update_panel" -1) (("1" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten -1) (("2" (split -1) (("1" (expand "fun_choosevtbi" -1) (("1" (expand "update_panel" -1) (("1" (expand "upd_pan" -1) (("1" (expand "tick" -1) (("1" (expand "update_panel" -1) (("1" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten -1) (("2" (split -1) (("1" (expand "fun_chooserate" -1) (("1" (expand "update_panel" -1) (("1" (expand "upd_pan" -1) (("1" (expand "tick" -1) (("1" (expand "update_panel" -1) (("1" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten -1) (("2" (split -1) (("1" (expand "fun_infuse" -1) (("1" (expand "update_panel" -1) (("1" (expand "upd_pan" -1) (("1" (expand "tick" -1) (("1" (expand "update_panel" -1) (("1" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten -1) (("2" (split -1) (("1" (expand "fun_pause" -1) (("1" (expand "update_panel" -1) (("1" (expand "upd_pan" -1) (("1" (expand "tick" -1) (("1" (expand "update_panel" -1) (("1" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "update_panel" -1) (("2" (expand "upd_pan" -1) (("2" (expand "tick" -1) (("2" (expand "update_panel" -1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("61" (replace -4 1) (("61" (assert) nil nil)) nil) ("62" (assert) nil nil) ("63" (assert) nil nil) ("64" (propax) nil nil) ("65" (propax) nil nil) ("66" (propax) nil nil) ("67" (propax) nil nil) ("68" (propax) nil nil) ("69" (propax) nil nil) ("70" (propax) nil nil) ("71" (assert) nil nil) ("72" (assert) nil nil) ("73" (propax) nil nil) ("74" (assert) nil nil) ("75" (assert) nil nil) ("76" (assert) nil nil) ("77" (assert) nil nil) ("78" (assert) nil nil) ("79" (assert) nil nil) ("80" (assert) nil nil) ("81" (assert) nil nil) ("82" (assert) nil nil) ("83" (assert) nil nil)) nil)) nil)) nil) ("2" (propax) nil nil) ("3" (propax) nil nil) ("4" (assert) nil nil) ("5" (assert) nil nil) ("6" (assert) nil nil) ("7" (assert) nil nil) ("8" (assert) nil nil) ("9" (assert) nil nil) ("10" (propax) nil nil) ("11" (assert) nil nil) ("12" (propax) nil nil) ("13" (propax) nil nil) ("14" (assert) nil nil) ("15" (assert) nil nil) ("16" (assert) nil nil) ("17" (assert) nil nil) ("18" (assert) nil nil) ("19" (assert) nil nil) ("20" (assert) nil nil) ("21" (assert) nil nil) ("22" (propax) nil nil) ("23" (assert) nil nil) ("24" (propax) nil nil) ("25" (propax) nil nil) ("26" (propax) nil nil) ("27" (assert) nil nil) ("28" (propax) nil nil) ("29" (assert) nil nil) ("30" (propax) nil nil) ("31" (propax) nil nil) ("32" (assert) nil nil) ("33" (assert) nil nil) ("34" (propax) nil nil) ("35" (assert) nil nil) ("36" (assert) nil nil) ("37" (assert) nil nil) ("38" (propax) nil nil) ("39" (assert) nil nil) ("40" (assert) nil nil) ("41" (propax) nil nil) ("42" (propax) nil nil) ("43" (propax) nil nil) ("44" (propax) nil nil) ("45" (propax) nil nil) ("46" (expand "c_d_per_action" -84) (("46" (flatten -84) nil nil)) nil) ("47" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil) ("3" (propax) nil nil) ("4" (assert) nil nil) ("5" (assert) nil nil) ("6" (assert) nil nil) ("7" (assert) nil nil) ("8" (assert) nil nil) ("9" (assert) nil nil) ("10" (propax) nil nil) ("11" (assert) nil nil) ("12" (propax) nil nil) ("13" (propax) nil nil) ("14" (assert) nil nil) ("15" (assert) nil nil) ("16" (assert) nil nil) ("17" (assert) nil nil) ("18" (assert) nil nil) ("19" (assert) nil nil) ("20" (assert) nil nil) ("21" (assert) nil nil) ("22" (propax) nil nil) ("23" (assert) nil nil) ("24" (propax) nil nil) ("25" (propax) nil nil) ("26" (propax) nil nil) ("27" (propax) nil nil) ("28" (assert) nil nil) ("29" (propax) nil nil) ("30" (assert) nil nil) ("31" (propax) nil nil) ("32" (propax) nil nil) ("33" (assert) nil nil) ("34" (assert) nil nil) ("35" (propax) nil nil) ("36" (assert) nil nil) ("37" (assert) nil nil) ("38" (assert) nil nil) ("39" (propax) nil nil) ("40" (assert) nil nil) ("41" (propax) nil nil) ("42" (propax) nil nil) ("43" (propax) nil nil) ("44" (assert) nil nil) ("45" (propax) nil nil) ("46" (propax) nil nil) ("47" (expand "c_d_per_action" -61) (("47" (flatten -61) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((state type-eq-decl nil system_th nil) (node_to_patient type-eq-decl nil system_th nil) (patients_type type-eq-decl nil patient_th nil) (patient_db_type type-eq-decl nil system_th nil) (n_state type-eq-decl nil node_th nil) (node_to_pd type-eq-decl nil system_th nil) (i_state type-eq-decl nil coordinator_th nil) (device type-eq-decl nil devices_th nil) (maxtime formal-const-decl "{maxtime: posnat | maxinfuse <= maxtime}" ICE_templates_rsce_th nil) (maxinfuse formal-const-decl "posnat" ICE_templates_rsce_th nil) (maxrate formal-const-decl "posnat" ICE_templates_rsce_th nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nlimit const-decl "nat" coord_t_and_c_th nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (action_id type-decl nil coord_t_and_c_th nil) (lemma_cd_fun_act_xx formula-decl nil ICE_templates_rsce_th nil) (execute_ip const-decl "d_state" infusion_pumps_th nil) (fun_pause const-decl "d_state" infusion_pumps_th nil) (fun_infuse const-decl "d_state" infusion_pumps_th nil) (fun_chooserate const-decl "d_state" infusion_pumps_th nil) (fun_choosevtbi const-decl "d_state" infusion_pumps_th nil) (fun_choosetime const-decl "d_state" infusion_pumps_th nil) (fun_confirm const-decl "d_state" infusion_pumps_th nil) (fun_bolus const-decl "d_state" infusion_pumps_th nil) (fun_decr const-decl "d_state" infusion_pumps_th nil) (real_minus_real_is_real application-judgement "real" reals nil) (fun_incr const-decl "d_state" infusion_pumps_th nil) (upd_pan const-decl "panel" infusion_pumps_th nil) (tick const-decl "d_state" infusion_pumps_th nil) (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types nil) (posreal_plus_nnreal_is_posreal application-judgement "posreal" real_types nil) (update_panel const-decl "d_state" infusion_pumps_th nil) (fun_ip const-decl "d_state" infusion_pumps_th nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (c_access_devdisp formula-decl nil ICE_templates_rsce_th nil) (c_d_fun_action const-decl "state" ICE_templates_rsce_th nil) (c_d_per_action const-decl "boolean" ICE_templates_rsce_th nil)) shostak))("ICEsystem" system_th select_action_TCC1 0 (select_action_TCC1-1 nil 3813306072 ("" (cond-disjoint-tcc) nil nil) nil nil (select_action disjointness "COND booleans.AND((system_th.is`mode = coord_t_and_c_th.d_mode), (system_th.is`disp_focus = coord_t_and_c_th.device_focus)) -> system_th.st WITH [coord_st := coordinator_th[system_th.maxrate, system_th.maxinfuse, system_th.maxtime].i_select_ad(system_th.a, system_th.is)], booleans.AND((booleans.OR((system_th.is`mode = coord_t_and_c_th.d_mode), (system_th.is`mode = coord_t_and_c_th.p_mode))), (system_th.is`disp_focus = coord_t_and_c_th.patient_focus)) -> system_th.st WITH [coord_st := coordinator_th[system_th.maxrate, system_th.maxinfuse, system_th.maxtime].i_select_ap(system_th.a, system_th.is)], ELSE -> system_th.st ENDCOND" "nil")))("ICE_templates" ICE_templates_th c_comp_confirmx 0 (c_comp_confirmx-1 nil 3862033504 ("" (skosimp*) (("" (beta) (("" (flatten) (("" (lemma "lemma_cd_fun_act_ip" ("a" "a!1" "p" "p!1" "d" "d!1" "st" "st!1")) (("" (beta -1) (("" (split -1) (("1" (flatten -1) (("1" (lemma "lemma_cd_fun_act_ip_coord" ("a" "a!1" "p" "p!1" "d" "d!1" "st" "st!1")) (("1" (beta -1) (("1" (split -1) (("1" (flatten -1) (("1" (lemma "c_d_fun_action_lemma_ex" ("a" "a!1" "d" "d!1" "p" "p!1" "st" "st!1")) (("1" (beta -1) (("1" (split -1) (("1" (flatten -1) (("1" (lemma "c_d_fun_action_lemma_onal" ("a" "a!1" "d" "d!1" "p" "p!1" "st" "st!1")) (("1" (beta -1) (("1" (split -1) (("1" (flatten -1) (("1" (lemma "c_fun_consistent" ("a" "a!1" "d" "d!1" "p" "p!1" "st" "st!1")) (("1" (beta -1) (("1" (split -1) (("1" (lemma "c_confirmnxdevdispxalarm" ("d" "d!1" "p" "p!1" "st" "c_d_fun_action(a!1, st!1)")) (("1" (beta -1) (("1" (split -1) (("1" (propax) nil nil) ("2" (assert) nil nil) ("3" (assert) nil nil) ("4" (assert) nil nil) ("5" (assert) nil nil) ("6" (assert) nil nil) ("7" (assert) nil nil) ("8" (assert) nil nil) ("9" (replace -12 1) (("9" (expand "c_d_fun_action" 1) (("9" (replace -78 -1) (("9" (replace -79 -1) (("9" (propax) nil nil)) nil)) nil)) nil)) nil) ("10" (replace -12 1) (("10" (expand "c_d_fun_action" 1) (("10" (replace -77 1) (("10" (replace -78 1) (("10" (propax) nil nil)) nil)) nil)) nil)) nil) ("11" (replace -12 1) (("11" (expand "c_d_fun_action" 1) (("11" (replace -78 -1) (("11" (replace -79 -1) (("11" (propax) nil nil)) nil)) nil)) nil)) nil) ("12" (replace -12 1) (("12" (expand "c_d_fun_action" 1) (("12" (replace -77 1) (("12" (replace -78 1) (("12" (propax) nil nil)) nil)) nil)) nil)) nil) ("13" (replace -12 1) (("13" (expand "c_d_fun_action" 1) (("13" (replace -77 1) (("13" (replace -78 1) (("13" (propax) nil nil)) nil)) nil)) nil)) nil) ("14" (assert) (("14" (replace -19 1) (("14" (expand "c_d_fun_action" 1) (("14" (propax) nil nil)) nil)) nil)) nil) ("15" (assert) (("15" (replace -19 1) (("15" (expand "c_d_fun_action" 1) (("15" (replace -77 1) (("15" (replace -78 1) (("15" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("16" (assert) (("16" (replace -19 1) (("16" (expand "c_d_fun_action" 1) (("16" (replace -77 1) (("16" (replace -78 1) (("16" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("17" (assert) (("17" (replace -19 1) (("17" (expand "c_d_fun_action" 1) (("17" (propax) nil nil)) nil)) nil)) nil) ("18" (assert) (("18" (replace -19 1) (("18" (expand "c_d_fun_action" 1) (("18" (replace -77 1) (("18" (replace -78 1) (("18" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("19" (assert) (("19" (replace -19 1) (("19" (expand "c_d_fun_action" 1) (("19" (replace -77 1) (("19" (replace -78 1) (("19" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("20" (assert) (("20" (replace -19 1) (("20" (expand "c_d_fun_action" 1) (("20" (propax) nil nil)) nil)) nil)) nil) ("21" (replace -12 1) (("21" (expand "c_d_fun_action" 1) (("21" (replace -78 -1) (("21" (replace -79 -1) (("21" (propax) nil nil)) nil)) nil)) nil)) nil) ("22" (replace -12 1) (("22" (expand "c_d_fun_action" 1) (("22" (replace -77 1) (("22" (replace -78 1) (("22" (propax) nil nil)) nil)) nil)) nil)) nil) ("23" (replace -12 1) (("23" (expand "c_d_fun_action" 1) (("23" (replace -78 -1) (("23" (replace -79 -1) (("23" (propax) nil nil)) nil)) nil)) nil)) nil) ("24" (replace -12 1) (("24" (expand "c_d_fun_action" 1) (("24" (replace -77 1) (("24" (replace -78 1) (("24" (propax) nil nil)) nil)) nil)) nil)) nil) ("25" (replace -12 1) (("25" (expand "c_d_fun_action" 1) (("25" (replace -77 1) (("25" (replace -78 1) (("25" (propax) nil nil)) nil)) nil)) nil)) nil) ("26" (replace -12 1) (("26" (expand "c_d_fun_action" 1) (("26" (replace -77 1) (("26" (replace -78 1) (("26" (propax) nil nil)) nil)) nil)) nil)) nil) ("27" (expand "c_d_fun_action" 1) (("27" (replace -77 1) (("27" (replace -78 1) (("27" (propax) nil nil)) nil)) nil)) nil) ("28" (expand "c_d_fun_action" 1) (("28" (replace -78 -1) (("28" (replace -79 -1) (("28" (propax) nil nil)) nil)) nil)) nil) ("29" (expand "c_d_fun_action" 1) (("29" (replace -77 1) (("29" (replace -78 1) (("29" (propax) nil nil)) nil)) nil)) nil) ("30" (expand "c_d_fun_action" 1) (("30" (replace -78 -1) (("30" (replace -79 -1) (("30" (propax) nil nil)) nil)) nil)) nil) ("31" (expand "c_d_fun_action" 1) (("31" (replace -77 1) (("31" (replace -78 1) (("31" (propax) nil nil)) nil)) nil)) nil) ("32" (expand "c_d_fun_action" 1) (("32" (replace -77 1) (("32" (replace -78 1) (("32" (propax) nil nil)) nil)) nil)) nil) ("33" (expand "c_d_fun_action" 1) (("33" (replace -78 -1) (("33" (replace -79 -1) (("33" (propax) nil nil)) nil)) nil)) nil) ("34" (assert) nil nil) ("35" (replace -17 1) (("35" (propax) nil nil)) nil) ("36" (assert) nil nil) ("37" (assert) nil nil) ("38" (assert) nil nil) ("39" (assert) nil nil) ("40" (assert) nil nil) ("41" (assert) nil nil) ("42" (assert) nil nil) ("43" (assert) nil nil) ("44" (assert) nil nil) ("45" (assert) nil nil) ("46" (assert) nil nil) ("47" (assert) nil nil) ("48" (assert) nil nil) ("49" (assert) nil nil) ("50" (propax) nil nil) ("51" (propax) nil nil)) nil)) nil)) nil) ("2" (propax) nil nil) ("3" (propax) nil nil) ("4" (assert) nil nil) ("5" (assert) nil nil) ("6" (assert) nil nil) ("7" (assert) nil nil) ("8" (assert) nil nil) ("9" (assert) nil nil) ("10" (propax) nil nil) ("11" (assert) nil nil) ("12" (propax) nil nil) ("13" (propax) nil nil) ("14" (assert) nil nil) ("15" (assert) nil nil) ("16" (assert) nil nil) ("17" (assert) nil nil) ("18" (assert) nil nil) ("19" (assert) nil nil) ("20" (assert) nil nil) ("21" (assert) nil nil) ("22" (propax) nil nil) ("23" (assert) nil nil) ("24" (propax) nil nil) ("25" (propax) nil nil) ("26" (propax) nil nil) ("27" (assert) nil nil) ("28" (propax) nil nil) ("29" (assert) nil nil) ("30" (propax) nil nil) ("31" (propax) nil nil) ("32" (assert) nil nil) ("33" (assert) nil nil) ("34" (propax) nil nil) ("35" (assert) nil nil) ("36" (assert) nil nil) ("37" (assert) nil nil) ("38" (propax) nil nil) ("39" (assert) nil nil) ("40" (propax) nil nil) ("41" (propax) nil nil) ("42" (propax) nil nil) ("43" (assert) nil nil) ("44" (propax) nil nil) ("45" (propax) nil nil) ("46" (expand "c_d_per_action" -73) (("46" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil) ("3" (propax) nil nil) ("4" (assert) nil nil) ("5" (assert) nil nil) ("6" (assert) nil nil) ("7" (assert) nil nil) ("8" (assert) nil nil) ("9" (assert) nil nil) ("10" (propax) nil nil) ("11" (assert) nil nil) ("12" (propax) nil nil) ("13" (propax) nil nil) ("14" (assert) nil nil) ("15" (assert) nil nil) ("16" (assert) nil nil) ("17" (assert) nil nil) ("18" (assert) nil nil) ("19" (assert) nil nil) ("20" (assert) nil nil) ("21" (assert) nil nil) ("22" (propax) nil nil) ("23" (assert) nil nil) ("24" (propax) nil nil) ("25" (propax) nil nil) ("26" (propax) nil nil) ("27" (assert) nil nil) ("28" (propax) nil nil) ("29" (assert) nil nil) ("30" (propax) nil nil) ("31" (propax) nil nil) ("32" (assert) nil nil) ("33" (assert) nil nil) ("34" (propax) nil nil) ("35" (assert) nil nil) ("36" (assert) nil nil) ("37" (assert) nil nil) ("38" (propax) nil nil) ("39" (assert) nil nil) ("40" (propax) nil nil) ("41" (propax) nil nil) ("42" (propax) nil nil) ("43" (assert) nil nil) ("44" (propax) nil nil) ("45" (propax) nil nil) ("46" (propax) nil nil) ("47" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil) ("3" (propax) nil nil) ("4" (assert) nil nil) ("5" (assert) nil nil) ("6" (assert) nil nil) ("7" (assert) nil nil) ("8" (assert) nil nil) ("9" (assert) nil nil) ("10" (propax) nil nil) ("11" (assert) nil nil) ("12" (propax) nil nil) ("13" (propax) nil nil) ("14" (assert) nil nil) ("15" (assert) nil nil) ("16" (assert) nil nil) ("17" (assert) nil nil) ("18" (assert) nil nil) ("19" (assert) nil nil) ("20" (assert) nil nil) ("21" (assert) nil nil) ("22" (propax) nil nil) ("23" (assert) nil nil) ("24" (propax) nil nil) ("25" (propax) nil nil) ("26" (propax) nil nil) ("27" (assert) nil nil) ("28" (propax) nil nil) ("29" (assert) nil nil) ("30" (propax) nil nil) ("31" (propax) nil nil) ("32" (assert) nil nil) ("33" (assert) nil nil) ("34" (propax) nil nil) ("35" (assert) nil nil) ("36" (assert) nil nil) ("37" (assert) nil nil) ("38" (propax) nil nil) ("39" (assert) nil nil) ("40" (propax) nil nil) ("41" (propax) nil nil) ("42" (propax) nil nil) ("43" (assert) nil nil) ("44" (propax) nil nil) ("45" (propax) nil nil) ("46" (propax) nil nil) ("47" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil) ("3" (propax) nil nil) ("4" (assert) nil nil) ("5" (assert) nil nil) ("6" (assert) nil nil) ("7" (assert) nil nil) ("8" (assert) nil nil) ("9" (assert) nil nil) ("10" (propax) nil nil) ("11" (assert) nil nil) ("12" (propax) nil nil) ("13" (propax) nil nil) ("14" (assert) nil nil) ("15" (assert) nil nil) ("16" (assert) nil nil) ("17" (assert) nil nil) ("18" (assert) nil nil) ("19" (assert) nil nil) ("20" (assert) nil nil) ("21" (assert) nil nil) ("22" (propax) nil nil) ("23" (assert) nil nil) ("24" (propax) nil nil) ("25" (propax) nil nil) ("26" (propax) nil nil) ("27" (propax) nil nil) ("28" (assert) nil nil) ("29" (propax) nil nil) ("30" (assert) nil nil) ("31" (propax) nil nil) ("32" (propax) nil nil) ("33" (assert) nil nil) ("34" (assert) nil nil) ("35" (propax) nil nil) ("36" (assert) nil nil) ("37" (assert) nil nil) ("38" (assert) nil nil) ("39" (propax) nil nil) ("40" (assert) nil nil) ("41" (propax) nil nil) ("42" (propax) nil nil) ("43" (propax) nil nil) ("44" (assert) nil nil) ("45" (propax) nil nil) ("46" (propax) nil nil) ("47" (expand "c_d_per_action" -65) (("47" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil) ("3" (propax) nil nil) ("4" (assert) nil nil) ("5" (assert) nil nil) ("6" (assert) nil nil) ("7" (assert) nil nil) ("8" (assert) nil nil) ("9" (assert) nil nil) ("10" (propax) nil nil) ("11" (assert) nil nil) ("12" (propax) nil nil) ("13" (propax) nil nil) ("14" (assert) nil nil) ("15" (assert) nil nil) ("16" (assert) nil nil) ("17" (assert) nil nil) ("18" (assert) nil nil) ("19" (assert) nil nil) ("20" (assert) nil nil) ("21" (assert) nil nil) ("22" (propax) nil nil) ("23" (assert) nil nil) ("24" (propax) nil nil) ("25" (propax) nil nil) ("26" (propax) nil nil) ("27" (propax) nil nil) ("28" (assert) nil nil) ("29" (propax) nil nil) ("30" (assert) nil nil) ("31" (propax) nil nil) ("32" (propax) nil nil) ("33" (assert) nil nil) ("34" (assert) nil nil) ("35" (propax) nil nil) ("36" (assert) nil nil) ("37" (assert) nil nil) ("38" (assert) nil nil) ("39" (propax) nil nil) ("40" (assert) nil nil) ("41" (propax) nil nil) ("42" (propax) nil nil) ("43" (propax) nil nil) ("44" (assert) nil nil) ("45" (propax) nil nil) ("46" (propax) nil nil) ("47" (expand "c_d_per_action" -48) (("47" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((maxtime formal-const-decl "{maxtime: posnat | maxinfuse <= maxtime}" ICE_templates_th nil) (<= const-decl "bool" reals nil) (maxinfuse formal-const-decl "posnat" ICE_templates_th nil) (maxrate formal-const-decl "posnat" ICE_templates_th nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (state type-eq-decl nil system_th nil) (node_to_patient type-eq-decl nil system_th nil) (patients_type type-eq-decl nil patient_th nil) (patient_db_type type-eq-decl nil system_th nil) (n_state type-eq-decl nil node_th nil) (node_to_pd type-eq-decl nil system_th nil) (i_state type-eq-decl nil coordinator_th nil) (device type-eq-decl nil devices_th nil) (nlimit const-decl "nat" coord_t_and_c_th nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (action_id type-decl nil coord_t_and_c_th nil) (lemma_cd_fun_act_ip formula-decl nil ICE_templates_rsce_th nil) (lemma_cd_fun_act_ip_coord formula-decl nil ICE_templates_rsce_th nil) (c_fun_consistent formula-decl nil ICE_templates_th nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (c_d_fun_action const-decl "state" ICE_templates_rsce_th nil) (c_d_per_action const-decl "boolean" ICE_templates_rsce_th nil)) shostak))("ICE_templates" ICE_templates_th c_comp_holdx 0 (c_comp_holdx-1 nil 3862042490 ("" (skosimp*) (("" (beta) (("" (flatten) (("" (lemma "lemma_cd_fun_act_ip" ("a" "a!1" "p" "p!1" "d" "d!1" "st" "st!1")) (("" (beta -1) (("" (split -1) (("1" (flatten -1) (("1" (lemma "lemma_cd_fun_act_ip_coord" ("a" "a!1" "d" "d!1" "p" "p!1" "st" "st!1")) (("1" (beta -1) (("1" (split -1) (("1" (flatten -1) (("1" (lemma "c_d_fun_action_lemma_onal" ("a" "a!1" "d" "d!1" "p" "p!1" "st" "st!1")) (("1" (beta -1) (("1" (split -1) (("1" (flatten -1) (("1" (lemma "c_fun_consistent" ("a" "a!1" "d" "d!1" "p" "p!1" "st" "st!1")) (("1" (beta -1) (("1" (split -1) (("1" (lemma "c_holdnxdevdispxalarm" ("d" "d!1" "p" "p!1" "st" "c_d_fun_action(a!1, st!1)")) (("1" (beta -1) (("1" (split -1) (("1" (propax) nil nil) ("2" (assert) nil nil) ("3" (assert) nil nil) ("4" (assert) nil nil) ("5" (assert) nil nil) ("6" (assert) nil nil) ("7" (assert) nil nil) ("8" (assert) nil nil) ("9" (replace -10 1) (("9" (expand "c_d_fun_action" 1) (("9" (assert) nil nil)) nil)) nil) ("10" (replace -10 1) (("10" (expand "c_d_fun_action" 1) (("10" (assert) nil nil)) nil)) nil) ("11" (replace -10 1) (("11" (expand "c_d_fun_action" 1) (("11" (assert) nil nil)) nil)) nil) ("12" (replace -10 1) (("12" (expand "c_d_fun_action" 1) (("12" (assert) nil nil)) nil)) nil) ("13" (replace -10 1) (("13" (expand "c_d_fun_action" 1) (("13" (assert) nil nil)) nil)) nil) ("14" (assert) (("14" (replace -17 1) (("14" (expand "c_d_fun_action" 1) (("14" (propax) nil nil)) nil)) nil)) nil) ("15" (assert) (("15" (replace -17 1) (("15" (expand "c_d_fun_action" 1) (("15" (assert) nil nil)) nil)) nil)) nil) ("16" (assert) (("16" (replace -17 1) (("16" (expand "c_d_fun_action" 1) (("16" (assert) nil nil)) nil)) nil)) nil) ("17" (assert) (("17" (replace -17 1) (("17" (expand "c_d_fun_action" 1) (("17" (propax) nil nil)) nil)) nil)) nil) ("18" (assert) (("18" (replace -17 1) (("18" (expand "c_d_fun_action" 1) (("18" (assert) nil nil)) nil)) nil)) nil) ("19" (assert) (("19" (replace -17 1) (("19" (expand "c_d_fun_action" 1) (("19" (assert) nil nil)) nil)) nil)) nil) ("20" (assert) (("20" (replace -17 1) (("20" (expand "c_d_fun_action" 1) (("20" (propax) nil nil)) nil)) nil)) nil) ("21" (replace -10 1) (("21" (expand "c_d_fun_action" 1) (("21" (assert) nil nil)) nil)) nil) ("22" (replace -10 1) (("22" (expand "c_d_fun_action" 1) (("22" (assert) nil nil)) nil)) nil) ("23" (replace -10 1) (("23" (expand "c_d_fun_action" 1) (("23" (assert) nil nil)) nil)) nil) ("24" (replace -10 1) (("24" (expand "c_d_fun_action" 1) (("24" (assert) nil nil)) nil)) nil) ("25" (replace -10 1) (("25" (expand "c_d_fun_action" 1) (("25" (assert) nil nil)) nil)) nil) ("26" (replace -10 1) (("26" (expand "c_d_fun_action" 1) (("26" (assert) nil nil)) nil)) nil) ("27" (expand "c_d_fun_action" 1) (("27" (assert) nil nil)) nil) ("28" (expand "c_d_fun_action" 1) (("28" (assert) nil nil)) nil) ("29" (expand "c_d_fun_action" 1) (("29" (assert) nil nil)) nil) ("30" (expand "c_d_fun_action" 1) (("30" (assert) nil nil)) nil) ("31" (expand "c_d_fun_action" 1) (("31" (assert) nil nil)) nil) ("32" (expand "c_d_fun_action" 1) (("32" (assert) nil nil)) nil) ("33" (expand "c_d_fun_action" 1) (("33" (assert) nil nil)) nil) ("34" (assert) nil nil) ("35" (replace -15 1) (("35" (propax) nil nil)) nil) ("36" (assert) nil nil) ("37" (assert) nil nil) ("38" (assert) nil nil) ("39" (assert) nil nil) ("40" (assert) nil nil) ("41" (assert) nil nil) ("42" (assert) nil nil) ("43" (assert) nil nil) ("44" (assert) nil nil) ("45" (assert) nil nil) ("46" (assert) nil nil) ("47" (assert) nil nil) ("48" (assert) nil nil) ("49" (assert) nil nil) ("50" (propax) nil nil) ("51" (propax) nil nil)) nil)) nil)) nil) ("2" (propax) nil nil) ("3" (propax) nil nil) ("4" (assert) nil nil) ("5" (assert) nil nil) ("6" (assert) nil nil) ("7" (assert) nil nil) ("8" (assert) nil nil) ("9" (assert) nil nil) ("10" (propax) nil nil) ("11" (assert) nil nil) ("12" (propax) nil nil) ("13" (propax) nil nil) ("14" (assert) nil nil) ("15" (assert) nil nil) ("16" (assert) nil nil) ("17" (assert) nil nil) ("18" (assert) nil nil) ("19" (assert) nil nil) ("20" (assert) nil nil) ("21" (assert) nil nil) ("22" (propax) nil nil) ("23" (assert) nil nil) ("24" (propax) nil nil) ("25" (propax) nil nil) ("26" (propax) nil nil) ("27" (assert) nil nil) ("28" (propax) nil nil) ("29" (assert) nil nil) ("30" (propax) nil nil) ("31" (propax) nil nil) ("32" (assert) nil nil) ("33" (assert) nil nil) ("34" (propax) nil nil) ("35" (assert) nil nil) ("36" (assert) nil nil) ("37" (assert) nil nil) ("38" (propax) nil nil) ("39" (assert) nil nil) ("40" (propax) nil nil) ("41" (propax) nil nil) ("42" (propax) nil nil) ("43" (assert) nil nil) ("44" (propax) nil nil) ("45" (propax) nil nil) ("46" (assert) (("46" (expand "c_d_per_action" -70) (("46" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil) ("3" (propax) nil nil) ("4" (assert) nil nil) ("5" (assert) nil nil) ("6" (assert) nil nil) ("7" (assert) nil nil) ("8" (assert) nil nil) ("9" (assert) nil nil) ("10" (propax) nil nil) ("11" (assert) nil nil) ("12" (propax) nil nil) ("13" (propax) nil nil) ("14" (assert) nil nil) ("15" (assert) nil nil) ("16" (assert) nil nil) ("17" (assert) nil nil) ("18" (assert) nil nil) ("19" (assert) nil nil) ("20" (assert) nil nil) ("21" (assert) nil nil) ("22" (propax) nil nil) ("23" (assert) nil nil) ("24" (propax) nil nil) ("25" (propax) nil nil) ("26" (propax) nil nil) ("27" (assert) nil nil) ("28" (propax) nil nil) ("29" (assert) nil nil) ("30" (propax) nil nil) ("31" (propax) nil nil) ("32" (assert) nil nil) ("33" (assert) nil nil) ("34" (propax) nil nil) ("35" (assert) nil nil) ("36" (assert) nil nil) ("37" (assert) nil nil) ("38" (propax) nil nil) ("39" (assert) nil nil) ("40" (propax) nil nil) ("41" (propax) nil nil) ("42" (propax) nil nil) ("43" (assert) nil nil) ("44" (propax) nil nil) ("45" (propax) nil nil) ("46" (propax) nil nil) ("47" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil) ("3" (propax) nil nil) ("4" (assert) nil nil) ("5" (assert) nil nil) ("6" (assert) nil nil) ("7" (assert) nil nil) ("8" (assert) nil nil) ("9" (assert) nil nil) ("10" (propax) nil nil) ("11" (assert) nil nil) ("12" (propax) nil nil) ("13" (propax) nil nil) ("14" (assert) nil nil) ("15" (assert) nil nil) ("16" (assert) nil nil) ("17" (assert) nil nil) ("18" (assert) nil nil) ("19" (assert) nil nil) ("20" (assert) nil nil) ("21" (assert) nil nil) ("22" (propax) nil nil) ("23" (assert) nil nil) ("24" (propax) nil nil) ("25" (propax) nil nil) ("26" (propax) nil nil) ("27" (propax) nil nil) ("28" (assert) nil nil) ("29" (propax) nil nil) ("30" (assert) nil nil) ("31" (propax) nil nil) ("32" (propax) nil nil) ("33" (assert) nil nil) ("34" (assert) nil nil) ("35" (propax) nil nil) ("36" (assert) nil nil) ("37" (assert) nil nil) ("38" (assert) nil nil) ("39" (propax) nil nil) ("40" (assert) nil nil) ("41" (propax) nil nil) ("42" (propax) nil nil) ("43" (propax) nil nil) ("44" (assert) nil nil) ("45" (propax) nil nil) ("46" (propax) nil nil) ("47" (assert) (("47" (expand "c_d_per_action" -64) (("47" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil) ("3" (propax) nil nil) ("4" (assert) nil nil) ("5" (assert) nil nil) ("6" (assert) nil nil) ("7" (assert) nil nil) ("8" (assert) nil nil) ("9" (assert) nil nil) ("10" (propax) nil nil) ("11" (assert) nil nil) ("12" (propax) nil nil) ("13" (propax) nil nil) ("14" (assert) nil nil) ("15" (assert) nil nil) ("16" (assert) nil nil) ("17" (assert) nil nil) ("18" (assert) nil nil) ("19" (assert) nil nil) ("20" (assert) nil nil) ("21" (assert) nil nil) ("22" (propax) nil nil) ("23" (assert) nil nil) ("24" (propax) nil nil) ("25" (propax) nil nil) ("26" (propax) nil nil) ("27" (propax) nil nil) ("28" (assert) nil nil) ("29" (propax) nil nil) ("30" (assert) nil nil) ("31" (propax) nil nil) ("32" (propax) nil nil) ("33" (assert) nil nil) ("34" (assert) nil nil) ("35" (propax) nil nil) ("36" (assert) nil nil) ("37" (assert) nil nil) ("38" (assert) nil nil) ("39" (propax) nil nil) ("40" (assert) nil nil) ("41" (propax) nil nil) ("42" (propax) nil nil) ("43" (propax) nil nil) ("44" (assert) nil nil) ("45" (propax) nil nil) ("46" (propax) nil nil) ("47" (assert) (("47" (expand "c_d_per_action" -47) (("47" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((maxtime formal-const-decl "{maxtime: posnat | maxinfuse <= maxtime}" ICE_templates_th nil) (<= const-decl "bool" reals nil) (maxinfuse formal-const-decl "posnat" ICE_templates_th nil) (maxrate formal-const-decl "posnat" ICE_templates_th nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (state type-eq-decl nil system_th nil) (node_to_patient type-eq-decl nil system_th nil) (patients_type type-eq-decl nil patient_th nil) (patient_db_type type-eq-decl nil system_th nil) (n_state type-eq-decl nil node_th nil) (node_to_pd type-eq-decl nil system_th nil) (i_state type-eq-decl nil coordinator_th nil) (device type-eq-decl nil devices_th nil) (nlimit const-decl "nat" coord_t_and_c_th nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (action_id type-decl nil coord_t_and_c_th nil) (lemma_cd_fun_act_ip formula-decl nil ICE_templates_rsce_th nil) (lemma_cd_fun_act_ip_coord formula-decl nil ICE_templates_rsce_th nil) (c_fun_consistent formula-decl nil ICE_templates_th nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (c_d_fun_action const-decl "state" ICE_templates_rsce_th nil) (c_d_per_action const-decl "boolean" ICE_templates_rsce_th nil)) shostak))("ICE_patient_int" p_interface_th m_home_action_lemma 0 (m_home_action_lemma-1 nil 3888042837 ("" (skosimp*) (("" (beta) (("" (flatten) (("" (lemma "m_action_select_lemma" ("a" "powr" "d" "d!1" "p" "p!1" "xs" "xs!1")) (("" (beta -1) (("" (split -1) (("1" (lemma "home_action_lemma" ("d" "d!1" "p" "p!1" "xs" "xs!1")) (("1" (beta -1) (("1" (split -1) (("1" (lemma "pdfa_lemma" ("a" "powr" "p" "p!1" "st" "xs!1`ss")) (("1" (replace -3 11) (("1" (replace -1 -2) (("1" (expand "p_d_fun_actionx" -2) (("1" (replace -23 -2) (("1" (beta -2) (("1" (expand "p_fun_act" -2) (("1" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil) ("4" (postpone) nil nil) ("5" (postpone) nil nil) ("6" (postpone) nil nil) ("7" (postpone) nil nil) ("8" (postpone) nil nil) ("9" (postpone) nil nil) ("10" (postpone) nil nil) ("11" (postpone) nil nil) ("12" (postpone) nil nil) ("13" (postpone) nil nil) ("14" (postpone) nil nil) ("15" (postpone) nil nil) ("16" (postpone) nil nil) ("17" (postpone) nil nil) ("18" (postpone) nil nil) ("19" (postpone) nil nil) ("20" (postpone) nil nil) ("21" (postpone) nil nil) ("22" (postpone) nil nil) ("23" (postpone) nil nil) ("24" (postpone) nil nil) ("25" (postpone) nil nil) ("26" (postpone) nil nil) ("27" (postpone) nil nil) ("28" (postpone) nil nil) ("29" (postpone) nil nil) ("30" (postpone) nil nil) ("31" (postpone) nil nil) ("32" (postpone) nil nil) ("33" (postpone) nil nil) ("34" (postpone) nil nil)) nil)) nil)) nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil) ("4" (postpone) nil nil) ("5" (postpone) nil nil) ("6" (postpone) nil nil) ("7" (postpone) nil nil) ("8" (postpone) nil nil) ("9" (postpone) nil nil) ("10" (postpone) nil nil) ("11" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) nil shostak))("ICE_templates" ICE_templates_th c_p_fun_consistent_displays 0 (c_p_fun_consistent_displays-1 nil 3893739424 ("" (skosimp*) (("" (beta) (("" (flatten) (("" (lemma "cdfa_lemma" ("a" "a!1" "st" "st!1")) (("" (lemma "p_to_act_ip_coord" ("a" "a!1" "d" "d!1" "p" "p!1" "st" "st!1")) (("" (beta -1) (("" (split -1) (("1" (lemma "lemma_fun_act_cp" ("a" "a!1" "p" "p!1" "d" "d!1" "st" "st!1")) (("1" (beta -1) (("1" (split -1) (("1" (flatten -1) (("1" (lemma "lemma_fun_act_cpon" ("a" "a!1" "p" "p!1" "d" "d!1" "st" "st!1")) (("1" (beta -1) (("1" (split -1) (("1" (flatten -1) (("1" (lemma "lemma_fun_act_cpdisp" ("a" "a!1" "p" "p!1" "d" "d!1" "st" "st!1")) (("1" (beta -1) (("1" (split -1) (("1" (flatten -1) (("1" (lemma "lemma_reflect_device_consistent_c_d" ("p" "p!1" "d" "d!1" "st" "c_fun_act(a!1, d!1, p!1, st!1)")) (("1" (beta -1) (("1" (split -1) (("1" (lemma "panlemma1np" ("d" "d!1" "p" "p!1" "st" "c_fun_act(a!1, d!1, p!1, st!1)")) (("1" (beta -1) (("1" (split -1) (("1" (flatten -1) (("1" (lemma "panlemma1ip" ("d" "d!1" "p" "p!1" "st" "c_fun_act(a!1, d!1, p!1, st!1)")) (("1" (beta -1) (("1" (split -1) (("1" (flatten -1) (("1" (lemma "panlemma1ipz" ("d" "d!1" "p" "p!1" "st" "c_fun_act(a!1, d!1, p!1, st!1)")) (("1" (beta -1) (("1" (split -1) (("1" (flatten -1) (("1" (lemma "panlemma1npx" ("d" "d!1" "p" "p!1" "st" "c_fun_act(a!1, d!1, p!1, st!1)")) (("1" (beta -1) (("1" (split -1) (("1" (flatten -1) (("1" (lemma "lemma2xnqq" ("d" "d!1" "p" "p!1" "st" "c_fun_act(a!1, d!1, p!1, st!1)")) (("1" (beta -1) (("1" (split -1) (("1" (flatten -1) (("1" (replace -71 18) (("1" (expand "c_d_fun_actionx" 18) (("1" (replace -85 18) (("1" (replace -86 18) (("1" (expand "reflect_device_to_coordinator" 18) (("1" (split -84) (("1" (flatten -1) (("1" (assert) (("1" (expand "tick_pan_coordinator" 19) (("1" (replace -7 19) (("1" (beta 19) (("1" (replace -44 19) (("1" (replace -43 19) (("1" (replace -54 19) (("1" (replace -56 19) (("1" (replace -83 19) (("1" (replace -41 19) (("1" (replace -40 19) (("1" (replace -63 19) (("1" (replace -55 19) (("1" (replace -84 19) (("1" (beta 19) (("1" (replace -12 19) (("1" (replace -11 19) (("1" (expand "update_p_panel" 19) (("1" (replace -67 19) (("1" (split 19) (("1" (flatten 1) (("1" (split 1) (("1" (lift-if 1) (("1" (split 1) (("1" (flatten 1) (("1" (expand "tick_pan_patient" 1) (("1" (replace -36 1) (("1" (replace -5 1) (("1" (beta 1) (("1" (expand "empty_pan_msg" 1) (("1" (replace -42 1) (("1" (replace -57 1) (("1" (replace -65 1) (("1" (replace -86 1) (("1" (beta 1) (("1" (expand "update_t_panel" 1) (("1" (replace -73 1) (("1" (expand "tick_pan_device" 1) (("1" (replace -52 1) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (split -1) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (lift-if 1) (("2" (split 1) (("1" (flatten 1) (("1" (expand "tick_pan_patient" 1) (("1" (replace -36 1) (("1" (replace -5 1) (("1" (beta 1) (("1" (expand "empty_pan_msg" 1) (("1" (replace -42 1) (("1" (replace -57 1) (("1" (replace -65 1) (("1" (replace -86 1) (("1" (beta 1) (("1" (expand "update_t_panel" 1) (("1" (replace -73 1) (("1" (expand "tick_pan_device" 1) (("1" (replace -52 1) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (split -1) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("3" (lift-if 1) (("3" (split 1) (("1" (flatten 1) (("1" (expand "tick_pan_patient" 1) (("1" (replace -36 1) (("1" (replace -5 1) (("1" (beta 1) (("1" (expand "empty_pan_msg" 1) (("1" (replace -42 1) (("1" (replace -57 1) (("1" (replace -65 1) (("1" (replace -86 1) (("1" (beta 1) (("1" (expand "update_t_panel" 1) (("1" (replace -73 1) (("1" (expand "tick_pan_device" 1) (("1" (replace -52 1) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (split -1) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten 1) (("2" (lift-if 1) (("2" (assert) (("2" (replace -74 1) (("2" (expand "tick_pan_patient" 1) (("2" (replace -37 1) (("2" (replace -6 1) (("2" (beta 1) (("2" (expand "empty_pan_msg" 1) (("2" (replace -43 1) (("2" (replace -58 1) (("2" (replace -66 1) (("2" (replace -87 1) (("2" (beta 1) (("2" (expand "update_t_panel" 1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten -1) (("2" (assert) (("2" (expand "tick_pan_coordinator" 18) (("2" (replace -9 18) (("2" (beta 18) (("2" (replace -45 18) (("2" (replace -44 18) (("2" (replace -55 18) (("2" (replace -57 18) (("2" (replace -84 18) (("2" (replace -42 18) (("2" (replace -41 18) (("2" (replace -56 18) (("2" (replace -13 18) (("2" (replace -12 18) (("2" (expand "update_p_panel" 18) (("2" (replace -68 18) (("2" (split 18) (("1" (flatten 1) (("1" (split 1) (("1" (lift-if 1) (("1" (split 1) (("1" (flatten 1) (("1" (expand "tick_pan_patient" 1) (("1" (replace -37 1) (("1" (replace -7 1) (("1" (expand "empty_pan_msg" 1) (("1" (replace -74 1) (("1" (expand "update_t_panel" 1) (("1" (replace -67 1) (("1" (replace -87 1) (("1" (beta 1) (("1" (replace -43 1) (("1" (replace -58 1) (("1" (replace -87 1) (("1" (beta 1) (("1" (replace -18 1) (("1" (replace -53 1) (("1" (replace -92 1) (("1" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (split -1) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (expand "tick_pan_patient" 1) (("2" (replace -36 1) (("2" (replace -6 1) (("2" (expand "empty_pan_msg" 1) (("2" (expand "update_t_panel" 1) (("2" (lift-if 1) (("2" (split -1) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (lift-if 1) (("3" (split 1) (("1" (flatten 1) (("1" (expand "tick_pan_patient" 1) (("1" (replace -37 1) (("1" (replace -7 1) (("1" (expand "empty_pan_msg" 1) (("1" (expand "update_t_panel" 1) (("1" (replace -74 1) (("1" (replace -18 1) (("1" (replace -53 1) (("1" (replace -43 1) (("1" (replace -58 1) (("1" (replace -67 1) (("1" (replace -87 1) (("1" (beta 1) (("1" (replace -94 1) (("1" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (split -1) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten 1) (("2" (split 1) (("1" (lift-if 1) (("1" (split 1) (("1" (flatten 1) (("1" (replace -69 1) (("1" (replace -89 1) (("1" (beta 1) (("1" (expand "tick_pan_patient" 1) (("1" (replace -39 1) (("1" (replace -9 1) (("1" (expand "empty_pan_msg" 1) (("1" (replace -45 1) (("1" (replace -60 1) (("1" (replace -69 1) (("1" (replace -89 1) (("1" (beta 1) (("1" (expand "update_t_panel" 1) (("1" (replace -27 1) (("1" (replace -62 1) (("1" (replace -30 1) (("1" (replace -63 1) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("2" (assert) (("2" (expand "tick_pan_patient" 1) (("2" (replace -38 1) (("2" (replace -8 1) (("2" (beta 1) (("2" (expand "empty_pan_msg" 1) (("2" (replace -44 1) (("2" (replace -59 1) (("2" (replace -68 1) (("2" (replace -88 1) (("2" (beta 1) (("2" (expand "update_t_panel" 1) (("2" (replace -17 1) (("2" (replace -75 1) (("2" (replace -55 1) (("2" (replace -96 1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (assert) (("3" (expand "tick_pan_patient" 1) (("3" (replace -38 1) (("3" (replace -8 1) (("3" (expand "empty_pan_msg" 1) (("3" (replace -44 1) (("3" (replace -68 1) (("3" (replace -88 1) (("3" (beta 1) (("3" (expand "update_t_panel" 1) (("3" (replace -17 1) (("3" (replace -75 1) (("3" (replace -55 1) (("3" (replace -59 1) (("3" (replace -88 1) (("3" (beta 1) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil) ("3" (assert) nil nil) ("4" (split -76) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("5" (split -76) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("6" (split -76) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("7" (assert) nil nil) ("8" (split -76) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("9" (assert) nil nil) ("10" (assert) nil nil) ("11" (assert) nil nil) ("12" (assert) nil nil) ("13" (split -76) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("14" (split -76) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("15" (expand "c_fun_act" 1) (("15" (propax) nil nil)) nil) ("16" (expand "c_fun_act" 1) (("16" (propax) nil nil)) nil) ("17" (expand "c_fun_act" 1) (("17" (assert) nil nil)) nil) ("18" (replace -46 1) (("18" (expand "c_fun_act" 1) (("18" (assert) nil nil)) nil)) nil) ("19" (replace -46 1) (("19" (expand "c_fun_act" 1) (("19" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil) ("3" (assert) nil nil) ("4" (split -74) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("5" (split -74) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("6" (split -74) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("7" (assert) nil nil) ("8" (split -74) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("9" (assert) nil nil) ("10" (assert) nil nil) ("11" (assert) nil nil) ("12" (assert) nil nil) ("13" (split -74) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("14" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil) ("3" (assert) nil nil) ("4" (split -71) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("5" (split -71) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("6" (split -71) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("7" (assert) nil nil) ("8" (split -71) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("9" (replace -41 1) (("9" (expand "c_fun_act" 1) (("9" (propax) nil nil)) nil)) nil) ("10" (expand "c_fun_act" 1) (("10" (propax) nil nil)) nil) ("11" (assert) nil nil) ("12" (assert) nil nil) ("13" (assert) nil nil) ("14" (replace -41 1) (("14" (assert) nil nil)) nil) ("15" (split -71) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("16" (split -71) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("17" (expand "c_fun_act" 1) (("17" (propax) nil nil)) nil) ("18" (expand "c_fun_act" 1) (("18" (propax) nil nil)) nil) ("19" (expand "c_fun_act" 1) (("19" (propax) nil nil)) nil) ("20" (replace -41 1) (("20" (expand "c_fun_act" 1) (("20" (postpone) nil nil)) nil)) nil) ("21" (expand "c_fun_act" 1) (("21" (assert) nil nil)) nil) ("22" (replace -41 1) (("22" (expand "c_fun_act" 1) (("22" (assert) nil nil)) nil)) nil) ("23" (replace -41 1) (("23" (expand "c_fun_act" 1) (("23" (propax) nil nil)) nil)) nil) ("24" (replace -41 1) (("24" (expand "c_fun_act" 1) (("24" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil) ("3" (assert) nil nil) ("4" (split -53) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("5" (split -53) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("6" (split -53) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("7" (assert) nil nil) ("8" (split -53) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("9" (assert) nil nil) ("10" (assert) nil nil) ("11" (assert) nil nil) ("12" (assert) nil nil) ("13" (split -53) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("14" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil) ("3" (assert) nil nil) ("4" (split -38) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("5" (split -38) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("6" (split -38) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("7" (assert) nil nil) ("8" (split -38) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("9" (assert) nil nil) ("10" (assert) nil nil) ("11" (assert) nil nil) ("12" (assert) nil nil) ("13" (split -38) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("14" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil) ("3" (assert) nil nil) ("4" (split -37) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("5" (split -37) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("6" (split -37) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("7" (assert) nil nil) ("8" (split -37) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("9" (assert) nil nil) ("10" (assert) nil nil) ("11" (assert) nil nil) ("12" (assert) nil nil) ("13" (split -37) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("14" (expand "c_fun_act" 1) (("14" (propax) nil nil)) nil) ("15" (expand "c_fun_act" 1) (("15" (propax) nil nil)) nil) ("16" (replace -7 1) (("16" (expand "c_fun_act" 1) (("16" (propax) nil nil)) nil)) nil) ("17" (expand "c_fun_act" 1) (("17" (propax) nil nil)) nil) ("18" (expand "c_fun_act" 1) (("18" (assert) nil nil)) nil) ("19" (replace -7 1) (("19" (expand "c_fun_act" 1) (("19" (assert) nil nil)) nil)) nil) ("20" (replace -7 1) (("20" (expand "c_fun_act" 1) (("20" (propax) nil nil)) nil)) nil) ("21" (split -37) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("22" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil) ("3" (propax) nil nil) ("4" (propax) nil nil) ("5" (propax) nil nil) ("6" (split -35) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("7" (assert) nil nil) ("8" (split -35) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("9" (assert) nil nil) ("10" (assert) nil nil) ("11" (propax) nil nil) ("12" (split -35) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("13" (split -35) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("14" (propax) nil nil) ("15" (split -35) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("16" (assert) nil nil) ("17" (propax) nil nil) ("18" (assert) nil nil) ("19" (assert) nil nil) ("20" (assert) nil nil) ("21" (propax) nil nil) ("22" (propax) nil nil) ("23" (postpone) nil nil) ("24" (assert) (("24" (postpone) nil nil)) nil) ("25" (split -35) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("26" (propax) nil nil) ("27" (propax) nil nil) ("28" (assert) (("28" (expand "c_d_per_action" -38) (("28" (propax) nil nil)) nil)) nil) ("29" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil) ("3" (propax) nil nil) ("4" (propax) nil nil) ("5" (propax) nil nil) ("6" (split -33) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("7" (assert) nil nil) ("8" (split -33) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("9" (assert) nil nil) ("10" (assert) nil nil) ("11" (propax) nil nil) ("12" (assert) nil nil) ("13" (split -33) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("14" (propax) nil nil) ("15" (split -33) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("16" (assert) nil nil) ("17" (propax) nil nil) ("18" (assert) nil nil) ("19" (assert) nil nil) ("20" (assert) nil nil) ("21" (propax) nil nil) ("22" (propax) nil nil) ("23" (postpone) nil nil) ("24" (postpone) nil nil) ("25" (split -33) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("26" (propax) nil nil) ("27" (propax) nil nil) ("28" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil) ("3" (propax) nil nil) ("4" (propax) nil nil) ("5" (propax) nil nil) ("6" (split -15) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("7" (assert) nil nil) ("8" (split -15) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("9" (assert) nil nil) ("10" (assert) nil nil) ("11" (propax) nil nil) ("12" (split -15) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("13" (flatten -1) (("13" (assert) nil nil)) nil) ("14" (propax) nil nil) ("15" (assert) nil nil) ("16" (assert) nil nil) ("17" (propax) nil nil) ("18" (assert) nil nil) ("19" (assert) nil nil) ("20" (assert) nil nil) ("21" (propax) nil nil) ("22" (propax) nil nil) ("23" (postpone) nil nil) ("24" (postpone) nil nil) ("25" (split -15) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("26" (propax) nil nil) ("27" (propax) nil nil) ("28" (expand "c_d_per_action" -18) (("28" (assert) nil nil)) nil) ("29" (propax) nil nil)) nil)) nil)) nil) ("2" (propax) nil nil) ("3" (propax) nil nil) ("4" (propax) nil nil) ("5" (propax) nil nil) ("6" (split -14) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("7" (assert) nil nil) ("8" (split -14) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("9" (assert) nil nil) ("10" (assert) nil nil) ("11" (propax) nil nil) ("12" (split -14) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("13" (split -14) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("14" (propax) nil nil) ("15" (split -14) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil) ("16" (assert) nil nil) ("17" (propax) nil nil) ("18" (assert) nil nil) ("19" (assert) nil nil) ("20" (propax) nil nil) ("21" (propax) nil nil) ("22" (postpone) nil nil) ("23" (postpone) nil nil) ("24" (propax) nil nil) ("25" (propax) nil nil) ("26" (propax) nil nil) ("27" (split -14) (("1" (flatten -1) (("1" (assert) nil nil)) nil) ("2" (flatten -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil shostak))