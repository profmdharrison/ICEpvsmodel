
% Michael Harrison (Newcastle University) and Paolo Masci (US National Institute of Aerospace)
% July 2020
% Patients

patient_th[maxrate: posnat, 
           maxinfuse: posnat, 
           maxtime: {maxtime: posnat | maxinfuse <= maxtime}]%, 
     %      node_limit, max_index, d_limit, p_limit: posnat]
	   : THEORY 
BEGIN
ASSUMING
    maxinfuseLEQmaxtime: ASSUMPTION maxinfuse <= maxtime
ENDASSUMING
  %IMPORTING menu_th[i_state]
  IMPORTING infusion_pumps_th[maxrate, maxinfuse, maxtime]%, 
                              %node_limit, max_index, d_limit]
  IMPORTING vital_signs_th[maxrate, maxinfuse, maxtime]
 
  
  patients_type: TYPE = setof[patient]
   
  p_null: patient = plimit
  p_bot: patient = 0
  
  %null_pid: patient = plimit
  patient_location: TYPE+
  null_loc: patient_location
  devices_type: TYPE = [device -> device_type]
  
  dpanel_type: TYPE = [device -> panel]
  p_dstates: TYPE = [device -> d_state]





p_entry_window_type: TYPE =
 [# 
    ent_device: devs_type,
    ent_par: par,
	  ent_rel: rel_op_type,
	  ent_act: action_id,
    ent_enum: enum,
    ent_num: nonneg_real,
    ent_name: nindex
 #]
 
p_disp_top_type: TYPE =
 [# sel_device: devs_type,
    devs: devices_type,
    disp_enum_params: main_enum_par,
    disp_num_params: main_num_par
 #]	  

p_disp_main_type: TYPE =
 [# disp_enum_params: main_enum_par,
	  disp_num_params: main_num_par,
	  p_actions: main_act
 #]

rule_setup_type: TYPE =
[#     current_rule_index: cindex,
        current_lim_rule_index: cindex,
        select_act: action_id
	      
 #]

 constraint_setup_type: TYPE =
 [#     current_production_index: cindex,
        current_production: production_type,
        select_par: par,
	      select_rel: rel_op_type,
	      select_num: nonneg_real,
	      select_enum: enum
 #]

 coord_panel_setup_type: TYPE =
    [#  select_pars: parset,
	      select_acts: action_ids        
     #]



  p_state: TYPE = 
 [# id: patient,
    nde: node,
	  pmode: patient_mode_type,
	  emode: patient_edit_type,
	  disp_focus: disp_focus_type, 
	 % prev_menu_entry: menu,
   % prev_menu_visible: menu_set,
    rule_set: patient_constraint_type,
   % enum_visible: enumset,
    p_entry_window: p_entry_window_type,
	  p_disp_top: p_disp_top_type,
	  p_disp_main: p_disp_main_type,
	  p_disp_device: panel,
    % shows the detail needed to edit parameters and rules
    p_panel_display: coord_panel_setup_type,
    p_rules_display: rule_setup_type,	  
    p_constraint_display: constraint_setup_type,
	  patient_panels: dpanel_type,
    filter_device_panels: dpanel_type,
    vital_signs: v_state,
    ip_state: p_dstates   #] % need to sort out how generic devices can be

%empty_device_state: device_state

empty_entry_window: p_entry_window_type =
  (#     ent_device := undef_device,
			   ent_par := enum_er,
		     ent_rel := no_rel,
			   ent_act :=  nil_action,
         ent_enum := xnilval,
         ent_num := null_value,
         ent_name := null_value
	    #)

init_disp_top: p_disp_top_type =
     (# sel_device := undef_device,
			  devs :=  LAMBDA (d: device): no_device,
			  disp_enum_params :=
	          LAMBDA (d: device):empty_enum_parameter,
	       disp_num_params :=
      LAMBDA (d: device):empty_num_parameter
	    #)

init_disp_main: p_disp_main_type =
        (#  disp_enum_params :=
			    LAMBDA (d: device):empty_enum_parameter,
			  disp_num_params :=
			    LAMBDA (d: device):empty_num_parameter,
			  p_actions := LAMBDA (d: device): emptyset
	      #)

null_nc: num_constraint_type = (# d := d_bot, p := num_er, r := eq, v := 0 #)
null_ec: enum_constraint_type = (# d := d_bot, p := enum_er, r := eq, v := xnilval #)

init_constraint: constraint_type = (# vt := empty, nc := null_nc, ec := null_ec  #)

init_const: rule_type =
             (# rule := LAMBDA (c: cindex): init_constraint,
	        action :=  (# dev := d_bot, act := nil_action  #)  #)

init_rule: patient_constraint_type =
                     LAMBDA (c: cindex): init_const

init_rule_setup: rule_setup_type =
(#  current_rule_index := 0,
    current_lim_rule_index := 0,
     select_act := nil_action
#)

empty_constraint_setup: constraint_setup_type = 
 (#     current_production_index := 0,
        current_production := LAMBDA (c: cindex): init_constraint,
        select_par := enum_er,
	      select_rel := no_rel,
	      select_num := null_value,
	      select_enum := xnilval
#)

init_panel_display: coord_panel_setup_type =
  (# select_pars := emptyset,
	    select_acts := emptyset		  
	  #)

init_p_state: p_state = 
(#
        id := p_null,
        nde := no_node,
        pmode := error,
			  emode := edit_none,
  		  disp_focus := no_focus,
			  %prev_menu_entry := no_action,
        %prev_menu_visible := emptyset,
        rule_set := init_rule,
        p_entry_window := empty_entry_window,
			  p_disp_top := init_disp_top,
			  p_disp_main := init_disp_main,
        p_disp_device := empty_panel,
        p_panel_display := init_panel_display,
        p_rules_display := init_rule_setup,
        p_constraint_display := empty_constraint_setup,
			  patient_panels := LAMBDA (d: device): empty_panel,
        filter_device_panels := LAMBDA (d: device): empty_panel,
        vital_signs := init_vs,
        ip_state := LAMBDA (d: device): init_d_state
                        #) 






%p_ent_new_device(d: device, tp: device_type, ps: p_state): p_state =
%IF (ps`p_disp_top)`devs(d) = no_device 
% THEN ps WITH [
%      p_disp_top := ps`p_disp_top WITH
%          [devs := LAMBDA (d1: device):
%                  IF d = d1 THEN tp ELSE ps`p_disp_top`devs(d1) ENDIF ],
%      p_entry_window := 
%      ps`p_entry_window WITH 
%      [ent_device := (# dv := d, dt := tp #)]]
%ELSE ps ENDIF

p_enter_name(n: nindex, ps: p_state): p_state =
ps WITH [
    p_entry_window :=
        ps`p_entry_window WITH 
      [ent_name := n ]]



p_up_display(ps: p_state): p_state =
ps WITH [
      disp_focus := COND
              ps`disp_focus = no_focus -> no_focus,
              ps`disp_focus = top_focus -> no_focus,
			        ps`disp_focus = patient_focus -> top_focus,
			        ps`disp_focus = device_focus -> patient_focus
		                ENDCOND ] 

p_down_display(ps:p_state): p_state =
ps WITH [
       disp_focus := COND
          ps`disp_focus = no_focus -> top_focus,
          ps`disp_focus = top_focus -> patient_focus,
			    ps`disp_focus = patient_focus -> device_focus,
			    ps`disp_focus = device_focus -> no_focus
		       ENDCOND ]


add_nde_patient_device(nd: node, d: device, dt: device_type,
                       ps: p_state): p_state =

COND
   dt = infusion_pump ->
      LET ds = ps`ip_state(d) IN
    ps WITH
   [ p_disp_top :=
       ps`p_disp_top WITH
         [devs := LAMBDA (d1: device): 
             IF d1 = d THEN dt 
               ELSE (ps`p_disp_top)`devs(d1) ENDIF],
      patient_panels := LAMBDA (d1: device):
                         IF d1 = d THEN
			      ds`pan ELSE ps`patient_panels(d1) ENDIF,
     ip_state := IF dt = infusion_pump THEN
                     LAMBDA (d1: device): 
                     IF d = d1 THEN ds WITH [dev := d, nde := nd] 
                     ELSE ps`ip_state(d1) ENDIF
		     ELSE ps`ip_state ENDIF],
  dt = vital_signs_device ->
      LET vs = ps`vital_signs IN
    ps WITH
    [ p_disp_top
       := ps`p_disp_top
         WITH [devs := 
            LAMBDA (d1: device): IF d1 = d 
            THEN dt ELSE (ps`p_disp_top)`devs(d1) ENDIF],
      patient_panels := LAMBDA (d1: device):
                         IF d1 = d THEN
			      vs`pan ELSE ps`patient_panels(d1) ENDIF,
     vital_signs :=  ps`vital_signs WITH [dev := d, nde := nd] ],
      ELSE -> ps
 ENDCOND
	  
setup_top_panel(d: device, pa: panel, ps: p_state): p_state =
 % LET ps = change_ps_menu(edit_none_menu, ps) IN 
 ps WITH
      [pmode := d_mode,
       emode := edit_none,
       p_disp_top :=
         p_disp_top(ps) WITH
          [ disp_enum_params :=
              LAMBDA (d1: device):
	         IF d1 = d THEN pa`enum_disp
		 ELSE p_disp_top(ps)`disp_enum_params(d1) ENDIF,
             disp_num_params :=
              LAMBDA (d1: device):
	         IF d1 = d THEN pa`num_disp
     ELSE p_disp_top(ps)`disp_num_params(d1) ENDIF],
       p_disp_device := 
         ps`patient_panels(((ps`p_disp_top)`sel_device)`dv),
       p_panel_display := init_panel_display
        
     ]

%update_top_panel(d: device, pa: panel, ps: p_state): p_state =
%   ps WITH
%      [
%       p_disp_top :=
%         p_disp_top(ps) WITH
%          [ disp_enum_params :=
%              update_enum_pars(pa, d, p_disp_top(ps)`disp_enum_params),
%            disp_num_params :=
%              update_num_pars(pa, d, p_disp_top(ps)`disp_num_params)]
%        
%     ]

setup_main_panel(d: device, pa: panel, ps: p_state): p_state =
% LET ps = change_ps_menu(edit_none_menu, ps) IN 
ps WITH
      [pmode := d_mode,
       emode := edit_none,
      p_disp_main :=
      p_disp_main(ps) WITH
      [ disp_enum_params :=
              LAMBDA (d1: device):
	         IF d1 = d THEN pa`enum_disp
		 ELSE p_disp_main(ps)`disp_enum_params(d1) ENDIF,
        disp_num_params :=
              LAMBDA (d1: device):
	         IF d1 = d THEN pa`num_disp
		 ELSE p_disp_main(ps)`disp_num_params(d1) ENDIF,
        p_actions := LAMBDA (d1: device):
                 IF d1 = d THEN pa`cmds
		 ELSE p_disp_main(ps)`p_actions(d1) ENDIF ],
       p_disp_device := ps`patient_panels(((ps`p_disp_top)`sel_device)`dv),
       p_panel_display := init_panel_display       
     ]

%update_main_panel(d: device, pa: panel, ps: p_state): p_state =
%  ps WITH
%      [
%      p_disp_main :=
%      p_disp_main(ps) WITH
%      [ disp_enum_params :=
%              update_enum_pars(pa, d, p_disp_main(ps)`disp_enum_params),
%        disp_num_params :=
%              update_num_pars(pa, d, p_disp_main(ps)`disp_num_params),
%        p_actions := update_p_actions(pa, d, p_disp_main(ps)`p_actions) ]   
%     ]

setup_device_panel(d: device, pa: panel, ps: p_state): p_state =
LET pp = LAMBDA (d1: device):
            IF d1 = d THEN pa ELSE ps`filter_device_panels(d1) ENDIF %IN
  % LET ps = change_ps_menu(edit_none_menu, ps) 
   IN ps WITH
   [ pmode := dc_mode,
     emode := edit_none,
     %patient_panels := pa,
     filter_device_panels := pp,
     p_disp_device := 
        pp(((ps`p_disp_top)`sel_device)`dv),
     p_panel_display := init_panel_display
	  ]

%update_device_panel(d: device, pa: panel, ps: p_state): p_state =
% ps WITH
%   [ 
%     device_panels := LAMBDA (d1: device):
%            IF d1 = d THEN pa ELSE ps`patient_panels(d1) ENDIF
%     filter_device_panels := 
%     LAMBDA (d1: device):
%       IF d = d1 
%       THEN 
%       filter_panel(pa, ps`filter_device_panels(d)`pars, ps`filter_device_panels(d)`cmds)
%       ELSE ps`filter_device_panels(d)`cmds ENDIF
%       
%     p_disp_device := IF ps`pmode = d_mode
%        pp(((ps`p_disp_top)`sel_device)`dv),
%     
%	  ]

p_quit_patient(ps: p_state): p_state =
   IF (ps`emode = edit_top) OR (ps`emode = edit_device)
      OR (ps`emode = edit_patient)
   THEN ps
   %change_ps_menu(edit_none_menu, ps) 
   WITH
   [ emode := edit_none,
     p_disp_device := 
     ps`patient_panels(((ps`p_disp_top)`sel_device)`dv),
     p_panel_display := init_panel_display
     ]
   ELSE ps ENDIF

% the following needs to check the type of the device
% note that at this point this function only works for infusion pumps

dev_ex(d: device, a: action_id, ps: p_state): p_state =
COND
  (ps`p_disp_top)`devs(d) = infusion_pump ->
   ps WITH
     [ip_state := LAMBDA(d1: device):
                   IF d = d1 THEN execute_ip(a, ps`ip_state(d)) ELSE ps`ip_state(d1) ENDIF
     ],
  (ps`p_disp_top)`devs(d) = vital_signs_device ->
   ps WITH
      [vital_signs := execute_vs(a, ps`vital_signs)],
  ELSE -> ps
ENDCOND

 p_select_top(ps: p_state): p_state =
   ps WITH
    [ pmode := top,
      p_disp_device := empty_panel]

per_d_select(ps: p_state): boolean =
         (ps`pmode = top) OR (ps`pmode = d_mode) OR (ps`pmode = dc_mode)




%p_select_device_coordinator_mode(ps: p_state): p_state =
%LET ps1 = p_select_dc_mode(ps) IN
% change_ps_menu(edit_none_menu, ps1) 

% need to check that device panel already updated
per_p_edit(ps: p_state): boolean = (ps`pmode = d_mode) AND (ps`emode = edit_none)

p_select_d_mode(ps: p_state): p_state =
   IF per_d_select(ps) THEN
    ps WITH [pmode := d_mode,
            p_disp_top :=
              ps`p_disp_top WITH
                [sel_device := 
                  (ps`p_entry_window)`ent_device],
      p_disp_device := 
         ps`patient_panels(((ps`p_entry_window)`ent_device)`dv)
	    ] ELSE ps ENDIF

p_select_dc_mode(ps: p_state): p_state =
   IF per_d_select(ps) THEN
    ps WITH [pmode := dc_mode,
            p_disp_top :=
              ps`p_disp_top WITH
                [sel_device := 
                  (ps`p_entry_window)`ent_device],
      p_disp_device := 
         ps`filter_device_panels(((ps`p_entry_window)`ent_device)`dv)
	    ] ELSE ps ENDIF



%p_edit_rule(ps: p_state): p_state =
%   IF ps`emode = edit_constraint 
%   THEN ps WITH 
%   [
%    emode := edit_rule,
%		menu_visible :=
%		  LAMBDA (m: menu): (m = select) OR (m = ok) OR (m = quit) OR
                       % (m = enter) OR 
%                        (m = escape) OR
%				    (m = delete)] ELSE ps ENDIF

p_select_disp_m(ps: p_state): p_state =
   COND (ps`disp_focus = top_focus) OR
         (ps`disp_focus = patient_focus) -> p_select_top(ps),
          ps`disp_focus = device_focus -> p_select_d_mode(ps),
	ELSE -> ps
   ENDCOND

per_p_select(ps: p_state): boolean =
         (ps`emode = edit_top) OR (ps`emode = edit_device) OR
	       (ps`emode = edit_patient)

per_e_select(ps: p_state): boolean =
         (ps`emode = edit_constraint) 





p_select_num_value(ps: p_state): p_state =
IF (ps`emode = edit_constraint) THEN
 % LET ps = change_ps_menu(edit_constraint_menu, ps) IN 
 ps WITH
 [p_constraint_display := 
    ps`p_constraint_display WITH
       [ select_num := 
          (ps`p_entry_window)`ent_num] ,
  p_entry_window :=
     ps`p_entry_window WITH
        [ent_num := null_value]
		  ]

ELSE ps ENDIF

p_clear_num_value(ps: p_state): p_state =
IF (ps`emode = edit_constraint) THEN
 %LET ps = change_ps_menu(edit_constraint_menu, ps) IN 
 ps WITH
    [ p_constraint_display := 
    ps`p_constraint_display WITH
      [ select_num := null_value ] ]
		  
ELSE ps ENDIF

p_select_enum_value(ps: p_state): p_state =
IF (ps`emode = edit_constraint)  THEN
LET e = (ps`p_entry_window)`ent_enum IN
% LET ps = change_ps_menu(edit_constraint_menu, ps) 
ps WITH
 [ p_constraint_display := 
     ps`p_constraint_display WITH
       [ select_enum := e ],
     p_entry_window :=
       ps`p_entry_window
         WITH [ent_enum := xnilval]]

ELSE ps ENDIF

p_clear_enum_value(ps: p_state): p_state =
IF (ps`emode = edit_constraint) THEN
% LET ps = change_ps_menu(edit_constraint_menu, ps) IN 
ps WITH
  [p_constraint_display := ps`p_constraint_display
  WITH
      [ select_enum := xnilval ] ]

ELSE ps ENDIF



per_a_select(ps: p_state): boolean =
         (ps`emode = edit_none) AND 
         ((ps`pmode = d_mode) OR (ps`pmode = p_mode))

per_a_d_r_select(ps: p_state): boolean =
         (ps`emode = edit_patient) OR (ps`emode = edit_device)

per_a_rule_select(ps: p_state): boolean =
         (ps`emode = edit_rule)


p_update_constraint(dev: device, cs:constraint_setup_type): constraint_setup_type =
IF NOT ((cs`select_enum /= xnilval) AND (cs`select_num /= null_value)) THEN
LET valuetyp = COND
                 cs`select_enum /= xnilval -> enumerated,
		 cs`select_num /= null_value -> numeral,
		 ELSE -> empty
		ENDCOND,
    select_nc = IF valuetyp = numeral THEN
                   (# d := dev, p := IF num_par(cs`select_par) 
                     THEN cs`select_par ELSE num_er ENDIF,
		      r := cs`select_rel,
		      v := cs`select_num #) ELSE null_nc ENDIF,
    select_ec = IF valuetyp = enumerated THEN
                   (# d := dev, p := IF enum_par(cs`select_par) 
                         THEN cs`select_par ELSE enum_er ENDIF, 
                   r := cs`select_rel,
		               v := cs`select_enum #) ELSE null_ec ENDIF,
    constraint = (# vt := valuetyp, nc := select_nc,
                    ec := select_ec #)
IN cs WITH
  [ current_production_index := IF cs`current_production_index < climit
                                THEN cs`current_production_index + 1 ELSE 0 ENDIF,
    current_production := LAMBDA (c: cindex):
                             IF c = cs`current_production_index
			     THEN constraint
			     ELSE cs`current_production(c) ENDIF,
    select_par := enum_er,
    select_rel := no_rel,
    select_num := null_value,
    select_enum := xnilval

]

ELSE cs ENDIF
    
   
p_ok_constraint(ps: p_state): p_state =
IF (ps`emode = edit_constraint) THEN
LET cs = ps`p_constraint_display IN
IF ((cs`select_par = enum_er) OR
    (cs`select_rel = no_rel) OR
    ((cs`select_num = null_value) AND 
     (cs`select_enum = xnilval)))
    THEN ps
 ELSE %LET ps = change_ps_menu(edit_rule_menu, ps) IN 
 ps
  WITH
    [emode := edit_rule,
    p_constraint_display := 
       p_update_constraint(((ps`p_disp_top)`sel_device)`dv, cs)] ENDIF
 ELSE ps ENDIF

p_quit_constraint(ps: p_state): p_state =
IF (ps`emode = edit_constraint) THEN
%LET ps = change_ps_menu(edit_rule_menu, ps) 
    ps WITH
    [ emode := edit_rule,
     p_constraint_display :=
     ps`p_constraint_display WITH
      [select_par := enum_er,
       select_rel := no_rel,
       select_num := null_value,
	    select_enum := xnilval]
      ]
      
 ELSE ps ENDIF

p_ok_rule(ps: p_state): p_state =
IF (ps`emode = edit_rule) THEN
LET rs = ps`p_rules_display,
    cs = ps`p_constraint_display,
    new_lim = IF ((ps`p_rules_display)`current_rule_index =
	       (ps`p_rules_display)`current_lim_rule_index)
	   THEN IF ((ps`p_rules_display)`current_lim_rule_index < climit)
                THEN (ps`p_rules_display)`current_lim_rule_index + 1 ELSE 0 ENDIF
           ELSE (ps`p_rules_display)`current_lim_rule_index ENDIF,
    new_cr = IF ((ps`p_rules_display)`current_rule_index =
         (ps`p_rules_display)`current_lim_rule_index) THEN new_lim ELSE 
                (ps`p_rules_display)`current_rule_index ENDIF
IN
IF (rs`select_act /= nil_action)
    THEN  %LET ps = change_ps_menu(edit_none_menu, ps) IN 
    ps WITH
     [emode := edit_none,
      p_rules_display := rs
        WITH
         [current_rule_index := new_cr,
          current_lim_rule_index := new_lim,
          select_act := nil_action],
      rule_set := LAMBDA (c: cindex):
                    IF c = (ps`p_rules_display)`current_rule_index THEN
		    (# rule := cs`current_production,
                       action := 
                       (# dev := ((ps`p_disp_top)`sel_device)`dv,
		                    act := rs`select_act #) #)
         ELSE ps`rule_set(c) ENDIF,
        p_constraint_display := empty_constraint_setup
       ] 
           ELSE ps ENDIF
 ELSE ps ENDIF

p_quit_rule(ps: p_state): p_state =
IF (ps`emode = edit_rule) THEN
% LET ps = change_ps_menu(edit_none_menu, ps) IN 
ps WITH
     [emode := edit_none,
      p_rules_display := init_rule_setup,
      p_constraint_display := empty_constraint_setup
	  ]

ELSE ps ENDIF





p_delete_rule(ps: p_state): p_state =
IF (ps`emode = edit_rule) THEN
LET rs = ps`p_rules_display IN
 ps WITH
     [emode := edit_none,
      rule_set := LAMBDA (c: cindex):
       COND
        c <  (ps`p_rules_display)`current_rule_index ->
                  ps`rule_set(c),
        (c >= (ps`p_rules_display)`current_rule_index) AND 
          (c + 1 < (ps`p_rules_display)`current_lim_rule_index)
               ->    ps`rule_set(c + 1),
        ELSE -> ps`rule_set(c)
        ENDCOND,
       p_rules_display := 
         rs WITH
         [ current_lim_rule_index :=
          IF (((ps`p_rules_display)`current_lim_rule_index > 0) AND
	       ((ps`p_rules_display)`current_lim_rule_index <= climit))
                THEN (ps`p_rules_display)`current_lim_rule_index - 1 ELSE climit ENDIF
           ] ]
 ELSE ps ENDIF

p_scroll_up_rule(ps: p_state): p_state =
IF (ps`emode = edit_rule) THEN
 %LET ps = change_ps_menu(
  % ps`prev_menu_visible, ps) IN 
  ps 
   WITH [p_rules_display :=
           ps`p_rules_display WITH
	   [current_rule_index :=
             IF (ps`p_rules_display)`current_rule_index <
	        (ps`p_rules_display)`current_lim_rule_index
	     THEN (ps`p_rules_display)`current_rule_index + 1
        ELSE (ps`p_rules_display)`current_rule_index ENDIF]]
ELSE ps
ENDIF

p_scroll_down_rule(ps: p_state): p_state =
IF (ps`emode = edit_rule) THEN
% LET ps = change_ps_menu(ps`prev_menu_visible, ps) IN 
ps
 WITH [p_rules_display := ps`p_rules_display WITH
         [current_rule_index :=
             IF (ps`p_rules_display)`current_rule_index > 0
	     THEN (ps`p_rules_display)`current_rule_index - 1
       ELSE (ps`p_rules_display)`current_rule_index ENDIF]]
ELSE ps
ENDIF

relate_n(v: nonneg_real, r: rel_op_type, n: nonneg_real): boolean =
 
COND
   r = lt -> v < n,
   r = le -> v <= n,
   r = gt -> v > n,
   r = ge -> v >= n,
   r = eq -> v = n,
   r = neq -> v /= n,
   ELSE -> FALSE
ENDCOND

relate_e(v: enum, r: rel_op_type, n: enum): boolean =
 
COND
   r = eq -> v = n,
   r = neq -> v /= n,
   ELSE -> FALSE
ENDCOND
  

p_check_constraint(dp: dpanel_type, ct: constraint_type): boolean =
COND
  ct`vt = numeral ->
       LET pan = dp((ct`nc)`d)
       IN relate_n((pan`num_disp)((ct`nc)`p), (ct`nc)`r, (ct`nc)`v),
  ct`vt = enumerated ->
       LET pan = dp((ct`ec)`d)
       IN relate_e((pan`enum_disp)((ct`ec)`p), (ct`ec)`r, (ct`ec)`v),
  ct`vt = empty -> TRUE,
  ELSE -> FALSE
ENDCOND



p_check_rule_broken(c: cindex, ps: p_state): boolean =
 LET ctrnt = ps`rule_set(c)`rule IN
 IF (ps`rule_set(c)`action)`dev /= d_bot
 THEN
    p_check_constraint(ps`patient_panels, ctrnt(0)) AND
    p_check_constraint(ps`patient_panels, ctrnt(1)) AND
    p_check_constraint(ps`patient_panels, ctrnt(2)) AND
    p_check_constraint(ps`patient_panels, ctrnt(3)) AND
    p_check_constraint(ps`patient_panels, ctrnt(4)) AND
    p_check_constraint(ps`patient_panels, ctrnt(5))
 ELSE FALSE
 ENDIF



% this isn't right needs to be preceded by p_enter_name


p_complete_device(d: device_type,
                    ps: p_state): p_state = 
  ps WITH 
                [p_entry_window := ps`p_entry_window
                WITH [ent_device := 
                  (# dv := (ps`p_entry_window)`ent_name, dt := d #) ]]



%  ps`emode = edit_top ->
%     ps WITH [menu_visible := LAMBDA (m: menu):
%                        (m = parameter) OR (m = escape)],
% (ps`emode = edit_patient) OR (ps`emode = edit_device) ->
%     ps WITH [menu_visible :=  LAMBDA (m: menu):
%                        (m = parameter) OR (m = action) OR (m = escape)],
% (ps`emode = edit_rule) -> 			
%     ps WITH [menu_visible := LAMBDA (m: menu):
%                        (m = parameter) OR (m = action) OR
%			(m = relation) OR (m = num_value)
%			OR (m = enum_value) OR (m = escape)],
%ELSE -> ps
%ENDCOND








% assumes that p_enter_name has been invoked  




END patient_th
