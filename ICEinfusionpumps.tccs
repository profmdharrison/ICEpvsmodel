%% TCCs associated with theory infusion_pumps_th
%% This file was automatically generated by PVS, please **do not modify** by hand.
infusion_pumps_th_TCCS: THEORY BEGIN

	% Subtype TCC generated (at line 24, column 57) for  r
	% expected type  nznum
	  % proved
	vtbi_over_rate_lemma_TCC1: OBLIGATION
	FORALL (r: {r: irates | (NOT r = 0)}): r /= 0
	
	% The subtype TCC (at line 27, column 57) in decl nil for
	% term generated from vtbi_over_time_lemma  t
	% expected type  nznum
	% Disjointness TCC generated (at line 71, column 21) for
	% COND p = dpm -> xdblank,
	%      p = mde -> xoff,
	%      p = enum_er -> xok,
	%      ELSE -> xnilval
	% ENDCOND
	  % proved
	init_ip_panel_TCC1: OBLIGATION
	FORALL (p: par):
	    enum_par(p) IMPLIES
	     NOT (p = dpm AND p = mde) AND
	      NOT (p = dpm AND p = enum_er) AND NOT (p = mde AND p = enum_er)
	
	% The subtype TCC (at line 27, column 57) in decl nil for
	 % term generated from vtbi_over_time_lemma  t
	    % expected type  nznum
	  % is subsumed by vtbi_over_rate_lemma_TCC1
	
	% The disjointness TCC (at line 63, column 21) in decl nil for
	% term generated from init_ip_panel
	%  COND p = rte -> 0, p = vtb -> 0, p = tme -> 0, ELSE -> null_value
	% ENDCOND
	% was not generated because it simplifies to TRUE.
	% Subtype TCC generated (at line 190, column 40) for  time(ds)
	% expected type  nznum
	  % proved
	fun_incr_TCC1: OBLIGATION
	FORALL (ds: d_state):
	    (ds`dm = dvtbi) AND
	     (ds`vtbi < maxinfuse) AND (ds`priority = tme) AND (ds`time > 0)
	     IMPLIES ds`time /= 0
	
	% Subtype TCC generated (at line 190, column 25) for
	% (vtbi(ds) + 1) / time(ds)
	% expected type  irates
	  % proved
	fun_incr_TCC2: OBLIGATION
	FORALL (ds: d_state):
	    (ds`dm = dvtbi) AND
	     (ds`vtbi < maxinfuse) AND (ds`priority = tme) AND (ds`time > 0)
	     IMPLIES (ds`vtbi + 1) / ds`time >= 0
	
	% Subtype TCC generated (at line 192, column 40) for  rate(ds)
	% expected type  nznum
	  % proved
	fun_incr_TCC3: OBLIGATION
	FORALL (ds: d_state):
	    (ds`dm = dvtbi) AND
	     (ds`vtbi < maxinfuse) AND (ds`priority = rte) AND (ds`rate > 0)
	     IMPLIES ds`rate /= 0
	
	% Subtype TCC generated (at line 192, column 25) for
	% (vtbi(ds) + 1) / rate(ds)
	% expected type  itimes
	  % proved
	fun_incr_TCC4: OBLIGATION
	FORALL (ds: d_state):
	    (ds`dm = dvtbi) AND
	     (ds`vtbi < maxinfuse) AND (ds`priority = rte) AND (ds`rate > 0)
	     IMPLIES (ds`vtbi + 1) / ds`rate >= 0
	
	% Disjointness TCC generated (at line 178, column 2) for
	% COND ((ds`dm = drate) AND (ds`rate < maxrate)) ->
	%        ds
	%          WITH [rate := rate(ds) + 1,
	%                time := vtbi(ds) / (rate(ds) + 1),
	%                clock := 0],
	%      ((ds`dm = dtime) AND (ds`time < maxtime)) ->
	%        ds
	%          WITH [time := time(ds) + 1,
	%                rate := vtbi(ds) / (time(ds) + 1),
	%                clock := 0],
	%      ((ds`dm = dvtbi) AND (ds`vtbi < maxinfuse)) ->
	%        ds
	%          WITH [vtbi := vtbi(ds) + 1,
	%                rate
	%                  := IF (priority(ds) = tme) AND (time(ds) > 0)
	%                       THEN (vtbi(ds) + 1) / time(ds)
	%                     ELSE rate(ds)
	%                     ENDIF,
	%                time
	%                  := IF (priority(ds) = rte) AND (rate(ds) > 0)
	%                       THEN (vtbi(ds) + 1) / rate(ds)
	%                     ELSE time(ds)
	%                     ENDIF,
	%                clock := 0],
	%      ELSE -> ds
	% ENDCOND
	  % proved
	fun_incr_TCC5: OBLIGATION
	FORALL (ds: d_state):
	    NOT (((ds`dm = drate) AND (ds`rate < maxrate)) AND
	          ((ds`dm = dtime) AND (ds`time < maxtime)))
	     AND
	     NOT (((ds`dm = drate) AND (ds`rate < maxrate)) AND
	           ((ds`dm = dvtbi) AND (ds`vtbi < maxinfuse)))
	      AND
	      NOT (((ds`dm = dtime) AND (ds`time < maxtime)) AND
	            ((ds`dm = dvtbi) AND (ds`vtbi < maxinfuse)))
	
	% Subtype TCC generated (at line 203, column 20) for  rate(ds) - 1
	% expected type  irates
	  % proved
	fun_decr_TCC1: OBLIGATION
	FORALL (ds: d_state):
	    (ds`dm = drate) AND (ds`rate >= 1) IMPLIES ds`rate - 1 >= 0
	
	% Subtype TCC generated (at line 204, column 53) for  (rate(ds) - 1)
	% expected type  nznum
	  % proved
	fun_decr_TCC2: OBLIGATION
	FORALL (ds: d_state):
	    (ds`dm = drate) AND (ds`rate >= 1) AND ds`rate /= 1 IMPLIES
	     (ds`rate - 1) /= 0
	
	% Subtype TCC generated (at line 204, column 41) for
	% vtbi(ds) / (rate(ds) - 1)
	% expected type  itimes
	  % proved
	fun_decr_TCC3: OBLIGATION
	FORALL (ds: d_state):
	    (ds`dm = drate) AND (ds`rate >= 1) AND ds`rate /= 1 IMPLIES
	     ds`vtbi / (ds`rate - 1) >= 0
	
	% Subtype TCC generated (at line 209, column 53) for  (time(ds) - 1)
	% expected type  nznum
	  % proved
	fun_decr_TCC4: OBLIGATION
	FORALL (ds: d_state):
	    (ds`dm = dtime) AND (ds`time >= 1) AND ds`time /= 1 IMPLIES
	     (ds`time - 1) /= 0
	
	% Subtype TCC generated (at line 209, column 41) for
	% vtbi(ds) / (time(ds) - 1)
	% expected type  irates
	  % proved
	fun_decr_TCC5: OBLIGATION
	FORALL (ds: d_state):
	    (ds`dm = dtime) AND (ds`time >= 1) AND ds`time /= 1 IMPLIES
	     ds`vtbi / (ds`time - 1) >= 0
	
	% Subtype TCC generated (at line 208, column 20) for  time(ds) - 1
	% expected type  itimes
	  % proved
	fun_decr_TCC6: OBLIGATION
	FORALL (ds: d_state):
	    (ds`dm = dtime) AND (ds`time >= 1) IMPLIES ds`time - 1 >= 0
	
	% Subtype TCC generated (at line 215, column 25) for
	% (vtbi(ds) - 1) / time(ds)
	% expected type  irates
	  % proved
	fun_decr_TCC7: OBLIGATION
	FORALL (ds: d_state):
	    (ds`dm = dvtbi) AND
	     (ds`vtbi >= 1) AND (ds`priority = tme) AND (ds`time /= 0)
	     IMPLIES (ds`vtbi - 1) / ds`time >= 0
	
	% Subtype TCC generated (at line 217, column 25) for
	% (vtbi(ds) - 1) / rate(ds)
	% expected type  itimes
	  % proved
	fun_decr_TCC8: OBLIGATION
	FORALL (ds: d_state):
	    (ds`dm = dvtbi) AND
	     (ds`vtbi >= 1) AND (ds`priority = rte) AND (ds`rate /= 0)
	     IMPLIES (ds`vtbi - 1) / ds`rate >= 0
	
	% Subtype TCC generated (at line 213, column 21) for  vtbi(ds) - 1
	% expected type  ivols
	  % proved
	fun_decr_TCC9: OBLIGATION
	FORALL (ds: d_state):
	    (ds`dm = dvtbi) AND (ds`vtbi >= 1) IMPLIES ds`vtbi - 1 >= 0
	
	% Disjointness TCC generated (at line 201, column 2) for
	% COND ((ds`dm = drate) AND (ds`rate >= 1)) ->
	%        ds
	%          WITH [rate := rate(ds) - 1,
	%                time
	%                  := IF rate(ds) /= 1 THEN vtbi(ds) / (rate(ds) - 1)
	%                     ELSE 0
	%                     ENDIF,
	%                clock := 0],
	%      ((ds`dm = dtime) AND (ds`time >= 1)) ->
	%        ds
	%          WITH [time := time(ds) - 1,
	%                rate
	%                  := IF time(ds) /= 1 THEN vtbi(ds) / (time(ds) - 1)
	%                     ELSE 0
	%                     ENDIF,
	%                clock := 0],
	%      ((ds`dm = dvtbi) AND (ds`vtbi >= 1)) ->
	%        ds
	%          WITH [vtbi := vtbi(ds) - 1,
	%                rate
	%                  := IF (priority(ds) = tme) AND (time(ds) /= 0)
	%                       THEN (vtbi(ds) - 1) / time(ds)
	%                     ELSE rate(ds)
	%                     ENDIF,
	%                time
	%                  := IF (priority(ds) = rte) AND (rate(ds) /= 0)
	%                       THEN (vtbi(ds) - 1) / rate(ds)
	%                     ELSE time(ds)
	%                     ENDIF,
	%                clock := 0],
	%      ELSE -> ds
	% ENDCOND
	  % proved
	fun_decr_TCC10: OBLIGATION
	FORALL (ds: d_state):
	    NOT (((ds`dm = drate) AND (ds`rate >= 1)) AND
	          ((ds`dm = dtime) AND (ds`time >= 1)))
	     AND
	     NOT (((ds`dm = drate) AND (ds`rate >= 1)) AND
	           ((ds`dm = dvtbi) AND (ds`vtbi >= 1)))
	      AND
	      NOT (((ds`dm = dtime) AND (ds`time >= 1)) AND
	            ((ds`dm = dvtbi) AND (ds`vtbi >= 1)))
	
	% Disjointness TCC generated (at line 243, column 24) for
	% COND dm(ds) = mainmenu -> xmainmenu,
	%      dm(ds) = dvtbi -> xdvtbi,
	%      dm(ds) = drate -> xdrate,
	%      dm(ds) = dtime -> xdtime,
	%      dm(ds) = dinfusing -> xdinfusing,
	%      dm(ds) = dalarm -> xdalarm,
	%      dm(ds) = dkvo -> xdkvo,
	%      dm(ds) = dblank -> xdblank
	% ENDCOND
	  % proved
	upd_pan_TCC1: OBLIGATION
	FORALL (ds: d_state, p: par):
	    enum_par(p) AND p = dpm IMPLIES
	          (NOT (ds`dm = mainmenu AND ds`dm = dvtbi))
	      AND (NOT (ds`dm = mainmenu AND ds`dm = drate))
	      AND (NOT (ds`dm = mainmenu AND ds`dm = dtime))
	      AND (NOT (ds`dm = mainmenu AND ds`dm = dinfusing))
	      AND (NOT (ds`dm = mainmenu AND ds`dm = dalarm))
	      AND (NOT (ds`dm = mainmenu AND ds`dm = dkvo))
	      AND (NOT (ds`dm = mainmenu AND ds`dm = dblank))
	      AND (NOT (ds`dm = dvtbi AND ds`dm = drate))
	      AND (NOT (ds`dm = dvtbi AND ds`dm = dtime))
	      AND (NOT (ds`dm = dvtbi AND ds`dm = dinfusing))
	      AND (NOT (ds`dm = dvtbi AND ds`dm = dalarm))
	      AND (NOT (ds`dm = dvtbi AND ds`dm = dkvo))
	      AND (NOT (ds`dm = dvtbi AND ds`dm = dblank))
	      AND (NOT (ds`dm = drate AND ds`dm = dtime))
	      AND (NOT (ds`dm = drate AND ds`dm = dinfusing))
	      AND (NOT (ds`dm = drate AND ds`dm = dalarm))
	      AND (NOT (ds`dm = drate AND ds`dm = dkvo))
	      AND (NOT (ds`dm = drate AND ds`dm = dblank))
	      AND (NOT (ds`dm = dtime AND ds`dm = dinfusing))
	      AND (NOT (ds`dm = dtime AND ds`dm = dalarm))
	      AND (NOT (ds`dm = dtime AND ds`dm = dkvo))
	      AND (NOT (ds`dm = dtime AND ds`dm = dblank))
	      AND (NOT (ds`dm = dinfusing AND ds`dm = dalarm))
	      AND (NOT (ds`dm = dinfusing AND ds`dm = dkvo))
	      AND (NOT (ds`dm = dinfusing AND ds`dm = dblank))
	      AND (NOT (ds`dm = dalarm AND ds`dm = dkvo))
	      AND (NOT (ds`dm = dalarm AND ds`dm = dblank))
	      AND NOT (ds`dm = dkvo AND ds`dm = dblank)
	
	% Coverage TCC generated (at line 243, column 24) for
	% COND dm(ds) = mainmenu -> xmainmenu,
	%      dm(ds) = dvtbi -> xdvtbi,
	%      dm(ds) = drate -> xdrate,
	%      dm(ds) = dtime -> xdtime,
	%      dm(ds) = dinfusing -> xdinfusing,
	%      dm(ds) = dalarm -> xdalarm,
	%      dm(ds) = dkvo -> xdkvo,
	%      dm(ds) = dblank -> xdblank
	% ENDCOND
	  % proved
	upd_pan_TCC2: OBLIGATION
	FORALL (ds: d_state, p: par):
	    enum_par(p) AND p = dpm IMPLIES
	          (ds`dm = mainmenu) OR (ds`dm = dvtbi) OR (ds`dm = drate)
	      OR (ds`dm = dtime) OR (ds`dm = dinfusing) OR (ds`dm = dalarm)
	      OR (ds`dm = dkvo) OR (ds`dm = dblank)
	
	% Disjointness TCC generated (at line 254, column 23) for
	% COND m(ds) = off -> xoff,
	%      m(ds) = pause -> xpause,
	%      m(ds) = infuse -> xinfuse
	% ENDCOND
	  % proved
	upd_pan_TCC3: OBLIGATION
	FORALL (ds: d_state, p: par):
	    enum_par(p) AND p = mde IMPLIES
	     NOT (ds`m = off AND ds`m = pause) AND
	      NOT (ds`m = off AND ds`m = infuse) AND
	       NOT (ds`m = pause AND ds`m = infuse)
	
	% Coverage TCC generated (at line 254, column 23) for
	% COND m(ds) = off -> xoff,
	%      m(ds) = pause -> xpause,
	%      m(ds) = infuse -> xinfuse
	% ENDCOND
	  % proved
	upd_pan_TCC4: OBLIGATION
	FORALL (ds: d_state, p: par):
	    enum_par(p) AND p = mde IMPLIES ds`m = off OR ds`m = pause OR ds`m = infuse
	
	% Disjointness TCC generated (at line 233, column 21) for
	% COND p = rte -> rate(ds),
	%      p = vtb -> vtbi(ds),
	%      p = tme -> time(ds),
	%      ELSE -> null_value
	% ENDCOND
	  % proved
	upd_pan_TCC5: OBLIGATION
	FORALL (p: par):
	    num_par(p) IMPLIES
	     NOT (p = rte AND p = vtb) AND
	      NOT (p = rte AND p = tme) AND NOT (p = vtb AND p = tme)
	
	% The disjointness TCC (at line 241, column 20) in decl nil for
	% term generated from upd_pan
	%  COND p = dpm ->
	%        COND ds`dm = mainmenu -> xmainmenu,
	%             ds`dm = dvtbi -> xdvtbi,
	%             ds`dm = drate -> xdrate,
	%             ds`dm = dtime -> xdtime,
	%             ds`dm = dinfusing -> xdinfusing,
	%             ds`dm = dalarm -> xdalarm,
	%             ds`dm = dkvo -> xdkvo,
	%             ds`dm = dblank -> xdblank
	%        ENDCOND,
	%      p = mde ->
	%        COND ds`m = off -> xoff,
	%             ds`m = pause -> xpause,
	%             ds`m = infuse -> xinfuse
	%        ENDCOND,
	%      p = enum_er -> IF ds`ip_error THEN xalarm ELSE xok ENDIF,
	%      ELSE -> xnilval
	% ENDCOND
	% Subtype TCC generated (at line 303, column 69) for  bolus_time(ds) - 1
	% expected type  itimes
	  % proved
	tick_TCC1: OBLIGATION
	FORALL (ds: d_state):
	    (ds`m /= off) AND (ds`m = infuse) AND (ds`bolus_time >= 1) IMPLIES
	     ds`bolus_time - 1 >= 0
	
	% Subtype TCC generated (at line 301, column 57) for  time(ds) - 1
	% expected type  itimes
	  % proved
	tick_TCC2: OBLIGATION
	FORALL (ds: d_state):
	    (ds`m /= off) AND (ds`m = infuse) AND (ds`time >= 1) IMPLIES
	     ds`time - 1 >= 0
	
	% Subtype TCC generated (at line 308, column 54) for  vtbi(ds) - bolus_rate
	% expected type  ivols
	  % proved
	tick_TCC3: OBLIGATION
	FORALL (ds: d_state):
	    (ds`m /= off) AND
	     (ds`m = infuse) AND ds`bolus_time > 0 AND (ds`vtbi >= bolus_rate)
	     IMPLIES ds`vtbi - bolus_rate >= 0
	
	% Subtype TCC generated (at line 310, column 52) for  vtbi(ds) - rate(ds)
	% expected type  ivols
	  % proved
	tick_TCC4: OBLIGATION
	FORALL (ds: d_state):
	    (ds`m /= off) AND
	     (ds`m = infuse) AND NOT ds`bolus_time > 0 AND (ds`vtbi >= ds`rate)
	     IMPLIES ds`vtbi - ds`rate >= 0
	
	% The disjointness TCC (at line 290, column 10) in decl nil for
	% term generated from tick
	%  COND (ds`m = pause) AND (ds`clock = timeout) -> dalarm,
	%      (ds`m = infuse) AND (ds`vtbi <= ds`rate) -> dalarm,
	%      ELSE -> ds`dm
	% ENDCOND
	% was not generated because it simplifies to TRUE.
	% Disjointness TCC generated (at line 332, column 0) for
	% COND a = powr -> fun_power(ds),
	%      a = incr ->
	%        IF per_incr(ds) THEN fun_incr(ds)
	%        ELSE ds WITH [ip_error := TRUE]
	%        ENDIF,
	%      a = decr ->
	%        IF per_decr(ds) THEN fun_decr(ds)
	%        ELSE ds WITH [ip_error := TRUE]
	%        ENDIF,
	%      a = bolus ->
	%        IF per_bolus(ds) THEN fun_bolus(ds)
	%        ELSE ds WITH [ip_error := TRUE]
	%        ENDIF,
	%      a = confirm ->
	%        IF per_confirm(ds) THEN fun_confirm(ds)
	%        ELSE ds WITH [ip_error := TRUE]
	%        ENDIF,
	%      a = choosetime ->
	%        IF per_choosetime(ds) THEN fun_choosetime(ds)
	%        ELSE ds WITH [ip_error := TRUE]
	%        ENDIF,
	%      a = choosevtbi ->
	%        IF per_choosevtbi(ds) THEN fun_choosevtbi(ds)
	%        ELSE ds WITH [ip_error := TRUE]
	%        ENDIF,
	%      a = chooserate ->
	%        IF per_chooserate(ds) THEN fun_chooserate(ds)
	%        ELSE ds WITH [ip_error := TRUE]
	%        ENDIF,
	%      a = start ->
	%        IF per_infuse(ds) THEN fun_infuse(ds)
	%        ELSE ds WITH [ip_error := TRUE]
	%        ENDIF,
	%      a = hold ->
	%        IF per_pause(ds) THEN fun_pause(ds)
	%        ELSE ds WITH [ip_error := TRUE]
	%        ENDIF,
	%      ELSE -> ds WITH [ip_error := TRUE]
	% ENDCOND
	  % untried
	fun_ip_TCC1: OBLIGATION
	FORALL (a: action_id):
	         (NOT (a = powr AND a = incr)) AND (NOT (a = powr AND a = decr))
	     AND (NOT (a = powr AND a = bolus)) AND (NOT (a = powr AND a = confirm))
	     AND (NOT (a = powr AND a = choosetime))
	     AND (NOT (a = powr AND a = choosevtbi))
	     AND (NOT (a = powr AND a = chooserate)) AND (NOT (a = powr AND a = start))
	     AND (NOT (a = powr AND a = hold)) AND (NOT (a = incr AND a = decr))
	     AND (NOT (a = incr AND a = bolus)) AND (NOT (a = incr AND a = confirm))
	     AND (NOT (a = incr AND a = choosetime))
	     AND (NOT (a = incr AND a = choosevtbi))
	     AND (NOT (a = incr AND a = chooserate)) AND (NOT (a = incr AND a = start))
	     AND (NOT (a = incr AND a = hold)) AND (NOT (a = decr AND a = bolus))
	     AND (NOT (a = decr AND a = confirm))
	     AND (NOT (a = decr AND a = choosetime))
	     AND (NOT (a = decr AND a = choosevtbi))
	     AND (NOT (a = decr AND a = chooserate)) AND (NOT (a = decr AND a = start))
	     AND (NOT (a = decr AND a = hold)) AND (NOT (a = bolus AND a = confirm))
	     AND (NOT (a = bolus AND a = choosetime))
	     AND (NOT (a = bolus AND a = choosevtbi))
	     AND (NOT (a = bolus AND a = chooserate))
	     AND (NOT (a = bolus AND a = start)) AND (NOT (a = bolus AND a = hold))
	     AND (NOT (a = confirm AND a = choosetime))
	     AND (NOT (a = confirm AND a = choosevtbi))
	     AND (NOT (a = confirm AND a = chooserate))
	     AND (NOT (a = confirm AND a = start)) AND (NOT (a = confirm AND a = hold))
	     AND (NOT (a = choosetime AND a = choosevtbi))
	     AND (NOT (a = choosetime AND a = chooserate))
	     AND (NOT (a = choosetime AND a = start))
	     AND (NOT (a = choosetime AND a = hold))
	     AND (NOT (a = choosevtbi AND a = chooserate))
	     AND (NOT (a = choosevtbi AND a = start))
	     AND (NOT (a = choosevtbi AND a = hold))
	     AND (NOT (a = chooserate AND a = start))
	     AND (NOT (a = chooserate AND a = hold)) AND NOT (a = start AND a = hold)

END infusion_pumps_th_TCCS